#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>


/* 0이 켜지는 코드 */
int main(void)

{
	DDRC = 0xff;
	PORTC = 0x5B;

    while (1) 
    {
		PORTC = 0x5B;
		_delay_ms(500);
    }
}


/* FND 숫자 증가 */
int main(void)

{
	uint8_t FND_Number[]
	={0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
		
		int count = 0;
		DDRC = 0xff;
		
		while (1)
		{
			PORTC = FND_Number[count];
			count = (count + 1) % 10;
			_delay_ms(500);
		}
}


/* 순차적인 FND 증가 */
#define FND_DATA_DDR	 DDRC	// 에 데이터 포트 설정
#define FND_SELECT_DDR	 DDRF	// 샐렉트 포트 설정
#define FND_DATA_PORT	 PORTC	// 데이터 레지스터 설정
#define FND_SELECT_PORT  PORTF	// 셀렉트 레지스터 설정

void FND_Display(uint16_t data);  //디스플레이 함수, 4자리 표현으로 16비트로 설정

int main(void)
{
	FND_DATA_DDR = 0xff;
	FND_SELECT_DDR = 0xff;
	FND_SELECT_PORT = 0x00;
	uint16_t count = 0;
	uint32_t timeTick = 0; 
	uint32_t prevTime = 0;
	
	/* h*/
	
	while(1)
	{
		FND_Display(count);
		if (timeTick - prevTime > 100)			 //100ms가 지날때마다 count 값 1씩 증가
		{
			prevTime = timeTick;
			count++;
		}
		_delay_ms(1);							// 1ms 지연시간
		timeTick++;								// 시간을 1ms 씩 증가
	}
}

void FND_Display(uint16_t data)
{
	static uint8_t position = 0;
	uint8_t fnddata [10]						//FND데이터 배열 저장
	={0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
		
	switch(position)							// 현재 출력할 자리에 따라 해당 자리의 FND 출력
	{
		case 0:									// 첫번째자리 FND출력을 위해 첫번째핀 LOW, 나머지핀 HIGH 설정
		FND_SELECT_PORT &= ~(1<<3);				// digit 1번 on
		FND_SELECT_PORT |=(1<<0)|(1<<1)|(1<<2);	// digit 2,3,4, off
		FND_DATA_PORT = fnddata[data/1000];		// 천의 자리를 구하여 해당 FND 출력
		break;
		
		case 1:									// 3번째자리 FND출력을 위해 첫번째핀 LOW, 나머지핀 HIGH 설정
		FND_SELECT_PORT &= ~(1<<2);				// digit 2번 on
		FND_SELECT_PORT |=(1<<0)|(1<<1)|(1<<3);	// digit 1,3,4, off
		FND_DATA_PORT = fnddata[data/100%10];		// 백의 자리를 구하여 해당 FND 출력
		break;
		
		case 2:									// 세번째자리 FND출력을 위해 첫번째핀 LOW, 나머지핀 HIGH 설정
		FND_SELECT_PORT &= ~(1<<1);				// digit 3번 on
		FND_SELECT_PORT |=(1<<0)|(1<<2)|(1<<3);	// digit 1,2,4, off
		FND_DATA_PORT = fnddata[data/10%10];	// 십의 자리를 구하여 해당 FND 출력
		break;
		
		case 3:									// 네번째자리 FND출력을 위해 첫번째핀 LOW, 나머지핀 HIGH 설정
		FND_SELECT_PORT &= ~(1<<0);				// digit 4번 on
		FND_SELECT_PORT |=(1<<1)|(1<<2)|(1<<3);	// digit 1,2,3 off
		FND_DATA_PORT = fnddata[data%10];		// 일의 자리를 구하여 해당 FND 출력
		break;
		/*c*/
	}
	position++;									// 다음자리 이동을 위해 position 증가
	position = position %4;						// 4자리를 출력한 후 다시 첫번째로 돌아가기 위해 
	// position 값을 4로 나눈 나머지 값을 저장
}
