
I2C(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000b32  00000bc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080013a  0080013a  00000c00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f8  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df5  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf1  00000000  00000000  00003531  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073d  00000000  00000000  00004498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ad  00000000  00000000  00004bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 33       	cpi	r26, 0x3A	; 58
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e3       	ldi	r26, 0x3A	; 58
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d3 d1       	rcall	.+934    	; 0x46a <main>
  c4:	34 c5       	rjmp	.+2664   	; 0xb2e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <DS1302_Init>:

void DS1302_Init()
{
	/* 클럭핀, 데이터 핀 출력으로 설정
	    리셋핀 LOW 로 설정          */
	DS1302_CLK_DDR  |= (1<<DS1302_CLK);
  c8:	e1 e6       	ldi	r30, 0x61	; 97
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 83       	st	Z, r24
	DS1302_DATA_DDR |= (1<<DS1302_DAT);
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 83       	st	Z, r24
	DS1302_RST_DDR  |= (1<<DS1302_RST);
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	
	DS1302_CLK_PORT  &= ~(1<<DS1302_CLK);	// 클락을 초기값 LOW
  de:	e2 e6       	ldi	r30, 0x62	; 98
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	80 83       	st	Z, r24
	DS1302_DATA_PORT |=  (1<<DS1302_DAT);
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
	DS1302_RST_PORT  &= ~(1<<DS1302_RST);	// 리셋의 초기값 LOW
  ee:	80 81       	ld	r24, Z
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <DS1302_Selected>:
	
}

void DS1302_Selected()
{
	DS1302_RST_PORT |= (1<<DS1302_RST);     // 리셋핀을 HIGH로 설정 (읽거나 쓰거나 둘 중 하나를 하기 위한 준비과정)
  f6:	e2 e6       	ldi	r30, 0x62	; 98
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <DS1302_Deselected>:
}

void DS1302_Deselected()
{
	DS1302_RST_PORT  &= ~(1<<DS1302_RST);	// 리셋의 초기값 LOW
 102:	e2 e6       	ldi	r30, 0x62	; 98
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <DS1302_Clock>:
}

void DS1302_Clock()
{
	DS1302_CLK_PORT |= (1<<DS1302_CLK);		// 클럭핀 HIGH
 10e:	e2 e6       	ldi	r30, 0x62	; 98
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 61       	ori	r24, 0x10	; 16
 116:	80 83       	st	Z, r24
	DS1302_CLK_PORT &= ~(1<<DS1302_CLK);	// 클럭핀 LOW
 118:	80 81       	ld	r24, Z
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <DS1302_DatabitSet>:
}

void DS1302_DatabitSet()
{
	DS1302_DATA_PORT |= (1<<DS1302_DAT);	// 데이터핀을 HIGH
 120:	e2 e6       	ldi	r30, 0x62	; 98
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <DS1302_DataBitReset>:
}

void DS1302_DataBitReset()
{
	DS1302_DATA_PORT &= ~(1<<DS1302_DAT);
 12c:	e2 e6       	ldi	r30, 0x62	; 98
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <DS1302_Change_Readmode>:
}

void DS1302_Change_Readmode()
{
	DS1302_DATA_DDR &= ~(1<<DS1302_DAT);
 138:	e1 e6       	ldi	r30, 0x61	; 97
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <DS1302_Change_WriteMode>:
}

void DS1302_Change_WriteMode()
{
	DS1302_DATA_DDR |=  (1<<DS1302_DAT);	// 쓰기모드에서 데이터 핀 출력 설정 변경
 144:	e1 e6       	ldi	r30, 0x61	; 97
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <decimal_to_bcd>:
uint8_t decimal_to_bcd(uint8_t decimal)	// 10진 TO BCD
{
	// 변수값이 5 < -- 상위 4비트 자지로  9<-- 하위 4비트에
	// 4비트씩 묶어서 1의자리, 10의자리 저장 리턴
	
	return ((decimal/10)<<4 | (decimal%10));
 150:	9d ec       	ldi	r25, 0xCD	; 205
 152:	89 9f       	mul	r24, r25
 154:	91 2d       	mov	r25, r1
 156:	11 24       	eor	r1, r1
 158:	96 95       	lsr	r25
 15a:	96 95       	lsr	r25
 15c:	96 95       	lsr	r25
 15e:	20 e1       	ldi	r18, 0x10	; 16
 160:	92 9f       	mul	r25, r18
 162:	a0 01       	movw	r20, r0
 164:	11 24       	eor	r1, r1
 166:	99 0f       	add	r25, r25
 168:	29 2f       	mov	r18, r25
 16a:	22 0f       	add	r18, r18
 16c:	22 0f       	add	r18, r18
 16e:	92 0f       	add	r25, r18
 170:	89 1b       	sub	r24, r25
}
 172:	84 2b       	or	r24, r20
 174:	08 95       	ret

00000176 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd)
{
	return (((bcd>>4)*10) + (bcd&0x0f));
 176:	98 2f       	mov	r25, r24
 178:	92 95       	swap	r25
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	99 0f       	add	r25, r25
 17e:	29 2f       	mov	r18, r25
 180:	22 0f       	add	r18, r18
 182:	22 0f       	add	r18, r18
 184:	92 0f       	add	r25, r18
 186:	8f 70       	andi	r24, 0x0F	; 15
}
 188:	89 0f       	add	r24, r25
 18a:	08 95       	ret

0000018c <DS1302_TxData>:

void DS1302_TxData(uint8_t txData)	// RTC에 데이터 전송
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
	// 데이터를 하위비트에서 상위비트 순서로 전송
	// 클럭신호를 발생시켜 데이터를 전송
	DS1302_Change_WriteMode();
 194:	d7 df       	rcall	.-82     	; 0x144 <DS1302_Change_WriteMode>
	for (int i = 0; i < 8; i++)
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <DS1302_TxData+0x2e>
	{
		// 하위비트부터 상위비트로
		// 1비트 출력하고 클록 올렸다 내린다
		if (txData & (1<<i))
 19c:	81 2f       	mov	r24, r17
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0c 2e       	mov	r0, r28
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DS1302_TxData+0x1c>
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DS1302_TxData+0x18>
 1ac:	80 ff       	sbrs	r24, 0
		{
			DS1302_DatabitSet();	// 1이면 실행
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DS1302_TxData+0x28>
 1b0:	b7 df       	rcall	.-146    	; 0x120 <DS1302_DatabitSet>
		}
		else
		{
			DS1302_DataBitReset();	// 0이면 실행
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DS1302_TxData+0x2a>
 1b4:	bb df       	rcall	.-138    	; 0x12c <DS1302_DataBitReset>
		}
		
		// 클럭 올렸다 내린다
		DS1302_Clock();
 1b6:	ab df       	rcall	.-170    	; 0x10e <DS1302_Clock>
 1b8:	21 96       	adiw	r28, 0x01	; 1
void DS1302_TxData(uint8_t txData)	// RTC에 데이터 전송
{
	// 데이터를 하위비트에서 상위비트 순서로 전송
	// 클럭신호를 발생시켜 데이터를 전송
	DS1302_Change_WriteMode();
	for (int i = 0; i < 8; i++)
 1ba:	c8 30       	cpi	r28, 0x08	; 8
 1bc:	d1 05       	cpc	r29, r1
 1be:	74 f3       	brlt	.-36     	; 0x19c <DS1302_TxData+0x10>
 1c0:	df 91       	pop	r29
		
		// 클럭 올렸다 내린다
		DS1302_Clock();
		
	}
}
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	08 95       	ret

000001c8 <DS1302_WiteData>:
 1c8:	cf 93       	push	r28


void DS1302_WiteData(uint8_t address, uint8_t data)
{
 1ca:	df 93       	push	r29
 1cc:	d8 2f       	mov	r29, r24
 1ce:	c6 2f       	mov	r28, r22
	// 주소와 데이터를 전송하고
	// RST 핀을 LOW로 설정
	
	//RST핀을 HIGH로 설정
	DS1302_Selected();
 1d0:	92 df       	rcall	.-220    	; 0xf6 <DS1302_Selected>
	
	// 주소 전송하고
	DS1302_TxData(address);
 1d2:	8d 2f       	mov	r24, r29
 1d4:	db df       	rcall	.-74     	; 0x18c <DS1302_TxData>
	
	// 데이터값 전송
	DS1302_TxData(decimal_to_bcd(data));
 1d6:	8c 2f       	mov	r24, r28
 1d8:	bb df       	rcall	.-138    	; 0x150 <decimal_to_bcd>
 1da:	d8 df       	rcall	.-80     	; 0x18c <DS1302_TxData>
	
	// ce(rst) LOW
	DS1302_Deselected();
 1dc:	92 df       	rcall	.-220    	; 0x102 <DS1302_Deselected>
 1de:	df 91       	pop	r29
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <DS1302_SetTimeData>:
 1e4:	cf 93       	push	r28

void DS1302_SetTimeData(DS1302 timedata)
{
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	27 97       	sbiw	r28, 0x07	; 7
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	3a 83       	std	Y+2, r19	; 0x02
 1fa:	4b 83       	std	Y+3, r20	; 0x03
 1fc:	5c 83       	std	Y+4, r21	; 0x04
 1fe:	6d 83       	std	Y+5, r22	; 0x05
 200:	7e 83       	std	Y+6, r23	; 0x06
 202:	8f 83       	std	Y+7, r24	; 0x07
	DS1302_WiteData(ADDR_SEC, timedata.sec);
 204:	62 2f       	mov	r22, r18
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	df df       	rcall	.-66     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_MIN, timedata.min);
 20a:	6a 81       	ldd	r22, Y+2	; 0x02
 20c:	82 e8       	ldi	r24, 0x82	; 130
 20e:	dc df       	rcall	.-72     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_HOUR, timedata.hour);
 210:	6b 81       	ldd	r22, Y+3	; 0x03
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	d9 df       	rcall	.-78     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_DATE, timedata.date);
 216:	6c 81       	ldd	r22, Y+4	; 0x04
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	d6 df       	rcall	.-84     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_MONTH, timedata.month);
 21c:	6d 81       	ldd	r22, Y+5	; 0x05
 21e:	88 e8       	ldi	r24, 0x88	; 136
 220:	d3 df       	rcall	.-90     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_DAYOWEEK, timedata.dayOfweek);
 222:	6e 81       	ldd	r22, Y+6	; 0x06
 224:	8a e8       	ldi	r24, 0x8A	; 138
 226:	d0 df       	rcall	.-96     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_YEAR ,timedata.year);
 228:	6f 81       	ldd	r22, Y+7	; 0x07
 22a:	8c e8       	ldi	r24, 0x8C	; 140
 22c:	cd df       	rcall	.-102    	; 0x1c8 <DS1302_WiteData>
 22e:	27 96       	adiw	r28, 0x07	; 7
}
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <DS1302_RxData>:
 240:	1f 93       	push	r17

uint8_t DS1302_RxData()
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	/* 데이터를 하위비트부터 상위비트순으로 읽고
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
	DS1302_Change_Readmode();
 246:	78 df       	rcall	.-272    	; 0x138 <DS1302_Change_Readmode>
	for (int i = 0; i < 8; i++)
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 데이터를 하위비트부터 상위비트순으로 읽고
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
 24c:	10 e0       	ldi	r17, 0x00	; 0
	DS1302_Change_Readmode();
	for (int i = 0; i < 8; i++)
 24e:	13 c0       	rjmp	.+38     	; 0x276 <DS1302_RxData+0x36>
		//if(DS1302_DATA_PIN & (1 << DS1302_DAT))
			//rxData |= 1<<i;
		//else
			//rxData &= ~(1<<i);
			
			rxData |= (DS1302_DATA_PIN & (1 << DS1302_DAT)) ? (1<<i) : 0; // 삼항연산자
 250:	05 9b       	sbis	0x00, 5	; 0
 252:	09 c0       	rjmp	.+18     	; 0x266 <DS1302_RxData+0x26>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0c 2e       	mov	r0, r28
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DS1302_RxData+0x20>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DS1302_RxData+0x1c>
 264:	02 c0       	rjmp	.+4      	; 0x26a <DS1302_RxData+0x2a>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	18 2b       	or	r17, r24
			if( i != 7 ) DS1302_Clock(); // read일때 홀링엣지가 7개임
 26c:	c7 30       	cpi	r28, 0x07	; 7
 26e:	d1 05       	cpc	r29, r1
 270:	09 f0       	breq	.+2      	; 0x274 <DS1302_RxData+0x34>
 272:	4d df       	rcall	.-358    	; 0x10e <DS1302_Clock>
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
	DS1302_Change_Readmode();
	for (int i = 0; i < 8; i++)
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	c8 30       	cpi	r28, 0x08	; 8
 278:	d1 05       	cpc	r29, r1
 27a:	54 f3       	brlt	.-44     	; 0x250 <DS1302_RxData+0x10>
			rxData |= (DS1302_DATA_PIN & (1 << DS1302_DAT)) ? (1<<i) : 0; // 삼항연산자
			if( i != 7 ) DS1302_Clock(); // read일때 홀링엣지가 7개임
	}
	
	return rxData;
}
 27c:	81 2f       	mov	r24, r17
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	08 95       	ret

00000286 <DS1302_ReadData>:

uint8_t DS1302_ReadData(uint8_t address)
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
	// 특정 주소에서 데이터 읽음
	uint8_t rxData = 0;	// 저장 변수
	DS1302_Selected();	// ds1302 선택
 28a:	35 df       	rcall	.-406    	; 0xf6 <DS1302_Selected>
	DS1302_TxData(address+1);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8c 0f       	add	r24, r28
	rxData =DS1302_RxData();
 290:	7d df       	rcall	.-262    	; 0x18c <DS1302_TxData>
 292:	d6 df       	rcall	.-84     	; 0x240 <DS1302_RxData>
	DS1302_Deselected();			// 선택 해제
 294:	c8 2f       	mov	r28, r24
 296:	35 df       	rcall	.-406    	; 0x102 <DS1302_Deselected>
	return bcd_to_decimal(rxData); // BCD코드를 10진으로 변환
 298:	8c 2f       	mov	r24, r28
 29a:	6d df       	rcall	.-294    	; 0x176 <bcd_to_decimal>
 29c:	cf 91       	pop	r28
}
 29e:	08 95       	ret

000002a0 <DS1302_GetTime>:
 2a0:	cf 93       	push	r28


void DS1302_GetTime(DS1302 *timedata)
{
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	timedata->sec = DS1302_ReadData(ADDR_SEC);
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	ee df       	rcall	.-36     	; 0x286 <DS1302_ReadData>
 2aa:	88 83       	st	Y, r24
	timedata->min = DS1302_ReadData(ADDR_MIN);
 2ac:	82 e8       	ldi	r24, 0x82	; 130
 2ae:	eb df       	rcall	.-42     	; 0x286 <DS1302_ReadData>
 2b0:	89 83       	std	Y+1, r24	; 0x01
	timedata->hour = DS1302_ReadData(ADDR_HOUR);
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	e8 df       	rcall	.-48     	; 0x286 <DS1302_ReadData>
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	df 91       	pop	r29
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DS1302_GetData>:
 2be:	cf 93       	push	r28

void DS1302_GetData(DS1302 *timedata)
{
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
	timedata->date = DS1302_ReadData(ADDR_DATE);
 2c4:	86 e8       	ldi	r24, 0x86	; 134
 2c6:	df df       	rcall	.-66     	; 0x286 <DS1302_ReadData>
 2c8:	8b 83       	std	Y+3, r24	; 0x03
	timedata->month = DS1302_ReadData(ADDR_MONTH);
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	dc df       	rcall	.-72     	; 0x286 <DS1302_ReadData>
 2ce:	8c 83       	std	Y+4, r24	; 0x04
	timedata->dayOfweek = DS1302_ReadData(ADDR_DAYOWEEK);
 2d0:	8a e8       	ldi	r24, 0x8A	; 138
 2d2:	d9 df       	rcall	.-78     	; 0x286 <DS1302_ReadData>
 2d4:	8d 83       	std	Y+5, r24	; 0x05
	timedata->year = DS1302_ReadData(ADDR_YEAR);
 2d6:	8c e8       	ldi	r24, 0x8C	; 140
 2d8:	d6 df       	rcall	.-84     	; 0x286 <DS1302_ReadData>
 2da:	8e 83       	std	Y+6, r24	; 0x06
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <I2C_Init>:
﻿
#include "I2C.h"

void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL)|(1<<I2C_SDA);		// I2C핀을 출력으로 설정
 2e2:	81 b3       	in	r24, 0x11	; 17
 2e4:	83 60       	ori	r24, 0x03	; 3
 2e6:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; //100kHz
 2e8:	88 e4       	ldi	r24, 0x48	; 72
 2ea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 2ee:	08 95       	ret

000002f0 <I2C_Start>:
	//TWBR = 32; //200kHz
	//TWBR = 12; //400kHz
}
void I2C_Start()
{	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// TWCR 레지스터의 START비트를 설정	
 2f0:	84 ea       	ldi	r24, 0xA4	; 164
 2f2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR &	(1<<TWINT)));	//하드웨어가 TWINT세트되는 시점을 결정하므로 약간의 시간이 걸림
 2f6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2fa:	88 23       	and	r24, r24
 2fc:	e4 f7       	brge	.-8      	; 0x2f6 <I2C_Start+0x6>
}
 2fe:	08 95       	ret

00000300 <I2C_Stop>:

void I2C_Stop()
{	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//TWCR의 STOP 비트 설정
 300:	84 e9       	ldi	r24, 0x94	; 148
 302:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 306:	08 95       	ret

00000308 <I2C_TxData>:
}

void I2C_TxData(uint8_t data)		// 데이터 한 바이트 보냄
{
	TWDR = data;					// 데이터를 TWDR 레지스터에 로드
 308:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) |	(1<<TWEN);	// 데이터 전송을 시작하기 위해 TWCR 레지스트의 TWINT 비트 세트	
 30c:	84 e8       	ldi	r24, 0x84	; 132
 30e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	
	/* Wait for TWINT Flag set. 
	This indicates that the DATA has been transmitted, and
	ACK/NACK has been received.*/
	while (!(TWCR &	(1<<TWINT)));
 312:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <I2C_TxData+0xa>
}
 31a:	08 95       	ret

0000031c <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	d8 2f       	mov	r29, r24
 322:	c6 2f       	mov	r28, r22
	I2C_Start();
 324:	e5 df       	rcall	.-54     	; 0x2f0 <I2C_Start>
	I2C_TxData(devAddrRW);
 326:	8d 2f       	mov	r24, r29
 328:	ef df       	rcall	.-34     	; 0x308 <I2C_TxData>
	I2C_TxData(data);
 32a:	8c 2f       	mov	r24, r28
 32c:	ed df       	rcall	.-38     	; 0x308 <I2C_TxData>
	I2C_Stop();
 32e:	e8 df       	rcall	.-48     	; 0x300 <I2C_Stop>
 330:	df 91       	pop	r29
}
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <LCD_EnablePin>:
 336:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end>
	LCD_EnablePin();	
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E);				// E비트를 0 으로 설정
 33a:	6b 7f       	andi	r22, 0xFB	; 251
 33c:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 0을 보냄
 340:	8e e4       	ldi	r24, 0x4E	; 78
 342:	ec df       	rcall	.-40     	; 0x31c <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E);					// E비트를 1 으로 설정
 344:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end>
 348:	64 60       	ori	r22, 0x04	; 4
 34a:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 1을 보냄
 34e:	8e e4       	ldi	r24, 0x4E	; 78
 350:	e5 df       	rcall	.-54     	; 0x31c <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E);				// E비트를 1 으로 설정
 352:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end>
 356:	6b 7f       	andi	r22, 0xFB	; 251
 358:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 0을 보냄
 35c:	8e e4       	ldi	r24, 0x4E	; 78
 35e:	de df       	rcall	.-68     	; 0x31c <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	98 e1       	ldi	r25, 0x18	; 24
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <LCD_EnablePin+0x2e>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LCD_EnablePin+0x34>
 36a:	00 00       	nop
 36c:	08 95       	ret

0000036e <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{	
 36e:	cf 93       	push	r28
 370:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 372:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 376:	8f 70       	andi	r24, 0x0F	; 15
 378:	9c 2f       	mov	r25, r28
 37a:	90 7f       	andi	r25, 0xF0	; 240
 37c:	89 2b       	or	r24, r25
 37e:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
	LCD_EnablePin();
 382:	d9 df       	rcall	.-78     	; 0x336 <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f) << 4); // 하위 4bit 출력
 384:	20 e1       	ldi	r18, 0x10	; 16
 386:	c2 9f       	mul	r28, r18
 388:	c0 01       	movw	r24, r0
 38a:	11 24       	eor	r1, r1
 38c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
 390:	9f 70       	andi	r25, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
	LCD_EnablePin();	
 398:	ce df       	rcall	.-100    	; 0x336 <LCD_EnablePin>
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commadData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS);		// RS비트 0으로 설정
 39e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW);	// RW 비트 0으로 설정/////
 3a2:	9c 7f       	andi	r25, 0xFC	; 252
 3a4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__data_end>
	LCD_Data4bit(commadData);			// LCD 명령을 보냄
 3a8:	e2 cf       	rjmp	.-60     	; 0x36e <LCD_Data4bit>
 3aa:	08 95       	ret

000003ac <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)	
{
	I2C_LCD_Data |= (1<<LCD_RS);		// RS비트 1으로 설정
 3ac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <__data_end>
 3b0:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW);	// RW 비트 0으로 설정////
 3b2:	9d 7f       	andi	r25, 0xFD	; 253
 3b4:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <__data_end>
	LCD_Data4bit(charData);				// LCD 에 문자 데이터 보냄
 3b8:	da cf       	rjmp	.-76     	; 0x36e <LCD_Data4bit>
 3ba:	08 95       	ret

000003bc <LCD_BackLightOn>:
}

void LCD_BackLightOn()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 3bc:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <__data_end>
 3c0:	68 60       	ori	r22, 0x08	; 8
 3c2:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 백라이트를 켭니다
 3c6:	8e e4       	ldi	r24, 0x4E	; 78
 3c8:	a9 cf       	rjmp	.-174    	; 0x31c <I2C_TxByte>
 3ca:	08 95       	ret

000003cc <LCD_GotoXY>:
}

void LCD_GotoXY(uint8_t row, uint8_t col)
{
	col %= 16;
 3cc:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
 3ce:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col;	 // 지정된 행과 열의 LCD 주소를 계산합니다.
 3d0:	90 e4       	ldi	r25, 0x40	; 64
 3d2:	89 9f       	mul	r24, r25
 3d4:	60 0d       	add	r22, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	LCD_WriteCommand(command);				// 커서 위치를 설정하는 LCD 명령을 작성합니다.
 3da:	80 58       	subi	r24, 0x80	; 128
 3dc:	e0 cf       	rjmp	.-64     	; 0x39e <LCD_WriteCommand>
 3de:	08 95       	ret

000003e0 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	8c 01       	movw	r16, r24
	for (uint8_t i=0; string[i]; i++)
 3e8:	c0 e0       	ldi	r28, 0x00	; 0
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 3ec:	df df       	rcall	.-66     	; 0x3ac <LCD_WriteData>
	LCD_WriteCommand(command);				// 커서 위치를 설정하는 LCD 명령을 작성합니다.
}

void LCD_WriteString(char *string)
{
	for (uint8_t i=0; string[i]; i++)
 3ee:	cf 5f       	subi	r28, 0xFF	; 255
 3f0:	f8 01       	movw	r30, r16
 3f2:	ec 0f       	add	r30, r28
 3f4:	f1 1d       	adc	r31, r1
 3f6:	80 81       	ld	r24, Z
 3f8:	81 11       	cpse	r24, r1
 3fa:	f8 cf       	rjmp	.-16     	; 0x3ec <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	08 95       	ret

00000404 <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	ea 01       	movw	r28, r20
	LCD_GotoXY(row, col);		// 커서를 지정된 행과 열로 이동합니다.
 40a:	e0 df       	rcall	.-64     	; 0x3cc <LCD_GotoXY>
	LCD_WriteString(string);
 40c:	ce 01       	movw	r24, r28
 40e:	e8 df       	rcall	.-48     	; 0x3e0 <LCD_WriteString>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 416:	65 df       	rcall	.-310    	; 0x2e2 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	80 e7       	ldi	r24, 0x70	; 112
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <LCD_Init+0x8>
 426:	00 c0       	rjmp	.+0      	; 0x428 <LCD_Init+0x12>
 428:	00 00       	nop
	
	_delay_ms(50);
	LCD_WriteCommand(0x03);
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	b8 df       	rcall	.-144    	; 0x39e <LCD_WriteCommand>
 42e:	8f e3       	ldi	r24, 0x3F	; 63
 430:	9c e9       	ldi	r25, 0x9C	; 156
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <LCD_Init+0x1c>
 436:	00 c0       	rjmp	.+0      	; 0x438 <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 438:	00 00       	nop
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	b0 df       	rcall	.-160    	; 0x39e <LCD_WriteCommand>
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <LCD_Init+0x2c>
 446:	00 c0       	rjmp	.+0      	; 0x448 <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 448:	00 00       	nop
 44a:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 44c:	a8 df       	rcall	.-176    	; 0x39e <LCD_WriteCommand>
 44e:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 450:	a6 df       	rcall	.-180    	; 0x39e <LCD_WriteCommand>
 452:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 454:	a4 df       	rcall	.-184    	; 0x39e <LCD_WriteCommand>
 456:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 458:	a2 df       	rcall	.-188    	; 0x39e <LCD_WriteCommand>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	a0 df       	rcall	.-192    	; 0x39e <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 45e:	86 e0       	ldi	r24, 0x06	; 6
 460:	9e df       	rcall	.-196    	; 0x39e <LCD_WriteCommand>
 462:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 464:	9c df       	rcall	.-200    	; 0x39e <LCD_WriteCommand>
 466:	aa cf       	rjmp	.-172    	; 0x3bc <LCD_BackLightOn>
 468:	08 95       	ret

0000046a <main>:
	LCD_BackLightOn();
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61

FILE OUTPUT =FDEV_SETUP_STREAM(UART_transmit, NULL, _FDEV_SETUP_WRITE);

	
int main(void)
{
 470:	de b7       	in	r29, 0x3e	; 62
 472:	a5 97       	sbiw	r28, 0x25	; 37
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61

	/*
	ds1302 RTC 를 이용하여 시계와 날짜 표시
	*/
   	// uart 초기화
	UART_init();
 47e:	67 d0       	rcall	.+206    	; 0x54e <UART_init>
	stdout = &OUTPUT; // 출력 스트림 지정
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <__iob+0x3>
 488:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <__iob+0x2>
	
	// DS1302 초기화
	DS1302_Init();
 48c:	1d de       	rcall	.-966    	; 0xc8 <DS1302_Init>

	// RTC에 시간과 날짜를 설정
	DS1302 myTime;	// 구조체 변수 생성
	myTime.year = 23;
 48e:	87 e1       	ldi	r24, 0x17	; 23
 490:	8f 83       	std	Y+7, r24	; 0x07
	myTime.month = 5;
 492:	85 e0       	ldi	r24, 0x05	; 5
 494:	8d 83       	std	Y+5, r24	; 0x05
	myTime.date = 16;
 496:	80 e1       	ldi	r24, 0x10	; 16
 498:	8c 83       	std	Y+4, r24	; 0x04
	myTime.dayOfweek = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	8e 83       	std	Y+6, r24	; 0x06
	myTime.hour = 14;
 49e:	8e e0       	ldi	r24, 0x0E	; 14
 4a0:	8b 83       	std	Y+3, r24	; 0x03
	myTime.min = 28;
 4a2:	8c e1       	ldi	r24, 0x1C	; 28
 4a4:	8a 83       	std	Y+2, r24	; 0x02
	myTime.sec = 0;
 4a6:	19 82       	std	Y+1, r1	; 0x01
	
	DS1302_SetTimeData(myTime);
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	3c e1       	ldi	r19, 0x1C	; 28
 4ac:	4e e0       	ldi	r20, 0x0E	; 14
 4ae:	50 e1       	ldi	r21, 0x10	; 16
 4b0:	65 e0       	ldi	r22, 0x05	; 5
 4b2:	71 e0       	ldi	r23, 0x01	; 1
 4b4:	87 e1       	ldi	r24, 0x17	; 23
	
	uint16_t count = 0;
	uint8_t buff[30];
	
	
   LCD_Init();
 4b6:	96 de       	rcall	.-724    	; 0x1e4 <DS1302_SetTimeData>
 4b8:	ae df       	rcall	.-164    	; 0x416 <LCD_Init>
   LCD_WriteStringXY(0,0,"DATE:");
 4ba:	4e e0       	ldi	r20, 0x0E	; 14
 4bc:	51 e0       	ldi	r21, 0x01	; 1
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	a0 df       	rcall	.-192    	; 0x404 <LCD_WriteStringXY>
   LCD_WriteStringXY(1,0,"TIME:");
 4c4:	44 e1       	ldi	r20, 0x14	; 20
 4c6:	51 e0       	ldi	r21, 0x01	; 1
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	9b df       	rcall	.-202    	; 0x404 <LCD_WriteStringXY>
   
    while (1) 
    {
		
		
		DS1302_GetTime(&myTime);
 4ce:	ce 01       	movw	r24, r28
 4d0:	01 96       	adiw	r24, 0x01	; 1
 4d2:	e6 de       	rcall	.-564    	; 0x2a0 <DS1302_GetTime>
 4d4:	ce 01       	movw	r24, r28
		DS1302_GetData(&myTime);
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	f2 de       	rcall	.-540    	; 0x2be <DS1302_GetData>
 4da:	2c 81       	ldd	r18, Y+4	; 0x04
 4dc:	9d 81       	ldd	r25, Y+5	; 0x05
		
		sprintf(buff,"20%2d.%02d.%02d.", myTime.year, myTime.month, myTime.date); 
 4de:	8f 81       	ldd	r24, Y+7	; 0x07
 4e0:	1f 92       	push	r1
 4e2:	2f 93       	push	r18
 4e4:	1f 92       	push	r1
 4e6:	9f 93       	push	r25
 4e8:	1f 92       	push	r1
 4ea:	8f 93       	push	r24
 4ec:	8a e1       	ldi	r24, 0x1A	; 26
 4ee:	91 e0       	ldi	r25, 0x01	; 1
 4f0:	9f 93       	push	r25
 4f2:	8f 93       	push	r24
 4f4:	8e 01       	movw	r16, r28
 4f6:	08 5f       	subi	r16, 0xF8	; 248
 4f8:	1f 4f       	sbci	r17, 0xFF	; 255
 4fa:	1f 93       	push	r17
 4fc:	0f 93       	push	r16
 4fe:	3c d0       	rcall	.+120    	; 0x578 <sprintf>
 500:	a8 01       	movw	r20, r16
		LCD_WriteStringXY(0,5,buff);
 502:	65 e0       	ldi	r22, 0x05	; 5
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	7e df       	rcall	.-260    	; 0x404 <LCD_WriteStringXY>
 508:	29 81       	ldd	r18, Y+1	; 0x01
 50a:	9a 81       	ldd	r25, Y+2	; 0x02
		
		sprintf(buff,"%02d:%02d:%02d", myTime.hour, myTime.min, myTime.sec);
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	1f 92       	push	r1
 510:	2f 93       	push	r18
 512:	1f 92       	push	r1
 514:	9f 93       	push	r25
 516:	1f 92       	push	r1
 518:	8f 93       	push	r24
 51a:	8b e2       	ldi	r24, 0x2B	; 43
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	9f 93       	push	r25
 520:	8f 93       	push	r24
 522:	1f 93       	push	r17
 524:	0f 93       	push	r16
 526:	28 d0       	rcall	.+80     	; 0x578 <sprintf>
 528:	a8 01       	movw	r20, r16
		LCD_WriteStringXY(1,5,buff);
 52a:	65 e0       	ldi	r22, 0x05	; 5
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	6a df       	rcall	.-300    	; 0x404 <LCD_WriteStringXY>
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	83 ed       	ldi	r24, 0xD3	; 211
 534:	90 e3       	ldi	r25, 0x30	; 48
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <main+0xcc>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0xd6>
 540:	00 00       	nop
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	f8 94       	cli
 546:	de bf       	out	0x3e, r29	; 62
 548:	0f be       	out	0x3f, r0	; 63
 54a:	cd bf       	out	0x3d, r28	; 61
 54c:	c0 cf       	rjmp	.-128    	; 0x4ce <main+0x64>

0000054e <UART_init>:
﻿# include "UART.h"

void UART_init(void)
{
	UBRR0H = 0x00;
 54e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xCF;					 //207;
 552:	8f ec       	ldi	r24, 0xCF	; 207
 554:	89 b9       	out	0x09, r24	; 9

	UCSR0A |= (1<<U2X0);			 //비동기, 8비트, 패리티없음, 1비트 정지 (stop 비트는 1비트로 보내준다.), 시리얼 통신의 상태를 확인하고 통신 과정을 제어하기 위한 레지스터 중 하나,
 556:	8b b1       	in	r24, 0x0b	; 11
 558:	82 60       	ori	r24, 0x02	; 2
 55a:	8b b9       	out	0x0b, r24	; 11
									 // 2배속 모드 설정

									 //UCSR0C |= 0x06;
	UCSR0B |= (1<<RXEN0);			 //RX Complete Interrupt Enable
 55c:	8a b1       	in	r24, 0x0a	; 10
 55e:	80 61       	ori	r24, 0x10	; 16
 560:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0);			 //TX Complete Interrupt Enable
 562:	8a b1       	in	r24, 0x0a	; 10
 564:	88 60       	ori	r24, 0x08	; 8
 566:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B |= (1 << RXCIE0);
 568:	8a b1       	in	r24, 0x0a	; 10
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	8a b9       	out	0x0a, r24	; 10
 56e:	08 95       	ret

00000570 <UART_transmit>:
}

void UART_transmit(char data)
{
	while ( !(UCSR0A & (1<<UDRE0))); //WHILE문 안의 (UCSR0A &(1<<UDRE0)이 0이면 무한루프,
 570:	5d 9b       	sbis	0x0b, 5	; 11
 572:	fe cf       	rjmp	.-4      	; 0x570 <UART_transmit>
									 // 안비어있으면 무한루트이다가 비어있으면 나가서 UDR0=data
									 
	UDR0 = data;					 // UDR0에 데이터가 들어가면 바로 출력
 574:	8c b9       	out	0x0c, r24	; 12
 576:	08 95       	ret

00000578 <sprintf>:
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	2e 97       	sbiw	r28, 0x0e	; 14
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	0d 89       	ldd	r16, Y+21	; 0x15
 592:	1e 89       	ldd	r17, Y+22	; 0x16
 594:	86 e0       	ldi	r24, 0x06	; 6
 596:	8c 83       	std	Y+4, r24	; 0x04
 598:	1a 83       	std	Y+2, r17	; 0x02
 59a:	09 83       	std	Y+1, r16	; 0x01
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f e7       	ldi	r25, 0x7F	; 127
 5a0:	9e 83       	std	Y+6, r25	; 0x06
 5a2:	8d 83       	std	Y+5, r24	; 0x05
 5a4:	ae 01       	movw	r20, r28
 5a6:	47 5e       	subi	r20, 0xE7	; 231
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	6f 89       	ldd	r22, Y+23	; 0x17
 5ac:	78 8d       	ldd	r23, Y+24	; 0x18
 5ae:	ce 01       	movw	r24, r28
 5b0:	01 96       	adiw	r24, 0x01	; 1
 5b2:	10 d0       	rcall	.+32     	; 0x5d4 <vfprintf>
 5b4:	ef 81       	ldd	r30, Y+7	; 0x07
 5b6:	f8 85       	ldd	r31, Y+8	; 0x08
 5b8:	e0 0f       	add	r30, r16
 5ba:	f1 1f       	adc	r31, r17
 5bc:	10 82       	st	Z, r1
 5be:	2e 96       	adiw	r28, 0x0e	; 14
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <vfprintf>:
 5d4:	2f 92       	push	r2
 5d6:	3f 92       	push	r3
 5d8:	4f 92       	push	r4
 5da:	5f 92       	push	r5
 5dc:	6f 92       	push	r6
 5de:	7f 92       	push	r7
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	2b 97       	sbiw	r28, 0x0b	; 11
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
 608:	6c 01       	movw	r12, r24
 60a:	7b 01       	movw	r14, r22
 60c:	8a 01       	movw	r16, r20
 60e:	fc 01       	movw	r30, r24
 610:	17 82       	std	Z+7, r1	; 0x07
 612:	16 82       	std	Z+6, r1	; 0x06
 614:	83 81       	ldd	r24, Z+3	; 0x03
 616:	81 ff       	sbrs	r24, 1
 618:	bf c1       	rjmp	.+894    	; 0x998 <vfprintf+0x3c4>
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	3c 01       	movw	r6, r24
 620:	f6 01       	movw	r30, r12
 622:	93 81       	ldd	r25, Z+3	; 0x03
 624:	f7 01       	movw	r30, r14
 626:	93 fd       	sbrc	r25, 3
 628:	85 91       	lpm	r24, Z+
 62a:	93 ff       	sbrs	r25, 3
 62c:	81 91       	ld	r24, Z+
 62e:	7f 01       	movw	r14, r30
 630:	88 23       	and	r24, r24
 632:	09 f4       	brne	.+2      	; 0x636 <vfprintf+0x62>
 634:	ad c1       	rjmp	.+858    	; 0x990 <vfprintf+0x3bc>
 636:	85 32       	cpi	r24, 0x25	; 37
 638:	39 f4       	brne	.+14     	; 0x648 <vfprintf+0x74>
 63a:	93 fd       	sbrc	r25, 3
 63c:	85 91       	lpm	r24, Z+
 63e:	93 ff       	sbrs	r25, 3
 640:	81 91       	ld	r24, Z+
 642:	7f 01       	movw	r14, r30
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	21 f4       	brne	.+8      	; 0x650 <vfprintf+0x7c>
 648:	b6 01       	movw	r22, r12
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	d6 d1       	rcall	.+940    	; 0x9fa <fputc>
 64e:	e8 cf       	rjmp	.-48     	; 0x620 <vfprintf+0x4c>
 650:	91 2c       	mov	r9, r1
 652:	21 2c       	mov	r2, r1
 654:	31 2c       	mov	r3, r1
 656:	ff e1       	ldi	r31, 0x1F	; 31
 658:	f3 15       	cp	r31, r3
 65a:	d8 f0       	brcs	.+54     	; 0x692 <vfprintf+0xbe>
 65c:	8b 32       	cpi	r24, 0x2B	; 43
 65e:	79 f0       	breq	.+30     	; 0x67e <vfprintf+0xaa>
 660:	38 f4       	brcc	.+14     	; 0x670 <vfprintf+0x9c>
 662:	80 32       	cpi	r24, 0x20	; 32
 664:	79 f0       	breq	.+30     	; 0x684 <vfprintf+0xb0>
 666:	83 32       	cpi	r24, 0x23	; 35
 668:	a1 f4       	brne	.+40     	; 0x692 <vfprintf+0xbe>
 66a:	23 2d       	mov	r18, r3
 66c:	20 61       	ori	r18, 0x10	; 16
 66e:	1d c0       	rjmp	.+58     	; 0x6aa <vfprintf+0xd6>
 670:	8d 32       	cpi	r24, 0x2D	; 45
 672:	61 f0       	breq	.+24     	; 0x68c <vfprintf+0xb8>
 674:	80 33       	cpi	r24, 0x30	; 48
 676:	69 f4       	brne	.+26     	; 0x692 <vfprintf+0xbe>
 678:	23 2d       	mov	r18, r3
 67a:	21 60       	ori	r18, 0x01	; 1
 67c:	16 c0       	rjmp	.+44     	; 0x6aa <vfprintf+0xd6>
 67e:	83 2d       	mov	r24, r3
 680:	82 60       	ori	r24, 0x02	; 2
 682:	38 2e       	mov	r3, r24
 684:	e3 2d       	mov	r30, r3
 686:	e4 60       	ori	r30, 0x04	; 4
 688:	3e 2e       	mov	r3, r30
 68a:	2a c0       	rjmp	.+84     	; 0x6e0 <vfprintf+0x10c>
 68c:	f3 2d       	mov	r31, r3
 68e:	f8 60       	ori	r31, 0x08	; 8
 690:	1d c0       	rjmp	.+58     	; 0x6cc <vfprintf+0xf8>
 692:	37 fc       	sbrc	r3, 7
 694:	2d c0       	rjmp	.+90     	; 0x6f0 <vfprintf+0x11c>
 696:	20 ed       	ldi	r18, 0xD0	; 208
 698:	28 0f       	add	r18, r24
 69a:	2a 30       	cpi	r18, 0x0A	; 10
 69c:	40 f0       	brcs	.+16     	; 0x6ae <vfprintf+0xda>
 69e:	8e 32       	cpi	r24, 0x2E	; 46
 6a0:	b9 f4       	brne	.+46     	; 0x6d0 <vfprintf+0xfc>
 6a2:	36 fc       	sbrc	r3, 6
 6a4:	75 c1       	rjmp	.+746    	; 0x990 <vfprintf+0x3bc>
 6a6:	23 2d       	mov	r18, r3
 6a8:	20 64       	ori	r18, 0x40	; 64
 6aa:	32 2e       	mov	r3, r18
 6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <vfprintf+0x10c>
 6ae:	36 fe       	sbrs	r3, 6
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <vfprintf+0xea>
 6b2:	8a e0       	ldi	r24, 0x0A	; 10
 6b4:	98 9e       	mul	r9, r24
 6b6:	20 0d       	add	r18, r0
 6b8:	11 24       	eor	r1, r1
 6ba:	92 2e       	mov	r9, r18
 6bc:	11 c0       	rjmp	.+34     	; 0x6e0 <vfprintf+0x10c>
 6be:	ea e0       	ldi	r30, 0x0A	; 10
 6c0:	2e 9e       	mul	r2, r30
 6c2:	20 0d       	add	r18, r0
 6c4:	11 24       	eor	r1, r1
 6c6:	22 2e       	mov	r2, r18
 6c8:	f3 2d       	mov	r31, r3
 6ca:	f0 62       	ori	r31, 0x20	; 32
 6cc:	3f 2e       	mov	r3, r31
 6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <vfprintf+0x10c>
 6d0:	8c 36       	cpi	r24, 0x6C	; 108
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0x108>
 6d4:	83 2d       	mov	r24, r3
 6d6:	80 68       	ori	r24, 0x80	; 128
 6d8:	38 2e       	mov	r3, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <vfprintf+0x10c>
 6dc:	88 36       	cpi	r24, 0x68	; 104
 6de:	41 f4       	brne	.+16     	; 0x6f0 <vfprintf+0x11c>
 6e0:	f7 01       	movw	r30, r14
 6e2:	93 fd       	sbrc	r25, 3
 6e4:	85 91       	lpm	r24, Z+
 6e6:	93 ff       	sbrs	r25, 3
 6e8:	81 91       	ld	r24, Z+
 6ea:	7f 01       	movw	r14, r30
 6ec:	81 11       	cpse	r24, r1
 6ee:	b3 cf       	rjmp	.-154    	; 0x656 <vfprintf+0x82>
 6f0:	98 2f       	mov	r25, r24
 6f2:	9f 7d       	andi	r25, 0xDF	; 223
 6f4:	95 54       	subi	r25, 0x45	; 69
 6f6:	93 30       	cpi	r25, 0x03	; 3
 6f8:	28 f4       	brcc	.+10     	; 0x704 <vfprintf+0x130>
 6fa:	0c 5f       	subi	r16, 0xFC	; 252
 6fc:	1f 4f       	sbci	r17, 0xFF	; 255
 6fe:	9f e3       	ldi	r25, 0x3F	; 63
 700:	99 83       	std	Y+1, r25	; 0x01
 702:	0d c0       	rjmp	.+26     	; 0x71e <vfprintf+0x14a>
 704:	83 36       	cpi	r24, 0x63	; 99
 706:	31 f0       	breq	.+12     	; 0x714 <vfprintf+0x140>
 708:	83 37       	cpi	r24, 0x73	; 115
 70a:	71 f0       	breq	.+28     	; 0x728 <vfprintf+0x154>
 70c:	83 35       	cpi	r24, 0x53	; 83
 70e:	09 f0       	breq	.+2      	; 0x712 <vfprintf+0x13e>
 710:	55 c0       	rjmp	.+170    	; 0x7bc <vfprintf+0x1e8>
 712:	20 c0       	rjmp	.+64     	; 0x754 <vfprintf+0x180>
 714:	f8 01       	movw	r30, r16
 716:	80 81       	ld	r24, Z
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	0e 5f       	subi	r16, 0xFE	; 254
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	88 24       	eor	r8, r8
 720:	83 94       	inc	r8
 722:	91 2c       	mov	r9, r1
 724:	53 01       	movw	r10, r6
 726:	12 c0       	rjmp	.+36     	; 0x74c <vfprintf+0x178>
 728:	28 01       	movw	r4, r16
 72a:	f2 e0       	ldi	r31, 0x02	; 2
 72c:	4f 0e       	add	r4, r31
 72e:	51 1c       	adc	r5, r1
 730:	f8 01       	movw	r30, r16
 732:	a0 80       	ld	r10, Z
 734:	b1 80       	ldd	r11, Z+1	; 0x01
 736:	36 fe       	sbrs	r3, 6
 738:	03 c0       	rjmp	.+6      	; 0x740 <vfprintf+0x16c>
 73a:	69 2d       	mov	r22, r9
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <vfprintf+0x170>
 740:	6f ef       	ldi	r22, 0xFF	; 255
 742:	7f ef       	ldi	r23, 0xFF	; 255
 744:	c5 01       	movw	r24, r10
 746:	4e d1       	rcall	.+668    	; 0x9e4 <strnlen>
 748:	4c 01       	movw	r8, r24
 74a:	82 01       	movw	r16, r4
 74c:	f3 2d       	mov	r31, r3
 74e:	ff 77       	andi	r31, 0x7F	; 127
 750:	3f 2e       	mov	r3, r31
 752:	15 c0       	rjmp	.+42     	; 0x77e <vfprintf+0x1aa>
 754:	28 01       	movw	r4, r16
 756:	22 e0       	ldi	r18, 0x02	; 2
 758:	42 0e       	add	r4, r18
 75a:	51 1c       	adc	r5, r1
 75c:	f8 01       	movw	r30, r16
 75e:	a0 80       	ld	r10, Z
 760:	b1 80       	ldd	r11, Z+1	; 0x01
 762:	36 fe       	sbrs	r3, 6
 764:	03 c0       	rjmp	.+6      	; 0x76c <vfprintf+0x198>
 766:	69 2d       	mov	r22, r9
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x19c>
 76c:	6f ef       	ldi	r22, 0xFF	; 255
 76e:	7f ef       	ldi	r23, 0xFF	; 255
 770:	c5 01       	movw	r24, r10
 772:	2d d1       	rcall	.+602    	; 0x9ce <strnlen_P>
 774:	4c 01       	movw	r8, r24
 776:	f3 2d       	mov	r31, r3
 778:	f0 68       	ori	r31, 0x80	; 128
 77a:	3f 2e       	mov	r3, r31
 77c:	82 01       	movw	r16, r4
 77e:	33 fc       	sbrc	r3, 3
 780:	19 c0       	rjmp	.+50     	; 0x7b4 <vfprintf+0x1e0>
 782:	82 2d       	mov	r24, r2
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	88 16       	cp	r8, r24
 788:	99 06       	cpc	r9, r25
 78a:	a0 f4       	brcc	.+40     	; 0x7b4 <vfprintf+0x1e0>
 78c:	b6 01       	movw	r22, r12
 78e:	80 e2       	ldi	r24, 0x20	; 32
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	33 d1       	rcall	.+614    	; 0x9fa <fputc>
 794:	2a 94       	dec	r2
 796:	f5 cf       	rjmp	.-22     	; 0x782 <vfprintf+0x1ae>
 798:	f5 01       	movw	r30, r10
 79a:	37 fc       	sbrc	r3, 7
 79c:	85 91       	lpm	r24, Z+
 79e:	37 fe       	sbrs	r3, 7
 7a0:	81 91       	ld	r24, Z+
 7a2:	5f 01       	movw	r10, r30
 7a4:	b6 01       	movw	r22, r12
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	28 d1       	rcall	.+592    	; 0x9fa <fputc>
 7aa:	21 10       	cpse	r2, r1
 7ac:	2a 94       	dec	r2
 7ae:	21 e0       	ldi	r18, 0x01	; 1
 7b0:	82 1a       	sub	r8, r18
 7b2:	91 08       	sbc	r9, r1
 7b4:	81 14       	cp	r8, r1
 7b6:	91 04       	cpc	r9, r1
 7b8:	79 f7       	brne	.-34     	; 0x798 <vfprintf+0x1c4>
 7ba:	e1 c0       	rjmp	.+450    	; 0x97e <vfprintf+0x3aa>
 7bc:	84 36       	cpi	r24, 0x64	; 100
 7be:	11 f0       	breq	.+4      	; 0x7c4 <vfprintf+0x1f0>
 7c0:	89 36       	cpi	r24, 0x69	; 105
 7c2:	39 f5       	brne	.+78     	; 0x812 <vfprintf+0x23e>
 7c4:	f8 01       	movw	r30, r16
 7c6:	37 fe       	sbrs	r3, 7
 7c8:	07 c0       	rjmp	.+14     	; 0x7d8 <vfprintf+0x204>
 7ca:	60 81       	ld	r22, Z
 7cc:	71 81       	ldd	r23, Z+1	; 0x01
 7ce:	82 81       	ldd	r24, Z+2	; 0x02
 7d0:	93 81       	ldd	r25, Z+3	; 0x03
 7d2:	0c 5f       	subi	r16, 0xFC	; 252
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <vfprintf+0x214>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	07 2e       	mov	r0, r23
 7de:	00 0c       	add	r0, r0
 7e0:	88 0b       	sbc	r24, r24
 7e2:	99 0b       	sbc	r25, r25
 7e4:	0e 5f       	subi	r16, 0xFE	; 254
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	f3 2d       	mov	r31, r3
 7ea:	ff 76       	andi	r31, 0x6F	; 111
 7ec:	3f 2e       	mov	r3, r31
 7ee:	97 ff       	sbrs	r25, 7
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x230>
 7f2:	90 95       	com	r25
 7f4:	80 95       	com	r24
 7f6:	70 95       	com	r23
 7f8:	61 95       	neg	r22
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	f0 68       	ori	r31, 0x80	; 128
 802:	3f 2e       	mov	r3, r31
 804:	2a e0       	ldi	r18, 0x0A	; 10
 806:	30 e0       	ldi	r19, 0x00	; 0
 808:	a3 01       	movw	r20, r6
 80a:	33 d1       	rcall	.+614    	; 0xa72 <__ultoa_invert>
 80c:	88 2e       	mov	r8, r24
 80e:	86 18       	sub	r8, r6
 810:	44 c0       	rjmp	.+136    	; 0x89a <vfprintf+0x2c6>
 812:	85 37       	cpi	r24, 0x75	; 117
 814:	31 f4       	brne	.+12     	; 0x822 <vfprintf+0x24e>
 816:	23 2d       	mov	r18, r3
 818:	2f 7e       	andi	r18, 0xEF	; 239
 81a:	b2 2e       	mov	r11, r18
 81c:	2a e0       	ldi	r18, 0x0A	; 10
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	25 c0       	rjmp	.+74     	; 0x86c <vfprintf+0x298>
 822:	93 2d       	mov	r25, r3
 824:	99 7f       	andi	r25, 0xF9	; 249
 826:	b9 2e       	mov	r11, r25
 828:	8f 36       	cpi	r24, 0x6F	; 111
 82a:	c1 f0       	breq	.+48     	; 0x85c <vfprintf+0x288>
 82c:	18 f4       	brcc	.+6      	; 0x834 <vfprintf+0x260>
 82e:	88 35       	cpi	r24, 0x58	; 88
 830:	79 f0       	breq	.+30     	; 0x850 <vfprintf+0x27c>
 832:	ae c0       	rjmp	.+348    	; 0x990 <vfprintf+0x3bc>
 834:	80 37       	cpi	r24, 0x70	; 112
 836:	19 f0       	breq	.+6      	; 0x83e <vfprintf+0x26a>
 838:	88 37       	cpi	r24, 0x78	; 120
 83a:	21 f0       	breq	.+8      	; 0x844 <vfprintf+0x270>
 83c:	a9 c0       	rjmp	.+338    	; 0x990 <vfprintf+0x3bc>
 83e:	e9 2f       	mov	r30, r25
 840:	e0 61       	ori	r30, 0x10	; 16
 842:	be 2e       	mov	r11, r30
 844:	b4 fe       	sbrs	r11, 4
 846:	0d c0       	rjmp	.+26     	; 0x862 <vfprintf+0x28e>
 848:	fb 2d       	mov	r31, r11
 84a:	f4 60       	ori	r31, 0x04	; 4
 84c:	bf 2e       	mov	r11, r31
 84e:	09 c0       	rjmp	.+18     	; 0x862 <vfprintf+0x28e>
 850:	34 fe       	sbrs	r3, 4
 852:	0a c0       	rjmp	.+20     	; 0x868 <vfprintf+0x294>
 854:	29 2f       	mov	r18, r25
 856:	26 60       	ori	r18, 0x06	; 6
 858:	b2 2e       	mov	r11, r18
 85a:	06 c0       	rjmp	.+12     	; 0x868 <vfprintf+0x294>
 85c:	28 e0       	ldi	r18, 0x08	; 8
 85e:	30 e0       	ldi	r19, 0x00	; 0
 860:	05 c0       	rjmp	.+10     	; 0x86c <vfprintf+0x298>
 862:	20 e1       	ldi	r18, 0x10	; 16
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0x298>
 868:	20 e1       	ldi	r18, 0x10	; 16
 86a:	32 e0       	ldi	r19, 0x02	; 2
 86c:	f8 01       	movw	r30, r16
 86e:	b7 fe       	sbrs	r11, 7
 870:	07 c0       	rjmp	.+14     	; 0x880 <vfprintf+0x2ac>
 872:	60 81       	ld	r22, Z
 874:	71 81       	ldd	r23, Z+1	; 0x01
 876:	82 81       	ldd	r24, Z+2	; 0x02
 878:	93 81       	ldd	r25, Z+3	; 0x03
 87a:	0c 5f       	subi	r16, 0xFC	; 252
 87c:	1f 4f       	sbci	r17, 0xFF	; 255
 87e:	06 c0       	rjmp	.+12     	; 0x88c <vfprintf+0x2b8>
 880:	60 81       	ld	r22, Z
 882:	71 81       	ldd	r23, Z+1	; 0x01
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 5f       	subi	r16, 0xFE	; 254
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	a3 01       	movw	r20, r6
 88e:	f1 d0       	rcall	.+482    	; 0xa72 <__ultoa_invert>
 890:	88 2e       	mov	r8, r24
 892:	86 18       	sub	r8, r6
 894:	fb 2d       	mov	r31, r11
 896:	ff 77       	andi	r31, 0x7F	; 127
 898:	3f 2e       	mov	r3, r31
 89a:	36 fe       	sbrs	r3, 6
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <vfprintf+0x2e4>
 89e:	23 2d       	mov	r18, r3
 8a0:	2e 7f       	andi	r18, 0xFE	; 254
 8a2:	a2 2e       	mov	r10, r18
 8a4:	89 14       	cp	r8, r9
 8a6:	58 f4       	brcc	.+22     	; 0x8be <vfprintf+0x2ea>
 8a8:	34 fe       	sbrs	r3, 4
 8aa:	0b c0       	rjmp	.+22     	; 0x8c2 <vfprintf+0x2ee>
 8ac:	32 fc       	sbrc	r3, 2
 8ae:	09 c0       	rjmp	.+18     	; 0x8c2 <vfprintf+0x2ee>
 8b0:	83 2d       	mov	r24, r3
 8b2:	8e 7e       	andi	r24, 0xEE	; 238
 8b4:	a8 2e       	mov	r10, r24
 8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <vfprintf+0x2ee>
 8b8:	b8 2c       	mov	r11, r8
 8ba:	a3 2c       	mov	r10, r3
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x2f0>
 8be:	b8 2c       	mov	r11, r8
 8c0:	01 c0       	rjmp	.+2      	; 0x8c4 <vfprintf+0x2f0>
 8c2:	b9 2c       	mov	r11, r9
 8c4:	a4 fe       	sbrs	r10, 4
 8c6:	0f c0       	rjmp	.+30     	; 0x8e6 <vfprintf+0x312>
 8c8:	fe 01       	movw	r30, r28
 8ca:	e8 0d       	add	r30, r8
 8cc:	f1 1d       	adc	r31, r1
 8ce:	80 81       	ld	r24, Z
 8d0:	80 33       	cpi	r24, 0x30	; 48
 8d2:	21 f4       	brne	.+8      	; 0x8dc <vfprintf+0x308>
 8d4:	9a 2d       	mov	r25, r10
 8d6:	99 7e       	andi	r25, 0xE9	; 233
 8d8:	a9 2e       	mov	r10, r25
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <vfprintf+0x31a>
 8dc:	a2 fe       	sbrs	r10, 2
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <vfprintf+0x318>
 8e0:	b3 94       	inc	r11
 8e2:	b3 94       	inc	r11
 8e4:	04 c0       	rjmp	.+8      	; 0x8ee <vfprintf+0x31a>
 8e6:	8a 2d       	mov	r24, r10
 8e8:	86 78       	andi	r24, 0x86	; 134
 8ea:	09 f0       	breq	.+2      	; 0x8ee <vfprintf+0x31a>
 8ec:	b3 94       	inc	r11
 8ee:	a3 fc       	sbrc	r10, 3
 8f0:	10 c0       	rjmp	.+32     	; 0x912 <vfprintf+0x33e>
 8f2:	a0 fe       	sbrs	r10, 0
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <vfprintf+0x32e>
 8f6:	b2 14       	cp	r11, r2
 8f8:	80 f4       	brcc	.+32     	; 0x91a <vfprintf+0x346>
 8fa:	28 0c       	add	r2, r8
 8fc:	92 2c       	mov	r9, r2
 8fe:	9b 18       	sub	r9, r11
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x348>
 902:	b2 14       	cp	r11, r2
 904:	58 f4       	brcc	.+22     	; 0x91c <vfprintf+0x348>
 906:	b6 01       	movw	r22, r12
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	76 d0       	rcall	.+236    	; 0x9fa <fputc>
 90e:	b3 94       	inc	r11
 910:	f8 cf       	rjmp	.-16     	; 0x902 <vfprintf+0x32e>
 912:	b2 14       	cp	r11, r2
 914:	18 f4       	brcc	.+6      	; 0x91c <vfprintf+0x348>
 916:	2b 18       	sub	r2, r11
 918:	02 c0       	rjmp	.+4      	; 0x91e <vfprintf+0x34a>
 91a:	98 2c       	mov	r9, r8
 91c:	21 2c       	mov	r2, r1
 91e:	a4 fe       	sbrs	r10, 4
 920:	0f c0       	rjmp	.+30     	; 0x940 <vfprintf+0x36c>
 922:	b6 01       	movw	r22, r12
 924:	80 e3       	ldi	r24, 0x30	; 48
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	68 d0       	rcall	.+208    	; 0x9fa <fputc>
 92a:	a2 fe       	sbrs	r10, 2
 92c:	16 c0       	rjmp	.+44     	; 0x95a <vfprintf+0x386>
 92e:	a1 fc       	sbrc	r10, 1
 930:	03 c0       	rjmp	.+6      	; 0x938 <vfprintf+0x364>
 932:	88 e7       	ldi	r24, 0x78	; 120
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <vfprintf+0x368>
 938:	88 e5       	ldi	r24, 0x58	; 88
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	b6 01       	movw	r22, r12
 93e:	0c c0       	rjmp	.+24     	; 0x958 <vfprintf+0x384>
 940:	8a 2d       	mov	r24, r10
 942:	86 78       	andi	r24, 0x86	; 134
 944:	51 f0       	breq	.+20     	; 0x95a <vfprintf+0x386>
 946:	a1 fe       	sbrs	r10, 1
 948:	02 c0       	rjmp	.+4      	; 0x94e <vfprintf+0x37a>
 94a:	8b e2       	ldi	r24, 0x2B	; 43
 94c:	01 c0       	rjmp	.+2      	; 0x950 <vfprintf+0x37c>
 94e:	80 e2       	ldi	r24, 0x20	; 32
 950:	a7 fc       	sbrc	r10, 7
 952:	8d e2       	ldi	r24, 0x2D	; 45
 954:	b6 01       	movw	r22, r12
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	50 d0       	rcall	.+160    	; 0x9fa <fputc>
 95a:	89 14       	cp	r8, r9
 95c:	30 f4       	brcc	.+12     	; 0x96a <vfprintf+0x396>
 95e:	b6 01       	movw	r22, r12
 960:	80 e3       	ldi	r24, 0x30	; 48
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	4a d0       	rcall	.+148    	; 0x9fa <fputc>
 966:	9a 94       	dec	r9
 968:	f8 cf       	rjmp	.-16     	; 0x95a <vfprintf+0x386>
 96a:	8a 94       	dec	r8
 96c:	f3 01       	movw	r30, r6
 96e:	e8 0d       	add	r30, r8
 970:	f1 1d       	adc	r31, r1
 972:	80 81       	ld	r24, Z
 974:	b6 01       	movw	r22, r12
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	40 d0       	rcall	.+128    	; 0x9fa <fputc>
 97a:	81 10       	cpse	r8, r1
 97c:	f6 cf       	rjmp	.-20     	; 0x96a <vfprintf+0x396>
 97e:	22 20       	and	r2, r2
 980:	09 f4       	brne	.+2      	; 0x984 <vfprintf+0x3b0>
 982:	4e ce       	rjmp	.-868    	; 0x620 <vfprintf+0x4c>
 984:	b6 01       	movw	r22, r12
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	37 d0       	rcall	.+110    	; 0x9fa <fputc>
 98c:	2a 94       	dec	r2
 98e:	f7 cf       	rjmp	.-18     	; 0x97e <vfprintf+0x3aa>
 990:	f6 01       	movw	r30, r12
 992:	86 81       	ldd	r24, Z+6	; 0x06
 994:	97 81       	ldd	r25, Z+7	; 0x07
 996:	02 c0       	rjmp	.+4      	; 0x99c <vfprintf+0x3c8>
 998:	8f ef       	ldi	r24, 0xFF	; 255
 99a:	9f ef       	ldi	r25, 0xFF	; 255
 99c:	2b 96       	adiw	r28, 0x0b	; 11
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	f8 94       	cli
 9a2:	de bf       	out	0x3e, r29	; 62
 9a4:	0f be       	out	0x3f, r0	; 63
 9a6:	cd bf       	out	0x3d, r28	; 61
 9a8:	df 91       	pop	r29
 9aa:	cf 91       	pop	r28
 9ac:	1f 91       	pop	r17
 9ae:	0f 91       	pop	r16
 9b0:	ff 90       	pop	r15
 9b2:	ef 90       	pop	r14
 9b4:	df 90       	pop	r13
 9b6:	cf 90       	pop	r12
 9b8:	bf 90       	pop	r11
 9ba:	af 90       	pop	r10
 9bc:	9f 90       	pop	r9
 9be:	8f 90       	pop	r8
 9c0:	7f 90       	pop	r7
 9c2:	6f 90       	pop	r6
 9c4:	5f 90       	pop	r5
 9c6:	4f 90       	pop	r4
 9c8:	3f 90       	pop	r3
 9ca:	2f 90       	pop	r2
 9cc:	08 95       	ret

000009ce <strnlen_P>:
 9ce:	fc 01       	movw	r30, r24
 9d0:	05 90       	lpm	r0, Z+
 9d2:	61 50       	subi	r22, 0x01	; 1
 9d4:	70 40       	sbci	r23, 0x00	; 0
 9d6:	01 10       	cpse	r0, r1
 9d8:	d8 f7       	brcc	.-10     	; 0x9d0 <strnlen_P+0x2>
 9da:	80 95       	com	r24
 9dc:	90 95       	com	r25
 9de:	8e 0f       	add	r24, r30
 9e0:	9f 1f       	adc	r25, r31
 9e2:	08 95       	ret

000009e4 <strnlen>:
 9e4:	fc 01       	movw	r30, r24
 9e6:	61 50       	subi	r22, 0x01	; 1
 9e8:	70 40       	sbci	r23, 0x00	; 0
 9ea:	01 90       	ld	r0, Z+
 9ec:	01 10       	cpse	r0, r1
 9ee:	d8 f7       	brcc	.-10     	; 0x9e6 <strnlen+0x2>
 9f0:	80 95       	com	r24
 9f2:	90 95       	com	r25
 9f4:	8e 0f       	add	r24, r30
 9f6:	9f 1f       	adc	r25, r31
 9f8:	08 95       	ret

000009fa <fputc>:
 9fa:	0f 93       	push	r16
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	fb 01       	movw	r30, r22
 a04:	23 81       	ldd	r18, Z+3	; 0x03
 a06:	21 fd       	sbrc	r18, 1
 a08:	03 c0       	rjmp	.+6      	; 0xa10 <fputc+0x16>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	2c c0       	rjmp	.+88     	; 0xa68 <fputc+0x6e>
 a10:	22 ff       	sbrs	r18, 2
 a12:	16 c0       	rjmp	.+44     	; 0xa40 <fputc+0x46>
 a14:	46 81       	ldd	r20, Z+6	; 0x06
 a16:	57 81       	ldd	r21, Z+7	; 0x07
 a18:	24 81       	ldd	r18, Z+4	; 0x04
 a1a:	35 81       	ldd	r19, Z+5	; 0x05
 a1c:	42 17       	cp	r20, r18
 a1e:	53 07       	cpc	r21, r19
 a20:	44 f4       	brge	.+16     	; 0xa32 <fputc+0x38>
 a22:	a0 81       	ld	r26, Z
 a24:	b1 81       	ldd	r27, Z+1	; 0x01
 a26:	9d 01       	movw	r18, r26
 a28:	2f 5f       	subi	r18, 0xFF	; 255
 a2a:	3f 4f       	sbci	r19, 0xFF	; 255
 a2c:	31 83       	std	Z+1, r19	; 0x01
 a2e:	20 83       	st	Z, r18
 a30:	8c 93       	st	X, r24
 a32:	26 81       	ldd	r18, Z+6	; 0x06
 a34:	37 81       	ldd	r19, Z+7	; 0x07
 a36:	2f 5f       	subi	r18, 0xFF	; 255
 a38:	3f 4f       	sbci	r19, 0xFF	; 255
 a3a:	37 83       	std	Z+7, r19	; 0x07
 a3c:	26 83       	std	Z+6, r18	; 0x06
 a3e:	14 c0       	rjmp	.+40     	; 0xa68 <fputc+0x6e>
 a40:	8b 01       	movw	r16, r22
 a42:	ec 01       	movw	r28, r24
 a44:	fb 01       	movw	r30, r22
 a46:	00 84       	ldd	r0, Z+8	; 0x08
 a48:	f1 85       	ldd	r31, Z+9	; 0x09
 a4a:	e0 2d       	mov	r30, r0
 a4c:	09 95       	icall
 a4e:	89 2b       	or	r24, r25
 a50:	e1 f6       	brne	.-72     	; 0xa0a <fputc+0x10>
 a52:	d8 01       	movw	r26, r16
 a54:	16 96       	adiw	r26, 0x06	; 6
 a56:	8d 91       	ld	r24, X+
 a58:	9c 91       	ld	r25, X
 a5a:	17 97       	sbiw	r26, 0x07	; 7
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	17 96       	adiw	r26, 0x07	; 7
 a60:	9c 93       	st	X, r25
 a62:	8e 93       	st	-X, r24
 a64:	16 97       	sbiw	r26, 0x06	; 6
 a66:	ce 01       	movw	r24, r28
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	0f 91       	pop	r16
 a70:	08 95       	ret

00000a72 <__ultoa_invert>:
 a72:	fa 01       	movw	r30, r20
 a74:	aa 27       	eor	r26, r26
 a76:	28 30       	cpi	r18, 0x08	; 8
 a78:	51 f1       	breq	.+84     	; 0xace <__ultoa_invert+0x5c>
 a7a:	20 31       	cpi	r18, 0x10	; 16
 a7c:	81 f1       	breq	.+96     	; 0xade <__ultoa_invert+0x6c>
 a7e:	e8 94       	clt
 a80:	6f 93       	push	r22
 a82:	6e 7f       	andi	r22, 0xFE	; 254
 a84:	6e 5f       	subi	r22, 0xFE	; 254
 a86:	7f 4f       	sbci	r23, 0xFF	; 255
 a88:	8f 4f       	sbci	r24, 0xFF	; 255
 a8a:	9f 4f       	sbci	r25, 0xFF	; 255
 a8c:	af 4f       	sbci	r26, 0xFF	; 255
 a8e:	b1 e0       	ldi	r27, 0x01	; 1
 a90:	3e d0       	rcall	.+124    	; 0xb0e <__ultoa_invert+0x9c>
 a92:	b4 e0       	ldi	r27, 0x04	; 4
 a94:	3c d0       	rcall	.+120    	; 0xb0e <__ultoa_invert+0x9c>
 a96:	67 0f       	add	r22, r23
 a98:	78 1f       	adc	r23, r24
 a9a:	89 1f       	adc	r24, r25
 a9c:	9a 1f       	adc	r25, r26
 a9e:	a1 1d       	adc	r26, r1
 aa0:	68 0f       	add	r22, r24
 aa2:	79 1f       	adc	r23, r25
 aa4:	8a 1f       	adc	r24, r26
 aa6:	91 1d       	adc	r25, r1
 aa8:	a1 1d       	adc	r26, r1
 aaa:	6a 0f       	add	r22, r26
 aac:	71 1d       	adc	r23, r1
 aae:	81 1d       	adc	r24, r1
 ab0:	91 1d       	adc	r25, r1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	20 d0       	rcall	.+64     	; 0xaf6 <__ultoa_invert+0x84>
 ab6:	09 f4       	brne	.+2      	; 0xaba <__ultoa_invert+0x48>
 ab8:	68 94       	set
 aba:	3f 91       	pop	r19
 abc:	2a e0       	ldi	r18, 0x0A	; 10
 abe:	26 9f       	mul	r18, r22
 ac0:	11 24       	eor	r1, r1
 ac2:	30 19       	sub	r19, r0
 ac4:	30 5d       	subi	r19, 0xD0	; 208
 ac6:	31 93       	st	Z+, r19
 ac8:	de f6       	brtc	.-74     	; 0xa80 <__ultoa_invert+0xe>
 aca:	cf 01       	movw	r24, r30
 acc:	08 95       	ret
 ace:	46 2f       	mov	r20, r22
 ad0:	47 70       	andi	r20, 0x07	; 7
 ad2:	40 5d       	subi	r20, 0xD0	; 208
 ad4:	41 93       	st	Z+, r20
 ad6:	b3 e0       	ldi	r27, 0x03	; 3
 ad8:	0f d0       	rcall	.+30     	; 0xaf8 <__ultoa_invert+0x86>
 ada:	c9 f7       	brne	.-14     	; 0xace <__ultoa_invert+0x5c>
 adc:	f6 cf       	rjmp	.-20     	; 0xaca <__ultoa_invert+0x58>
 ade:	46 2f       	mov	r20, r22
 ae0:	4f 70       	andi	r20, 0x0F	; 15
 ae2:	40 5d       	subi	r20, 0xD0	; 208
 ae4:	4a 33       	cpi	r20, 0x3A	; 58
 ae6:	18 f0       	brcs	.+6      	; 0xaee <__ultoa_invert+0x7c>
 ae8:	49 5d       	subi	r20, 0xD9	; 217
 aea:	31 fd       	sbrc	r19, 1
 aec:	40 52       	subi	r20, 0x20	; 32
 aee:	41 93       	st	Z+, r20
 af0:	02 d0       	rcall	.+4      	; 0xaf6 <__ultoa_invert+0x84>
 af2:	a9 f7       	brne	.-22     	; 0xade <__ultoa_invert+0x6c>
 af4:	ea cf       	rjmp	.-44     	; 0xaca <__ultoa_invert+0x58>
 af6:	b4 e0       	ldi	r27, 0x04	; 4
 af8:	a6 95       	lsr	r26
 afa:	97 95       	ror	r25
 afc:	87 95       	ror	r24
 afe:	77 95       	ror	r23
 b00:	67 95       	ror	r22
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__ultoa_invert+0x86>
 b06:	00 97       	sbiw	r24, 0x00	; 0
 b08:	61 05       	cpc	r22, r1
 b0a:	71 05       	cpc	r23, r1
 b0c:	08 95       	ret
 b0e:	9b 01       	movw	r18, r22
 b10:	ac 01       	movw	r20, r24
 b12:	0a 2e       	mov	r0, r26
 b14:	06 94       	lsr	r0
 b16:	57 95       	ror	r21
 b18:	47 95       	ror	r20
 b1a:	37 95       	ror	r19
 b1c:	27 95       	ror	r18
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0xa2>
 b22:	62 0f       	add	r22, r18
 b24:	73 1f       	adc	r23, r19
 b26:	84 1f       	adc	r24, r20
 b28:	95 1f       	adc	r25, r21
 b2a:	a0 1d       	adc	r26, r0
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
