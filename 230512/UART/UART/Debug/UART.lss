
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800100  00800100  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ec  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f5  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b0  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000427  00000000  00000000  00001a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	32 c0       	rjmp	.+100    	; 0xae <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 36       	cpi	r26, 0x66	; 102
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	33 d0       	rcall	.+102    	; 0x110 <main>
  aa:	70 c0       	rjmp	.+224    	; 0x18c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_18>:
char rxBuff[100] = {0,};
uint8_t rxflag = 0;


ISR(USART0_RX_vect)						 // 수신 1byte가 들어오면 interruot 되도록
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	static uint8_t rxHead = 0;           // 수신된 데이터의 인덱스
	uint8_t rxData = UDR0;				 // 수신된 데이터
  c4:	8c b1       	in	r24, 0x0c	; 12
	if (rxData == '\n' || rxData =='\r') // 데이터의 마지막이 개행이나 리턴이면
  c6:	8a 30       	cpi	r24, 0x0A	; 10
  c8:	11 f0       	breq	.+4      	; 0xce <__vector_18+0x20>
  ca:	8d 30       	cpi	r24, 0x0D	; 13
  cc:	61 f4       	brne	.+24     	; 0xe6 <__vector_18+0x38>
	{
		rxBuff[rxHead] = '\0';			// 수신된 문자열 마지막에 NULL 추가
  ce:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 5f       	subi	r30, 0xFE	; 254
  d6:	fe 4f       	sbci	r31, 0xFE	; 254
  d8:	10 82       	st	Z, r1
		rxHead = 0;						//인덱스 초기화
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		rxflag = 1;						// 문자열 수신 플래그 설정
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rxflag>
  e4:	0a c0       	rjmp	.+20     	; 0xfa <__vector_18+0x4c>
	}
	
	else								// 아니면 계속 다음 문자 받음
	{
		rxBuff[rxHead] = rxData;		// 버퍼에 수신된 데이터 추가
  e6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  ea:	e9 2f       	mov	r30, r25
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	ee 5f       	subi	r30, 0xFE	; 254
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	80 83       	st	Z, r24
		rxHead++;						// 인덱스 증가
  f4:	9f 5f       	subi	r25, 0xFF	; 255
  f6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
	}
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0b be       	out	0x3b, r0	; 59
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
	DDRA = 0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	8a bb       	out	0x1a, r24	; 26
		
	UART_init();						// 초기화
 114:	11 d0       	rcall	.+34     	; 0x138 <UART_init>
	uint8_t rxData;
	//stdout = &OUTPUT;
	
	sei();
 116:	78 94       	sei
	
    while (1) 
    {
		
		if (rxflag == 1)				// 문자열 수신이 완료 되면
 118:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxflag>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	29 f4       	brne	.+10     	; 0x12a <main+0x1a>
		{
			rxflag = 0;					//	프래그 초기화
 120:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rxflag>
			
			UART_print_string(rxBuff);		
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	1c d0       	rcall	.+56     	; 0x162 <UART_print_string>
			//printf(rxBuff);			// 수신된 문자열 출력
		}
		
		if (rxflag = 'a')
 12a:	81 e6       	ldi	r24, 0x61	; 97
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rxflag>
		{
			DDRA  |= 0xff; 
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
 136:	f0 cf       	rjmp	.-32     	; 0x118 <main+0x8>

00000138 <UART_init>:
unsigned char UART_receive(void)
{
	while ( !(UCSR0A & (1<<RXC0))); 
	//안에값이 0일때 무한루프 0= UDR0에 데이터가
	//아직 다 안들어왔다는뜻			  
}
 138:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	89 b9       	out	0x09, r24	; 9
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	82 60       	ori	r24, 0x02	; 2
 144:	8b b9       	out	0x0b, r24	; 11
 146:	8a b1       	in	r24, 0x0a	; 10
 148:	80 61       	ori	r24, 0x10	; 16
 14a:	8a b9       	out	0x0a, r24	; 10
 14c:	8a b1       	in	r24, 0x0a	; 10
 14e:	88 60       	ori	r24, 0x08	; 8
 150:	8a b9       	out	0x0a, r24	; 10
 152:	8a b1       	in	r24, 0x0a	; 10
 154:	80 68       	ori	r24, 0x80	; 128
 156:	8a b9       	out	0x0a, r24	; 10
 158:	08 95       	ret

0000015a <UART_transmit>:
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <UART_transmit>
 15e:	8c b9       	out	0x0c, r24	; 12
 160:	08 95       	ret

00000162 <UART_print_string>:

void UART_print_string(char *str)
{
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	8c 01       	movw	r16, r24
	for (int i = 0 ; str [i]; i++)
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <UART_print_string+0x14>
	{	
		UART_transmit(str[i]);		//문자열로 입력할 수있도록 선언
 172:	f3 df       	rcall	.-26     	; 0x15a <UART_transmit>
	//아직 다 안들어왔다는뜻			  
}

void UART_print_string(char *str)
{
	for (int i = 0 ; str [i]; i++)
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	f8 01       	movw	r30, r16
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	80 81       	ld	r24, Z
 17e:	81 11       	cpse	r24, r1
 180:	f8 cf       	rjmp	.-16     	; 0x172 <UART_print_string+0x10>
	{	
		UART_transmit(str[i]);		//문자열로 입력할 수있도록 선언
	}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
