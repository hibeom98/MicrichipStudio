
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  000004f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9f  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a8  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d3  00000000  00000000  00001b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ff  00000000  00000000  000026a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	b4 c1       	rjmp	.+872    	; 0x37e <__vector_5>
  16:	00 00       	nop
  18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	58 c1       	rjmp	.+688    	; 0x2f2 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a0 d1       	rcall	.+832    	; 0x404 <main>
  c4:	c6 c1       	rjmp	.+908    	; 0x452 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <FND_init>:
uint16_t fndDisplayData = 0;

void FND_init()
{
	
	TCCR0 |= (1 << CS02) |(0 << CS01) |(0 << CS00); // 타이머, 카운트 동작설정, 1/64 분주비
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 6;
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	82 bf       	out	0x32, r24	; 50
	TIMSK |= (1 << TOIE0); //Timer/Counter Overflow Interrupt Enable
  d2:	87 b7       	in	r24, 0x37	; 55
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	87 bf       	out	0x37, r24	; 55
	FND_DIGIT_DDR |= (1<< FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) |( 1<< FND_DIGIT_4); // FND 디지트핀을 출력으로 설정
  d8:	e1 e6       	ldi	r30, 0x61	; 97
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8f 60       	ori	r24, 0x0F	; 15
  e0:	80 83       	st	Z, r24
	FND_DATA_DDR = 0xff;	// 데이터핀 출력 설정
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	08 95       	ret

000000e8 <FND_setFndDisplayData>:
	
}

void FND_setFndDisplayData(uint16_t data)
{
	if(data >= 10000)// 7세그먼트 디스플레이는 0~9999까지의 정수만 표시 가능
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	27 e2       	ldi	r18, 0x27	; 39
  ec:	92 07       	cpc	r25, r18
  ee:	10 f0       	brcs	.+4      	; 0xf4 <FND_setFndDisplayData+0xc>
		data = 9999;
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	97 e2       	ldi	r25, 0x27	; 39
	fndDisplayData = data;	// 데이터 저장
  f4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <fndDisplayData+0x1>
  f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <fndDisplayData>
  fc:	08 95       	ret

000000fe <FND_getFndDisplayData>:
}

uint16_t FND_getFndDisplayData()
{
	return fndDisplayData;  // 저장된 데이터 변환
}
  fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <fndDisplayData>
 102:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <fndDisplayData+0x1>
 106:	08 95       	ret

00000108 <FND_selectDigit>:

void FND_selectDigit(uint8_t digit)
{
	FND_DIGIT_PORT |= 0xf0;			// 모든 자리수 선택 핀을 HIGH로 설정하여 꺼준다
 108:	e2 e6       	ldi	r30, 0x62	; 98
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	90 6f       	ori	r25, 0xF0	; 240
 110:	90 83       	st	Z, r25
	FND_DIGIT_PORT =~( 1 << digit);	// 선택한 자릿수 선택 핀을 LOW로 설정하여 켜준다
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <FND_selectDigit+0x14>
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <FND_selectDigit+0x10>
 120:	20 95       	com	r18
 122:	20 83       	st	Z, r18
 124:	08 95       	ret

00000126 <FND_showNumber>:
}

void FND_showNumber(uint8_t fndNumber)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2a 97       	sbiw	r28, 0x0a	; 10
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
	uint8_t fndFont[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x67};
 13a:	9a e0       	ldi	r25, 0x0A	; 10
 13c:	e0 e0       	ldi	r30, 0x00	; 0
 13e:	f1 e0       	ldi	r31, 0x01	; 1
 140:	de 01       	movw	r26, r28
 142:	11 96       	adiw	r26, 0x01	; 1
 144:	01 90       	ld	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	9a 95       	dec	r25
 14a:	e1 f7       	brne	.-8      	; 0x144 <FND_showNumber+0x1e>
	FND_DATA_PORT = fndFont[fndNumber];	// 선택한 숫자에 해당하는 7세그먼트 패턴을 데이터 핀에 출력
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e8 0f       	add	r30, r24
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	85 bb       	out	0x15, r24	; 21
}
 15c:	2a 96       	adiw	r28, 0x0a	; 10
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <FND_off>:

void FND_off()
{
	FND_DIGIT_PORT |= 0xf0; // 모든 자릿수 선택 핀을 HIGH로 설정하여 껴준다.
 16e:	e2 e6       	ldi	r30, 0x62	; 98
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 6f       	ori	r24, 0xF0	; 240
 176:	80 83       	st	Z, r24
 178:	08 95       	ret

0000017a <FND_ISR_Display>:
}

void FND_ISR_Display()
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	static uint8_t fndDigitPosition = 0;	// 현재 출력중인 자리
	uint16_t displayData = FND_getFndDisplayData();
 17e:	bf df       	rcall	.-130    	; 0xfe <FND_getFndDisplayData>
 180:	ec 01       	movw	r28, r24


	fndDigitPosition  = (fndDigitPosition+1)% 4;
 182:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	83 70       	andi	r24, 0x03	; 3
 18c:	90 78       	andi	r25, 0x80	; 128
 18e:	99 23       	and	r25, r25
 190:	24 f4       	brge	.+8      	; 0x19a <FND_ISR_Display+0x20>
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	8c 6f       	ori	r24, 0xFC	; 252
 196:	9f 6f       	ori	r25, 0xFF	; 255
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	FND_off();
 19e:	e7 df       	rcall	.-50     	; 0x16e <FND_off>

switch (fndDigitPosition)
 1a0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	a9 f1       	breq	.+106    	; 0x212 <FND_ISR_Display+0x98>
 1a8:	38 f0       	brcs	.+14     	; 0x1b8 <FND_ISR_Display+0x3e>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <FND_ISR_Display+0x36>
 1ae:	58 c0       	rjmp	.+176    	; 0x260 <FND_ISR_Display+0xe6>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <FND_ISR_Display+0x3c>
 1b4:	7a c0       	rjmp	.+244    	; 0x2aa <FND_ISR_Display+0x130>
 1b6:	94 c0       	rjmp	.+296    	; 0x2e0 <FND_ISR_Display+0x166>
{
	case 0:
	FND_showNumber(displayData / 1000%10);   //1의 자리 숫자 출력
 1b8:	9e 01       	movw	r18, r28
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	36 95       	lsr	r19
 1c0:	27 95       	ror	r18
 1c2:	36 95       	lsr	r19
 1c4:	27 95       	ror	r18
 1c6:	a5 ec       	ldi	r26, 0xC5	; 197
 1c8:	b0 e2       	ldi	r27, 0x20	; 32
 1ca:	34 d1       	rcall	.+616    	; 0x434 <__umulhisi3>
 1cc:	ac 01       	movw	r20, r24
 1ce:	52 95       	swap	r21
 1d0:	42 95       	swap	r20
 1d2:	4f 70       	andi	r20, 0x0F	; 15
 1d4:	45 27       	eor	r20, r21
 1d6:	5f 70       	andi	r21, 0x0F	; 15
 1d8:	45 27       	eor	r20, r21
 1da:	9a 01       	movw	r18, r20
 1dc:	ad ec       	ldi	r26, 0xCD	; 205
 1de:	bc ec       	ldi	r27, 0xCC	; 204
 1e0:	29 d1       	rcall	.+594    	; 0x434 <__umulhisi3>
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	9c 01       	movw	r18, r24
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	82 0f       	add	r24, r18
 202:	93 1f       	adc	r25, r19
 204:	24 2f       	mov	r18, r20
 206:	28 1b       	sub	r18, r24
 208:	82 2f       	mov	r24, r18
	FND_selectDigit(FND_DIGIT_4);		// 1의 자리 디지트 선택
 20a:	8d df       	rcall	.-230    	; 0x126 <FND_showNumber>
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	7c df       	rcall	.-264    	; 0x108 <FND_selectDigit>
	break;
 210:	67 c0       	rjmp	.+206    	; 0x2e0 <FND_ISR_Display+0x166>
	case 1:
	FND_showNumber(displayData / 100 % 10); //10의 자리
 212:	9e 01       	movw	r18, r28
 214:	36 95       	lsr	r19
 216:	27 95       	ror	r18
 218:	36 95       	lsr	r19
 21a:	27 95       	ror	r18
 21c:	ab e7       	ldi	r26, 0x7B	; 123
 21e:	b4 e1       	ldi	r27, 0x14	; 20
 220:	09 d1       	rcall	.+530    	; 0x434 <__umulhisi3>
 222:	ac 01       	movw	r20, r24
 224:	56 95       	lsr	r21
 226:	47 95       	ror	r20
 228:	9a 01       	movw	r18, r20
 22a:	ad ec       	ldi	r26, 0xCD	; 205
 22c:	bc ec       	ldi	r27, 0xCC	; 204
 22e:	02 d1       	rcall	.+516    	; 0x434 <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	9c 01       	movw	r18, r24
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	24 2f       	mov	r18, r20
 254:	28 1b       	sub	r18, r24
 256:	82 2f       	mov	r24, r18
	FND_selectDigit(FND_DIGIT_3);
 258:	66 df       	rcall	.-308    	; 0x126 <FND_showNumber>
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	55 df       	rcall	.-342    	; 0x108 <FND_selectDigit>
	break;
 25e:	40 c0       	rjmp	.+128    	; 0x2e0 <FND_ISR_Display+0x166>
	case 2:
	FND_showNumber(displayData / 10%10); //100의 자리
 260:	9e 01       	movw	r18, r28
 262:	ad ec       	ldi	r26, 0xCD	; 205
 264:	bc ec       	ldi	r27, 0xCC	; 204
 266:	e6 d0       	rcall	.+460    	; 0x434 <__umulhisi3>
 268:	ac 01       	movw	r20, r24
 26a:	56 95       	lsr	r21
 26c:	47 95       	ror	r20
 26e:	56 95       	lsr	r21
 270:	47 95       	ror	r20
 272:	56 95       	lsr	r21
 274:	47 95       	ror	r20
 276:	9a 01       	movw	r18, r20
 278:	dd d0       	rcall	.+442    	; 0x434 <__umulhisi3>
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	96 95       	lsr	r25
 284:	87 95       	ror	r24
 286:	9c 01       	movw	r18, r24
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	82 0f       	add	r24, r18
 29a:	93 1f       	adc	r25, r19
 29c:	24 2f       	mov	r18, r20
 29e:	28 1b       	sub	r18, r24
 2a0:	82 2f       	mov	r24, r18
	FND_selectDigit(FND_DIGIT_2);
 2a2:	41 df       	rcall	.-382    	; 0x126 <FND_showNumber>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	30 df       	rcall	.-416    	; 0x108 <FND_selectDigit>
	break;
 2a8:	1b c0       	rjmp	.+54     	; 0x2e0 <FND_ISR_Display+0x166>
	case 3:
	FND_showNumber(displayData %10); //1000의 자리
 2aa:	9e 01       	movw	r18, r28
 2ac:	ad ec       	ldi	r26, 0xCD	; 205
 2ae:	bc ec       	ldi	r27, 0xCC	; 204
 2b0:	c1 d0       	rcall	.+386    	; 0x434 <__umulhisi3>
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	96 95       	lsr	r25
 2bc:	87 95       	ror	r24
 2be:	9c 01       	movw	r18, r24
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	82 0f       	add	r24, r18
 2d2:	93 1f       	adc	r25, r19
 2d4:	2c 2f       	mov	r18, r28
 2d6:	28 1b       	sub	r18, r24
 2d8:	82 2f       	mov	r24, r18
 2da:	25 df       	rcall	.-438    	; 0x126 <FND_showNumber>
	FND_selectDigit(FND_DIGIT_1);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	14 df       	rcall	.-472    	; 0x108 <FND_selectDigit>
 2e0:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	99 e0       	ldi	r25, 0x09	; 9
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <FND_ISR_Display+0x16a>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <FND_ISR_Display+0x170>
 2ea:	00 00       	nop
 2ec:	df 91       	pop	r29
	break;
	
}
	_delay_ms(10);
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <__vector_16>:
volatile int cnt;
uint8_t stop;


ISR(TIMER0_OVF_vect) // Interrut Service Routine, 현재의 cs값에서 1.024ms 간격으로 실행
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	0b b6       	in	r0, 0x3b	; 59
 2fe:	0f 92       	push	r0
 300:	2f 93       	push	r18
 302:	3f 93       	push	r19
 304:	4f 93       	push	r20
 306:	5f 93       	push	r21
 308:	6f 93       	push	r22
 30a:	7f 93       	push	r23
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	af 93       	push	r26
 312:	bf 93       	push	r27
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	
	cnt++;
 318:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 31c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt+0x1>
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <cnt+0x1>
 326:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt>
	if (cnt==100)
 32a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 32e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <cnt+0x1>
 332:	84 36       	cpi	r24, 0x64	; 100
 334:	91 05       	cpc	r25, r1
 336:	81 f4       	brne	.+32     	; 0x358 <__vector_16+0x66>
	{
		FND_setFndDisplayData(counter++);	// FND에 표시할 함수
 338:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <counter>
 33c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <counter+0x1>
 340:	9c 01       	movw	r18, r24
 342:	2f 5f       	subi	r18, 0xFF	; 255
 344:	3f 4f       	sbci	r19, 0xFF	; 255
 346:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <counter+0x1>
 34a:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <counter>
 34e:	cc de       	rcall	.-616    	; 0xe8 <FND_setFndDisplayData>
		cnt = 0;
 350:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt+0x1>
 354:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
	}
	
	
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0b be       	out	0x3b, r0	; 59
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_5>:

ISR(INT4_vect) // 외부 인터럽트	INT4(PORTE 4번)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	8f 93       	push	r24
	stop= ~stop;
 38a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <stop>
 38e:	80 95       	com	r24
 390:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <stop>

}
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_6>:

ISR(INT5_vect) // 외부 인터럽트	INT5(PORTE 5번)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	0b b6       	in	r0, 0x3b	; 59
 3ac:	0f 92       	push	r0
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	counter = 0;
 3c6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter+0x1>
 3ca:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <counter>
	FND_setFndDisplayData(0);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	8a de       	rcall	.-748    	; 0xe8 <FND_setFndDisplayData>
		stop= ~stop;
 3d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <stop>
 3d8:	80 95       	com	r24
 3da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <stop>
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0b be       	out	0x3b, r0	; 59
 3fa:	0f 90       	pop	r0
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	0f 90       	pop	r0
 400:	1f 90       	pop	r1
 402:	18 95       	reti

00000404 <main>:


int main(void)
{
	 // INT4 Falling Edge일 때 인터럽트 요구 1,0일 때
	 EICRB |= (1 << ISC41) | (0 << ISC40);
 404:	8a b7       	in	r24, 0x3a	; 58
 406:	82 60       	ori	r24, 0x02	; 2
 408:	8a bf       	out	0x3a, r24	; 58
	 
	 // INT5 Falling edge 인터럽트 1 ,0 일때
	 EICRB |= (1 << ISC51) | (0 << ISC50);
 40a:	8a b7       	in	r24, 0x3a	; 58
 40c:	88 60       	ori	r24, 0x08	; 8
 40e:	8a bf       	out	0x3a, r24	; 58
	 
	 // INT4, INT5 외부인터럽트 활성화 1로 셋팅
	 EIMSK |= (1 << INT5) | (1 << INT4);
 410:	89 b7       	in	r24, 0x39	; 57
 412:	80 63       	ori	r24, 0x30	; 48
 414:	89 bf       	out	0x39, r24	; 57
	 
	 //// 버튼 입력 설정
	 //DDRE &= ~(1 << DDRE4) | ~(1 << DDRE5);		
	
		
	FND_init();
 416:	58 de       	rcall	.-848    	; 0xc8 <FND_init>
	
	sei();						// 글로벌 인터럽트 인에이블 // 디스에이블 cli()
 418:	78 94       	sei
	
	
    while (1) 
    {
		
		if(stop)
 41a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <stop>
 41e:	88 23       	and	r24, r24
 420:	21 f0       	breq	.+8      	; 0x42a <main+0x26>
		{
			TCCR0 &= ~((1 << CS02) |(1 << CS01) |(1 << CS00));
 422:	83 b7       	in	r24, 0x33	; 51
 424:	88 7f       	andi	r24, 0xF8	; 248
 426:	83 bf       	out	0x33, r24	; 51
 428:	03 c0       	rjmp	.+6      	; 0x430 <main+0x2c>
		}
		else
		{
			TCCR0 |= (1 << CS02) |(0 << CS01) |(0 << CS00);
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	84 60       	ori	r24, 0x04	; 4
		}
		
		
		FND_ISR_Display();		// 타이머 인터럽트 발생 시 FND 를 표시하는 함수
 42e:	83 bf       	out	0x33, r24	; 51
 430:	a4 de       	rcall	.-696    	; 0x17a <FND_ISR_Display>
    }
 432:	f3 cf       	rjmp	.-26     	; 0x41a <main+0x16>

00000434 <__umulhisi3>:
 434:	a2 9f       	mul	r26, r18
 436:	b0 01       	movw	r22, r0
 438:	b3 9f       	mul	r27, r19
 43a:	c0 01       	movw	r24, r0
 43c:	a3 9f       	mul	r26, r19
 43e:	70 0d       	add	r23, r0
 440:	81 1d       	adc	r24, r1
 442:	11 24       	eor	r1, r1
 444:	91 1d       	adc	r25, r1
 446:	b2 9f       	mul	r27, r18
 448:	70 0d       	add	r23, r0
 44a:	81 1d       	adc	r24, r1
 44c:	11 24       	eor	r1, r1
 44e:	91 1d       	adc	r25, r1
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
