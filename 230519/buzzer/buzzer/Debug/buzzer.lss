
buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000998  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bf  00000000  00000000  00000c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  00001503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000434  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	35 d0       	rcall	.+106    	; 0x11e <main>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <music_init>:

const int melody[]={C4, D4, E4,F4,G4,A4,B4,C5, PAUSE, PRESCALER};

void music_init()
{
	DDRB |= (1<<PORTB6);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	87 bb       	out	0x17, r24	; 23
	
	TCCR1A |= (1<<COM1B0);				// 비교일치 발생시 출력 반전
  be:	8f b5       	in	r24, 0x2f	; 47
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS11);
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	8a 60       	ori	r24, 0x0A	; 10
  c8:	8e bd       	out	0x2e, r24	; 46
  ca:	08 95       	ret

000000cc <music_play>:
}

void music_play(const int *pMusic)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	int num;
	
	while (*pMusic)
  d2:	1b c0       	rjmp	.+54     	; 0x10a <music_play+0x3e>
	{
		num = *pMusic;
		*pMusic++;
  d4:	22 96       	adiw	r28, 0x02	; 2
		
		if (num == PAUSE)
  d6:	21 15       	cp	r18, r1
  d8:	31 05       	cpc	r19, r1
  da:	19 f4       	brne	.+6      	; 0xe2 <music_play+0x16>
		{
			OCR1A = 0; // 재생중지, 듀티사이클 0%
  dc:	1b bc       	out	0x2b, r1	; 43
  de:	1a bc       	out	0x2a, r1	; 42
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <music_play+0x2c>
		}
		else
		{
			// 주파수 계산
			int ocr_value = F_CPU / 2 / PRESCALER / num;
  e2:	03 2e       	mov	r0, r19
  e4:	00 0c       	add	r0, r0
  e6:	44 0b       	sbc	r20, r20
  e8:	55 0b       	sbc	r21, r21
  ea:	60 e4       	ldi	r22, 0x40	; 64
  ec:	72 e4       	ldi	r23, 0x42	; 66
  ee:	8f e0       	ldi	r24, 0x0F	; 15
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	23 d0       	rcall	.+70     	; 0x13a <__udivmodsi4>
			
			// 주파수 설정
			OCR1A = ocr_value;
  f4:	3b bd       	out	0x2b, r19	; 43
  f6:	2a bd       	out	0x2a, r18	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	89 e6       	ldi	r24, 0x69	; 105
  fc:	98 e1       	ldi	r25, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <music_play+0x32>
 106:	00 c0       	rjmp	.+0      	; 0x108 <music_play+0x3c>
 108:	00 00       	nop

void music_play(const int *pMusic)
{
	int num;
	
	while (*pMusic)
 10a:	28 81       	ld	r18, Y
 10c:	39 81       	ldd	r19, Y+1	; 0x01
 10e:	21 15       	cp	r18, r1
 110:	31 05       	cpc	r19, r1
 112:	01 f7       	brne	.-64     	; 0xd4 <music_play+0x8>
			// 주파수 설정
			OCR1A = ocr_value;
		}
		_delay_ms(500);
	}
	OCR1A = 0;
 114:	1b bc       	out	0x2b, r1	; 43
 116:	1a bc       	out	0x2a, r1	; 42
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
	music_init();
 11e:	cc df       	rcall	.-104    	; 0xb8 <music_init>
	while (1)
	{
		music_play(melody);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	d3 df       	rcall	.-90     	; 0xcc <music_play>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xe>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x18>
 136:	00 00       	nop
 138:	f3 cf       	rjmp	.-26     	; 0x120 <main+0x2>

0000013a <__udivmodsi4>:
 13a:	a1 e2       	ldi	r26, 0x21	; 33
 13c:	1a 2e       	mov	r1, r26
 13e:	aa 1b       	sub	r26, r26
 140:	bb 1b       	sub	r27, r27
 142:	fd 01       	movw	r30, r26
 144:	0d c0       	rjmp	.+26     	; 0x160 <__udivmodsi4_ep>

00000146 <__udivmodsi4_loop>:
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	ee 1f       	adc	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	a2 17       	cp	r26, r18
 150:	b3 07       	cpc	r27, r19
 152:	e4 07       	cpc	r30, r20
 154:	f5 07       	cpc	r31, r21
 156:	20 f0       	brcs	.+8      	; 0x160 <__udivmodsi4_ep>
 158:	a2 1b       	sub	r26, r18
 15a:	b3 0b       	sbc	r27, r19
 15c:	e4 0b       	sbc	r30, r20
 15e:	f5 0b       	sbc	r31, r21

00000160 <__udivmodsi4_ep>:
 160:	66 1f       	adc	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	1a 94       	dec	r1
 16a:	69 f7       	brne	.-38     	; 0x146 <__udivmodsi4_loop>
 16c:	60 95       	com	r22
 16e:	70 95       	com	r23
 170:	80 95       	com	r24
 172:	90 95       	com	r25
 174:	9b 01       	movw	r18, r22
 176:	ac 01       	movw	r20, r24
 178:	bd 01       	movw	r22, r26
 17a:	cf 01       	movw	r24, r30
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
