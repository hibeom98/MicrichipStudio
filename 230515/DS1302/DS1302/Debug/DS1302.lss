
DS1302.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000936  000009ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800132  00800132  000009fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001138  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b62  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000790  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00002fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000452  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 33       	cpi	r26, 0x38	; 56
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d1       	rcall	.+542    	; 0x2e2 <main>
  c4:	36 c4       	rjmp	.+2156   	; 0x932 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <DS1302_Init>:

void DS1302_Init()
{
	/* 클럭핀, 데이터 핀 출력으로 설정
	    리셋핀 LOW 로 설정          */
	DS1302_CLK_DDR  |= (1<<DS1302_CLK);
  c8:	e1 e6       	ldi	r30, 0x61	; 97
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 61       	ori	r24, 0x10	; 16
  d0:	80 83       	st	Z, r24
	DS1302_DATA_DDR |= (1<<DS1302_DAT);
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	80 83       	st	Z, r24
	DS1302_RST_DDR  |= (1<<DS1302_RST);
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	
	DS1302_CLK_PORT  &= ~(1<<DS1302_CLK);	// 클락을 초기값 LOW
  de:	e2 e6       	ldi	r30, 0x62	; 98
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	80 83       	st	Z, r24
	DS1302_DATA_PORT |=  (1<<DS1302_DAT);
  e8:	80 81       	ld	r24, Z
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	80 83       	st	Z, r24
	DS1302_RST_PORT  &= ~(1<<DS1302_RST);	// 리셋의 초기값 LOW
  ee:	80 81       	ld	r24, Z
  f0:	8f 7b       	andi	r24, 0xBF	; 191
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <DS1302_Selected>:
	
}

void DS1302_Selected()
{
	DS1302_RST_PORT |= (1<<DS1302_RST);     // 리셋핀을 HIGH로 설정 (읽거나 쓰거나 둘 중 하나를 하기 위한 준비과정)
  f6:	e2 e6       	ldi	r30, 0x62	; 98
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	80 83       	st	Z, r24
 100:	08 95       	ret

00000102 <DS1302_Deselected>:
}

void DS1302_Deselected()
{
	DS1302_RST_PORT  &= ~(1<<DS1302_RST);	// 리셋의 초기값 LOW
 102:	e2 e6       	ldi	r30, 0x62	; 98
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <DS1302_Clock>:
}

void DS1302_Clock()
{
	DS1302_CLK_PORT |= (1<<DS1302_CLK);		// 클럭핀 HIGH
 10e:	e2 e6       	ldi	r30, 0x62	; 98
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 61       	ori	r24, 0x10	; 16
 116:	80 83       	st	Z, r24
	DS1302_CLK_PORT &= ~(1<<DS1302_CLK);	// 클럭핀 LOW
 118:	80 81       	ld	r24, Z
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <DS1302_DatabitSet>:
}

void DS1302_DatabitSet()
{
	DS1302_DATA_PORT |= (1<<DS1302_DAT);	// 데이터핀을 HIGH
 120:	e2 e6       	ldi	r30, 0x62	; 98
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <DS1302_DataBitReset>:
}

void DS1302_DataBitReset()
{
	DS1302_DATA_PORT &= ~(1<<DS1302_DAT);
 12c:	e2 e6       	ldi	r30, 0x62	; 98
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	8f 7d       	andi	r24, 0xDF	; 223
 134:	80 83       	st	Z, r24
 136:	08 95       	ret

00000138 <DS1302_Change_Readmode>:
}

void DS1302_Change_Readmode()
{
	DS1302_DATA_DDR &= ~(1<<DS1302_DAT);
 138:	e1 e6       	ldi	r30, 0x61	; 97
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	80 83       	st	Z, r24
 142:	08 95       	ret

00000144 <DS1302_Change_WriteMode>:
}

void DS1302_Change_WriteMode()
{
	DS1302_DATA_DDR |=  (1<<DS1302_DAT);	// 쓰기모드에서 데이터 핀 출력 설정 변경
 144:	e1 e6       	ldi	r30, 0x61	; 97
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	80 83       	st	Z, r24
 14e:	08 95       	ret

00000150 <decimal_to_bcd>:
uint8_t decimal_to_bcd(uint8_t decimal)	// 10진 TO BCD
{
	// 변수값이 5 < -- 상위 4비트 자지로  9<-- 하위 4비트에
	// 4비트씩 묶어서 1의자리, 10의자리 저장 리턴
	
	return ((decimal/10)<<4 | (decimal%10));
 150:	9d ec       	ldi	r25, 0xCD	; 205
 152:	89 9f       	mul	r24, r25
 154:	91 2d       	mov	r25, r1
 156:	11 24       	eor	r1, r1
 158:	96 95       	lsr	r25
 15a:	96 95       	lsr	r25
 15c:	96 95       	lsr	r25
 15e:	20 e1       	ldi	r18, 0x10	; 16
 160:	92 9f       	mul	r25, r18
 162:	a0 01       	movw	r20, r0
 164:	11 24       	eor	r1, r1
 166:	99 0f       	add	r25, r25
 168:	29 2f       	mov	r18, r25
 16a:	22 0f       	add	r18, r18
 16c:	22 0f       	add	r18, r18
 16e:	92 0f       	add	r25, r18
 170:	89 1b       	sub	r24, r25
}
 172:	84 2b       	or	r24, r20
 174:	08 95       	ret

00000176 <bcd_to_decimal>:

uint8_t bcd_to_decimal(uint8_t bcd)
{
	return (((bcd>>4)*10) + (bcd&0x0f));
 176:	98 2f       	mov	r25, r24
 178:	92 95       	swap	r25
 17a:	9f 70       	andi	r25, 0x0F	; 15
 17c:	99 0f       	add	r25, r25
 17e:	29 2f       	mov	r18, r25
 180:	22 0f       	add	r18, r18
 182:	22 0f       	add	r18, r18
 184:	92 0f       	add	r25, r18
 186:	8f 70       	andi	r24, 0x0F	; 15
}
 188:	89 0f       	add	r24, r25
 18a:	08 95       	ret

0000018c <DS1302_TxData>:

void DS1302_TxData(uint8_t txData)	// RTC에 데이터 전송
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
	// 데이터를 하위비트에서 상위비트 순서로 전송
	// 클럭신호를 발생시켜 데이터를 전송
	DS1302_Change_WriteMode();
 194:	d7 df       	rcall	.-82     	; 0x144 <DS1302_Change_WriteMode>
	for (int i = 0; i < 8; i++)
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <DS1302_TxData+0x2e>
	{
		// 하위비트부터 상위비트로
		// 1비트 출력하고 클록 올렸다 내린다
		if (txData & (1<<i))
 19c:	81 2f       	mov	r24, r17
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0c 2e       	mov	r0, r28
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DS1302_TxData+0x1c>
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DS1302_TxData+0x18>
 1ac:	80 ff       	sbrs	r24, 0
		{
			DS1302_DatabitSet();	// 1이면 실행
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DS1302_TxData+0x28>
 1b0:	b7 df       	rcall	.-146    	; 0x120 <DS1302_DatabitSet>
		}
		else
		{
			DS1302_DataBitReset();	// 0이면 실행
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <DS1302_TxData+0x2a>
 1b4:	bb df       	rcall	.-138    	; 0x12c <DS1302_DataBitReset>
		}
		
		// 클럭 올렸다 내린다
		DS1302_Clock();
 1b6:	ab df       	rcall	.-170    	; 0x10e <DS1302_Clock>
 1b8:	21 96       	adiw	r28, 0x01	; 1
void DS1302_TxData(uint8_t txData)	// RTC에 데이터 전송
{
	// 데이터를 하위비트에서 상위비트 순서로 전송
	// 클럭신호를 발생시켜 데이터를 전송
	DS1302_Change_WriteMode();
	for (int i = 0; i < 8; i++)
 1ba:	c8 30       	cpi	r28, 0x08	; 8
 1bc:	d1 05       	cpc	r29, r1
 1be:	74 f3       	brlt	.-36     	; 0x19c <DS1302_TxData+0x10>
 1c0:	df 91       	pop	r29
		
		// 클럭 올렸다 내린다
		DS1302_Clock();
		
	}
}
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	08 95       	ret

000001c8 <DS1302_WiteData>:
 1c8:	cf 93       	push	r28


void DS1302_WiteData(uint8_t address, uint8_t data)
{
 1ca:	df 93       	push	r29
 1cc:	d8 2f       	mov	r29, r24
 1ce:	c6 2f       	mov	r28, r22
	// 주소와 데이터를 전송하고
	// RST 핀을 LOW로 설정
	
	//RST핀을 HIGH로 설정
	DS1302_Selected();
 1d0:	92 df       	rcall	.-220    	; 0xf6 <DS1302_Selected>
	
	// 주소 전송하고
	DS1302_TxData(address);
 1d2:	8d 2f       	mov	r24, r29
 1d4:	db df       	rcall	.-74     	; 0x18c <DS1302_TxData>
	
	// 데이터값 전송
	DS1302_TxData(decimal_to_bcd(data));
 1d6:	8c 2f       	mov	r24, r28
 1d8:	bb df       	rcall	.-138    	; 0x150 <decimal_to_bcd>
 1da:	d8 df       	rcall	.-80     	; 0x18c <DS1302_TxData>
	
	// ce(rst) LOW
	DS1302_Deselected();
 1dc:	92 df       	rcall	.-220    	; 0x102 <DS1302_Deselected>
 1de:	df 91       	pop	r29
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <DS1302_SetTimeData>:
 1e4:	cf 93       	push	r28

void DS1302_SetTimeData(DS1302 timedata)
{
 1e6:	df 93       	push	r29
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	27 97       	sbiw	r28, 0x07	; 7
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	3a 83       	std	Y+2, r19	; 0x02
 1fa:	4b 83       	std	Y+3, r20	; 0x03
 1fc:	5c 83       	std	Y+4, r21	; 0x04
 1fe:	6d 83       	std	Y+5, r22	; 0x05
 200:	7e 83       	std	Y+6, r23	; 0x06
 202:	8f 83       	std	Y+7, r24	; 0x07
	DS1302_WiteData(ADDR_SEC, timedata.sec);
 204:	62 2f       	mov	r22, r18
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	df df       	rcall	.-66     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_MIN, timedata.min);
 20a:	6a 81       	ldd	r22, Y+2	; 0x02
 20c:	82 e8       	ldi	r24, 0x82	; 130
 20e:	dc df       	rcall	.-72     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_HOUR, timedata.hour);
 210:	6b 81       	ldd	r22, Y+3	; 0x03
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	d9 df       	rcall	.-78     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_DATE, timedata.date);
 216:	6c 81       	ldd	r22, Y+4	; 0x04
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	d6 df       	rcall	.-84     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_MONTH, timedata.month);
 21c:	6d 81       	ldd	r22, Y+5	; 0x05
 21e:	88 e8       	ldi	r24, 0x88	; 136
 220:	d3 df       	rcall	.-90     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_DAYOWEEK, timedata.dayOfweek);
 222:	6e 81       	ldd	r22, Y+6	; 0x06
 224:	8a e8       	ldi	r24, 0x8A	; 138
 226:	d0 df       	rcall	.-96     	; 0x1c8 <DS1302_WiteData>
	DS1302_WiteData(ADDR_YEAR ,timedata.year);
 228:	6f 81       	ldd	r22, Y+7	; 0x07
 22a:	8c e8       	ldi	r24, 0x8C	; 140
 22c:	cd df       	rcall	.-102    	; 0x1c8 <DS1302_WiteData>
 22e:	27 96       	adiw	r28, 0x07	; 7
}
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <DS1302_RxData>:
 240:	1f 93       	push	r17

uint8_t DS1302_RxData()
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	/* 데이터를 하위비트부터 상위비트순으로 읽고
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
	DS1302_Change_Readmode();
 246:	78 df       	rcall	.-272    	; 0x138 <DS1302_Change_Readmode>
	for (int i = 0; i < 8; i++)
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
	
	/* 데이터를 하위비트부터 상위비트순으로 읽고
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
 24c:	10 e0       	ldi	r17, 0x00	; 0
	DS1302_Change_Readmode();
	for (int i = 0; i < 8; i++)
 24e:	13 c0       	rjmp	.+38     	; 0x276 <DS1302_RxData+0x36>
		//if(DS1302_DATA_PIN & (1 << DS1302_DAT))
			//rxData |= 1<<i;
		//else
			//rxData &= ~(1<<i);
			
			rxData |= (DS1302_DATA_PIN & (1 << DS1302_DAT)) ? (1<<i) : 0; // 삼항연산자
 250:	05 9b       	sbis	0x00, 5	; 0
 252:	09 c0       	rjmp	.+18     	; 0x266 <DS1302_RxData+0x26>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0c 2e       	mov	r0, r28
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DS1302_RxData+0x20>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DS1302_RxData+0x1c>
 264:	02 c0       	rjmp	.+4      	; 0x26a <DS1302_RxData+0x2a>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	18 2b       	or	r17, r24
			if( i != 7 ) DS1302_Clock(); // read일때 홀링엣지가 7개임
 26c:	c7 30       	cpi	r28, 0x07	; 7
 26e:	d1 05       	cpc	r29, r1
 270:	09 f0       	breq	.+2      	; 0x274 <DS1302_RxData+0x34>
 272:	4d df       	rcall	.-358    	; 0x10e <DS1302_Clock>
	 * 클럭 신호를 발생시켜서 일는다
	 */
	
	uint8_t rxData = 0;
	DS1302_Change_Readmode();
	for (int i = 0; i < 8; i++)
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	c8 30       	cpi	r28, 0x08	; 8
 278:	d1 05       	cpc	r29, r1
 27a:	54 f3       	brlt	.-44     	; 0x250 <DS1302_RxData+0x10>
			rxData |= (DS1302_DATA_PIN & (1 << DS1302_DAT)) ? (1<<i) : 0; // 삼항연산자
			if( i != 7 ) DS1302_Clock(); // read일때 홀링엣지가 7개임
	}
	
	return rxData;
}
 27c:	81 2f       	mov	r24, r17
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	08 95       	ret

00000286 <DS1302_ReadData>:

uint8_t DS1302_ReadData(uint8_t address)
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
	// 특정 주소에서 데이터 읽음
	uint8_t rxData = 0;	// 저장 변수
	DS1302_Selected();	// ds1302 선택
 28a:	35 df       	rcall	.-406    	; 0xf6 <DS1302_Selected>
	DS1302_TxData(address+1);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	8c 0f       	add	r24, r28
	rxData =DS1302_RxData();
 290:	7d df       	rcall	.-262    	; 0x18c <DS1302_TxData>
 292:	d6 df       	rcall	.-84     	; 0x240 <DS1302_RxData>
	DS1302_Deselected();			// 선택 해제
 294:	c8 2f       	mov	r28, r24
 296:	35 df       	rcall	.-406    	; 0x102 <DS1302_Deselected>
	return bcd_to_decimal(rxData); // BCD코드를 10진으로 변환
 298:	8c 2f       	mov	r24, r28
 29a:	6d df       	rcall	.-294    	; 0x176 <bcd_to_decimal>
 29c:	cf 91       	pop	r28
}
 29e:	08 95       	ret

000002a0 <DS1302_GetTime>:
 2a0:	cf 93       	push	r28


void DS1302_GetTime(DS1302 *timedata)
{
 2a2:	df 93       	push	r29
 2a4:	ec 01       	movw	r28, r24
	timedata->sec = DS1302_ReadData(ADDR_SEC);
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	ee df       	rcall	.-36     	; 0x286 <DS1302_ReadData>
 2aa:	88 83       	st	Y, r24
	timedata->min = DS1302_ReadData(ADDR_MIN);
 2ac:	82 e8       	ldi	r24, 0x82	; 130
 2ae:	eb df       	rcall	.-42     	; 0x286 <DS1302_ReadData>
 2b0:	89 83       	std	Y+1, r24	; 0x01
	timedata->hour = DS1302_ReadData(ADDR_HOUR);
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	e8 df       	rcall	.-48     	; 0x286 <DS1302_ReadData>
 2b6:	8a 83       	std	Y+2, r24	; 0x02
 2b8:	df 91       	pop	r29
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <DS1302_GetData>:
 2be:	cf 93       	push	r28

void DS1302_GetData(DS1302 *timedata)
{
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
	timedata->date = DS1302_ReadData(ADDR_DATE);
 2c4:	86 e8       	ldi	r24, 0x86	; 134
 2c6:	df df       	rcall	.-66     	; 0x286 <DS1302_ReadData>
 2c8:	8b 83       	std	Y+3, r24	; 0x03
	timedata->month = DS1302_ReadData(ADDR_MONTH);
 2ca:	88 e8       	ldi	r24, 0x88	; 136
 2cc:	dc df       	rcall	.-72     	; 0x286 <DS1302_ReadData>
 2ce:	8c 83       	std	Y+4, r24	; 0x04
	timedata->dayOfweek = DS1302_ReadData(ADDR_DAYOWEEK);
 2d0:	8a e8       	ldi	r24, 0x8A	; 138
 2d2:	d9 df       	rcall	.-78     	; 0x286 <DS1302_ReadData>
 2d4:	8d 83       	std	Y+5, r24	; 0x05
	timedata->year = DS1302_ReadData(ADDR_YEAR);
 2d6:	8c e8       	ldi	r24, 0x8C	; 140
 2d8:	d6 df       	rcall	.-84     	; 0x286 <DS1302_ReadData>
 2da:	8e 83       	std	Y+6, r24	; 0x06
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <main>:
 2e2:	cf 93       	push	r28
#include "UART.h"

FILE OUTPUT =FDEV_SETUP_STREAM(UART_transmit, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
 2e4:	df 93       	push	r29
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	27 97       	sbiw	r28, 0x07	; 7
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
	/*
	ds1302 RTC 를 이용하여 시계와 날짜 표시
	*/
   	// uart 초기화
	UART_init();
 2f6:	48 d0       	rcall	.+144    	; 0x388 <UART_init>
	stdout = &OUTPUT; // 출력 스트림 지정
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x3>
 300:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end+0x2>
	
	// DS1302 초기화
	DS1302_Init();
 304:	e1 de       	rcall	.-574    	; 0xc8 <DS1302_Init>
	
	// RTC에 시간과 날짜를 설정
	DS1302 myTime;	// 구조체 변수 생성
	myTime.year = 23;
 306:	87 e1       	ldi	r24, 0x17	; 23
 308:	8f 83       	std	Y+7, r24	; 0x07
	myTime.month = 5;
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	8d 83       	std	Y+5, r24	; 0x05
	myTime.date = 15;
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	8c 83       	std	Y+4, r24	; 0x04
	myTime.dayOfweek = 1;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	8e 83       	std	Y+6, r24	; 0x06
	myTime.hour = 12;
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	8b 83       	std	Y+3, r24	; 0x03
	myTime.min = 45;
 31a:	8d e2       	ldi	r24, 0x2D	; 45
 31c:	8a 83       	std	Y+2, r24	; 0x02
	myTime.sec = 0;
 31e:	19 82       	std	Y+1, r1	; 0x01
	
	DS1302_SetTimeData(myTime);
 320:	20 e0       	ldi	r18, 0x00	; 0
 322:	3d e2       	ldi	r19, 0x2D	; 45
 324:	4c e0       	ldi	r20, 0x0C	; 12
 326:	5f e0       	ldi	r21, 0x0F	; 15
 328:	65 e0       	ldi	r22, 0x05	; 5
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	87 e1       	ldi	r24, 0x17	; 23
 32e:	5a df       	rcall	.-332    	; 0x1e4 <DS1302_SetTimeData>

    
    while (1) 
    {
		DS1302_GetTime(&myTime);
 330:	ce 01       	movw	r24, r28
 332:	01 96       	adiw	r24, 0x01	; 1
 334:	b5 df       	rcall	.-150    	; 0x2a0 <DS1302_GetTime>
		DS1302_GetData(&myTime);
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	c1 df       	rcall	.-126    	; 0x2be <DS1302_GetData>
 33c:	59 81       	ldd	r21, Y+1	; 0x01
		
		printf("20%02d. %02d. %02d. %02d:%02d:%02d\n",
		 myTime.year, myTime.month, myTime.date,
		 myTime.hour, myTime.min, myTime.sec);
 33e:	4a 81       	ldd	r20, Y+2	; 0x02
 340:	3b 81       	ldd	r19, Y+3	; 0x03
 342:	2c 81       	ldd	r18, Y+4	; 0x04
    {
		DS1302_GetTime(&myTime);
		DS1302_GetData(&myTime);
		
		printf("20%02d. %02d. %02d. %02d:%02d:%02d\n",
		 myTime.year, myTime.month, myTime.date,
 344:	9d 81       	ldd	r25, Y+5	; 0x05
 346:	8f 81       	ldd	r24, Y+7	; 0x07
 348:	1f 92       	push	r1
    while (1) 
    {
		DS1302_GetTime(&myTime);
		DS1302_GetData(&myTime);
		
		printf("20%02d. %02d. %02d. %02d:%02d:%02d\n",
 34a:	5f 93       	push	r21
 34c:	1f 92       	push	r1
 34e:	4f 93       	push	r20
 350:	1f 92       	push	r1
 352:	3f 93       	push	r19
 354:	1f 92       	push	r1
 356:	2f 93       	push	r18
 358:	1f 92       	push	r1
 35a:	9f 93       	push	r25
 35c:	1f 92       	push	r1
 35e:	8f 93       	push	r24
 360:	8e e0       	ldi	r24, 0x0E	; 14
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	9f 93       	push	r25
 366:	8f 93       	push	r24
 368:	24 d0       	rcall	.+72     	; 0x3b2 <printf>
 36a:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 36c:	83 ed       	ldi	r24, 0xD3	; 211
 36e:	90 e3       	ldi	r25, 0x30	; 48
 370:	21 50       	subi	r18, 0x01	; 1
 372:	80 40       	sbci	r24, 0x00	; 0
 374:	90 40       	sbci	r25, 0x00	; 0
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x8e>
 378:	00 c0       	rjmp	.+0      	; 0x37a <main+0x98>
 37a:	00 00       	nop
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
 386:	d4 cf       	rjmp	.-88     	; 0x330 <main+0x4e>

00000388 <UART_init>:
﻿# include "UART.h"

void UART_init(void)
{
	UBRR0H = 0x00;
 388:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xCF;					 //207;
 38c:	8f ec       	ldi	r24, 0xCF	; 207
 38e:	89 b9       	out	0x09, r24	; 9

	UCSR0A |= (1<<U2X0);			 //비동기, 8비트, 패리티없음, 1비트 정지 (stop 비트는 1비트로 보내준다.), 시리얼 통신의 상태를 확인하고 통신 과정을 제어하기 위한 레지스터 중 하나,
 390:	8b b1       	in	r24, 0x0b	; 11
 392:	82 60       	ori	r24, 0x02	; 2
 394:	8b b9       	out	0x0b, r24	; 11
									 // 2배속 모드 설정

									 //UCSR0C |= 0x06;
	UCSR0B |= (1<<RXEN0);			 //RX Complete Interrupt Enable
 396:	8a b1       	in	r24, 0x0a	; 10
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0);			 //TX Complete Interrupt Enable
 39c:	8a b1       	in	r24, 0x0a	; 10
 39e:	88 60       	ori	r24, 0x08	; 8
 3a0:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B |= (1 << RXCIE0);
 3a2:	8a b1       	in	r24, 0x0a	; 10
 3a4:	80 68       	ori	r24, 0x80	; 128
 3a6:	8a b9       	out	0x0a, r24	; 10
 3a8:	08 95       	ret

000003aa <UART_transmit>:
}

void UART_transmit(char data)
{
	while ( !(UCSR0A & (1<<UDRE0))); //WHILE문 안의 (UCSR0A &(1<<UDRE0)이 0이면 무한루프,
 3aa:	5d 9b       	sbis	0x0b, 5	; 11
 3ac:	fe cf       	rjmp	.-4      	; 0x3aa <UART_transmit>
									 // 안비어있으면 무한루트이다가 비어있으면 나가서 UDR0=data
									 
	UDR0 = data;					 // UDR0에 데이터가 들어가면 바로 출력
 3ae:	8c b9       	out	0x0c, r24	; 12
 3b0:	08 95       	ret

000003b2 <printf>:
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	cd b7       	in	r28, 0x3d	; 61
 3b8:	de b7       	in	r29, 0x3e	; 62
 3ba:	ae 01       	movw	r20, r28
 3bc:	4b 5f       	subi	r20, 0xFB	; 251
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	fa 01       	movw	r30, r20
 3c2:	61 91       	ld	r22, Z+
 3c4:	71 91       	ld	r23, Z+
 3c6:	af 01       	movw	r20, r30
 3c8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end+0x2>
 3cc:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x3>
 3d0:	03 d0       	rcall	.+6      	; 0x3d8 <vfprintf>
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <vfprintf>:
 3d8:	2f 92       	push	r2
 3da:	3f 92       	push	r3
 3dc:	4f 92       	push	r4
 3de:	5f 92       	push	r5
 3e0:	6f 92       	push	r6
 3e2:	7f 92       	push	r7
 3e4:	8f 92       	push	r8
 3e6:	9f 92       	push	r9
 3e8:	af 92       	push	r10
 3ea:	bf 92       	push	r11
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	2b 97       	sbiw	r28, 0x0b	; 11
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	6c 01       	movw	r12, r24
 40e:	7b 01       	movw	r14, r22
 410:	8a 01       	movw	r16, r20
 412:	fc 01       	movw	r30, r24
 414:	17 82       	std	Z+7, r1	; 0x07
 416:	16 82       	std	Z+6, r1	; 0x06
 418:	83 81       	ldd	r24, Z+3	; 0x03
 41a:	81 ff       	sbrs	r24, 1
 41c:	bf c1       	rjmp	.+894    	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
 41e:	ce 01       	movw	r24, r28
 420:	01 96       	adiw	r24, 0x01	; 1
 422:	3c 01       	movw	r6, r24
 424:	f6 01       	movw	r30, r12
 426:	93 81       	ldd	r25, Z+3	; 0x03
 428:	f7 01       	movw	r30, r14
 42a:	93 fd       	sbrc	r25, 3
 42c:	85 91       	lpm	r24, Z+
 42e:	93 ff       	sbrs	r25, 3
 430:	81 91       	ld	r24, Z+
 432:	7f 01       	movw	r14, r30
 434:	88 23       	and	r24, r24
 436:	09 f4       	brne	.+2      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 438:	ad c1       	rjmp	.+858    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 43a:	85 32       	cpi	r24, 0x25	; 37
 43c:	39 f4       	brne	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43e:	93 fd       	sbrc	r25, 3
 440:	85 91       	lpm	r24, Z+
 442:	93 ff       	sbrs	r25, 3
 444:	81 91       	ld	r24, Z+
 446:	7f 01       	movw	r14, r30
 448:	85 32       	cpi	r24, 0x25	; 37
 44a:	21 f4       	brne	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44c:	b6 01       	movw	r22, r12
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	d6 d1       	rcall	.+940    	; 0x7fe <fputc>
 452:	e8 cf       	rjmp	.-48     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 454:	91 2c       	mov	r9, r1
 456:	21 2c       	mov	r2, r1
 458:	31 2c       	mov	r3, r1
 45a:	ff e1       	ldi	r31, 0x1F	; 31
 45c:	f3 15       	cp	r31, r3
 45e:	d8 f0       	brcs	.+54     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 460:	8b 32       	cpi	r24, 0x2B	; 43
 462:	79 f0       	breq	.+30     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 464:	38 f4       	brcc	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 466:	80 32       	cpi	r24, 0x20	; 32
 468:	79 f0       	breq	.+30     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 46a:	83 32       	cpi	r24, 0x23	; 35
 46c:	a1 f4       	brne	.+40     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 46e:	23 2d       	mov	r18, r3
 470:	20 61       	ori	r18, 0x10	; 16
 472:	1d c0       	rjmp	.+58     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 474:	8d 32       	cpi	r24, 0x2D	; 45
 476:	61 f0       	breq	.+24     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 478:	80 33       	cpi	r24, 0x30	; 48
 47a:	69 f4       	brne	.+26     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 47c:	23 2d       	mov	r18, r3
 47e:	21 60       	ori	r18, 0x01	; 1
 480:	16 c0       	rjmp	.+44     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 482:	83 2d       	mov	r24, r3
 484:	82 60       	ori	r24, 0x02	; 2
 486:	38 2e       	mov	r3, r24
 488:	e3 2d       	mov	r30, r3
 48a:	e4 60       	ori	r30, 0x04	; 4
 48c:	3e 2e       	mov	r3, r30
 48e:	2a c0       	rjmp	.+84     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 490:	f3 2d       	mov	r31, r3
 492:	f8 60       	ori	r31, 0x08	; 8
 494:	1d c0       	rjmp	.+58     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 496:	37 fc       	sbrc	r3, 7
 498:	2d c0       	rjmp	.+90     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 49a:	20 ed       	ldi	r18, 0xD0	; 208
 49c:	28 0f       	add	r18, r24
 49e:	2a 30       	cpi	r18, 0x0A	; 10
 4a0:	40 f0       	brcs	.+16     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a2:	8e 32       	cpi	r24, 0x2E	; 46
 4a4:	b9 f4       	brne	.+46     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4a6:	36 fc       	sbrc	r3, 6
 4a8:	75 c1       	rjmp	.+746    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 4aa:	23 2d       	mov	r18, r3
 4ac:	20 64       	ori	r18, 0x40	; 64
 4ae:	32 2e       	mov	r3, r18
 4b0:	19 c0       	rjmp	.+50     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4b2:	36 fe       	sbrs	r3, 6
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	98 9e       	mul	r9, r24
 4ba:	20 0d       	add	r18, r0
 4bc:	11 24       	eor	r1, r1
 4be:	92 2e       	mov	r9, r18
 4c0:	11 c0       	rjmp	.+34     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4c2:	ea e0       	ldi	r30, 0x0A	; 10
 4c4:	2e 9e       	mul	r2, r30
 4c6:	20 0d       	add	r18, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	22 2e       	mov	r2, r18
 4cc:	f3 2d       	mov	r31, r3
 4ce:	f0 62       	ori	r31, 0x20	; 32
 4d0:	3f 2e       	mov	r3, r31
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4d4:	8c 36       	cpi	r24, 0x6C	; 108
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4d8:	83 2d       	mov	r24, r3
 4da:	80 68       	ori	r24, 0x80	; 128
 4dc:	38 2e       	mov	r3, r24
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	88 36       	cpi	r24, 0x68	; 104
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4e4:	f7 01       	movw	r30, r14
 4e6:	93 fd       	sbrc	r25, 3
 4e8:	85 91       	lpm	r24, Z+
 4ea:	93 ff       	sbrs	r25, 3
 4ec:	81 91       	ld	r24, Z+
 4ee:	7f 01       	movw	r14, r30
 4f0:	81 11       	cpse	r24, r1
 4f2:	b3 cf       	rjmp	.-154    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 4f4:	98 2f       	mov	r25, r24
 4f6:	9f 7d       	andi	r25, 0xDF	; 223
 4f8:	95 54       	subi	r25, 0x45	; 69
 4fa:	93 30       	cpi	r25, 0x03	; 3
 4fc:	28 f4       	brcc	.+10     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4fe:	0c 5f       	subi	r16, 0xFC	; 252
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	9f e3       	ldi	r25, 0x3F	; 63
 504:	99 83       	std	Y+1, r25	; 0x01
 506:	0d c0       	rjmp	.+26     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 508:	83 36       	cpi	r24, 0x63	; 99
 50a:	31 f0       	breq	.+12     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 50c:	83 37       	cpi	r24, 0x73	; 115
 50e:	71 f0       	breq	.+28     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 510:	83 35       	cpi	r24, 0x53	; 83
 512:	09 f0       	breq	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	55 c0       	rjmp	.+170    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 516:	20 c0       	rjmp	.+64     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 518:	f8 01       	movw	r30, r16
 51a:	80 81       	ld	r24, Z
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	0e 5f       	subi	r16, 0xFE	; 254
 520:	1f 4f       	sbci	r17, 0xFF	; 255
 522:	88 24       	eor	r8, r8
 524:	83 94       	inc	r8
 526:	91 2c       	mov	r9, r1
 528:	53 01       	movw	r10, r6
 52a:	12 c0       	rjmp	.+36     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 52c:	28 01       	movw	r4, r16
 52e:	f2 e0       	ldi	r31, 0x02	; 2
 530:	4f 0e       	add	r4, r31
 532:	51 1c       	adc	r5, r1
 534:	f8 01       	movw	r30, r16
 536:	a0 80       	ld	r10, Z
 538:	b1 80       	ldd	r11, Z+1	; 0x01
 53a:	36 fe       	sbrs	r3, 6
 53c:	03 c0       	rjmp	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 53e:	69 2d       	mov	r22, r9
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
 544:	6f ef       	ldi	r22, 0xFF	; 255
 546:	7f ef       	ldi	r23, 0xFF	; 255
 548:	c5 01       	movw	r24, r10
 54a:	4e d1       	rcall	.+668    	; 0x7e8 <strnlen>
 54c:	4c 01       	movw	r8, r24
 54e:	82 01       	movw	r16, r4
 550:	f3 2d       	mov	r31, r3
 552:	ff 77       	andi	r31, 0x7F	; 127
 554:	3f 2e       	mov	r3, r31
 556:	15 c0       	rjmp	.+42     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 558:	28 01       	movw	r4, r16
 55a:	22 e0       	ldi	r18, 0x02	; 2
 55c:	42 0e       	add	r4, r18
 55e:	51 1c       	adc	r5, r1
 560:	f8 01       	movw	r30, r16
 562:	a0 80       	ld	r10, Z
 564:	b1 80       	ldd	r11, Z+1	; 0x01
 566:	36 fe       	sbrs	r3, 6
 568:	03 c0       	rjmp	.+6      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 56a:	69 2d       	mov	r22, r9
 56c:	70 e0       	ldi	r23, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 570:	6f ef       	ldi	r22, 0xFF	; 255
 572:	7f ef       	ldi	r23, 0xFF	; 255
 574:	c5 01       	movw	r24, r10
 576:	2d d1       	rcall	.+602    	; 0x7d2 <strnlen_P>
 578:	4c 01       	movw	r8, r24
 57a:	f3 2d       	mov	r31, r3
 57c:	f0 68       	ori	r31, 0x80	; 128
 57e:	3f 2e       	mov	r3, r31
 580:	82 01       	movw	r16, r4
 582:	33 fc       	sbrc	r3, 3
 584:	19 c0       	rjmp	.+50     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 586:	82 2d       	mov	r24, r2
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	88 16       	cp	r8, r24
 58c:	99 06       	cpc	r9, r25
 58e:	a0 f4       	brcc	.+40     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 590:	b6 01       	movw	r22, r12
 592:	80 e2       	ldi	r24, 0x20	; 32
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	33 d1       	rcall	.+614    	; 0x7fe <fputc>
 598:	2a 94       	dec	r2
 59a:	f5 cf       	rjmp	.-22     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 59c:	f5 01       	movw	r30, r10
 59e:	37 fc       	sbrc	r3, 7
 5a0:	85 91       	lpm	r24, Z+
 5a2:	37 fe       	sbrs	r3, 7
 5a4:	81 91       	ld	r24, Z+
 5a6:	5f 01       	movw	r10, r30
 5a8:	b6 01       	movw	r22, r12
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	28 d1       	rcall	.+592    	; 0x7fe <fputc>
 5ae:	21 10       	cpse	r2, r1
 5b0:	2a 94       	dec	r2
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	82 1a       	sub	r8, r18
 5b6:	91 08       	sbc	r9, r1
 5b8:	81 14       	cp	r8, r1
 5ba:	91 04       	cpc	r9, r1
 5bc:	79 f7       	brne	.-34     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5be:	e1 c0       	rjmp	.+450    	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 5c0:	84 36       	cpi	r24, 0x64	; 100
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5c4:	89 36       	cpi	r24, 0x69	; 105
 5c6:	39 f5       	brne	.+78     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 5c8:	f8 01       	movw	r30, r16
 5ca:	37 fe       	sbrs	r3, 7
 5cc:	07 c0       	rjmp	.+14     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
 5ce:	60 81       	ld	r22, Z
 5d0:	71 81       	ldd	r23, Z+1	; 0x01
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	93 81       	ldd	r25, Z+3	; 0x03
 5d6:	0c 5f       	subi	r16, 0xFC	; 252
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	08 c0       	rjmp	.+16     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 5dc:	60 81       	ld	r22, Z
 5de:	71 81       	ldd	r23, Z+1	; 0x01
 5e0:	07 2e       	mov	r0, r23
 5e2:	00 0c       	add	r0, r0
 5e4:	88 0b       	sbc	r24, r24
 5e6:	99 0b       	sbc	r25, r25
 5e8:	0e 5f       	subi	r16, 0xFE	; 254
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	f3 2d       	mov	r31, r3
 5ee:	ff 76       	andi	r31, 0x6F	; 111
 5f0:	3f 2e       	mov	r3, r31
 5f2:	97 ff       	sbrs	r25, 7
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
 5f6:	90 95       	com	r25
 5f8:	80 95       	com	r24
 5fa:	70 95       	com	r23
 5fc:	61 95       	neg	r22
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	f0 68       	ori	r31, 0x80	; 128
 606:	3f 2e       	mov	r3, r31
 608:	2a e0       	ldi	r18, 0x0A	; 10
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	a3 01       	movw	r20, r6
 60e:	33 d1       	rcall	.+614    	; 0x876 <__ultoa_invert>
 610:	88 2e       	mov	r8, r24
 612:	86 18       	sub	r8, r6
 614:	44 c0       	rjmp	.+136    	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 616:	85 37       	cpi	r24, 0x75	; 117
 618:	31 f4       	brne	.+12     	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
 61a:	23 2d       	mov	r18, r3
 61c:	2f 7e       	andi	r18, 0xEF	; 239
 61e:	b2 2e       	mov	r11, r18
 620:	2a e0       	ldi	r18, 0x0A	; 10
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	25 c0       	rjmp	.+74     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 626:	93 2d       	mov	r25, r3
 628:	99 7f       	andi	r25, 0xF9	; 249
 62a:	b9 2e       	mov	r11, r25
 62c:	8f 36       	cpi	r24, 0x6F	; 111
 62e:	c1 f0       	breq	.+48     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 630:	18 f4       	brcc	.+6      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
 632:	88 35       	cpi	r24, 0x58	; 88
 634:	79 f0       	breq	.+30     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
 636:	ae c0       	rjmp	.+348    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 638:	80 37       	cpi	r24, 0x70	; 112
 63a:	19 f0       	breq	.+6      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
 63c:	88 37       	cpi	r24, 0x78	; 120
 63e:	21 f0       	breq	.+8      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
 640:	a9 c0       	rjmp	.+338    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
 642:	e9 2f       	mov	r30, r25
 644:	e0 61       	ori	r30, 0x10	; 16
 646:	be 2e       	mov	r11, r30
 648:	b4 fe       	sbrs	r11, 4
 64a:	0d c0       	rjmp	.+26     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 64c:	fb 2d       	mov	r31, r11
 64e:	f4 60       	ori	r31, 0x04	; 4
 650:	bf 2e       	mov	r11, r31
 652:	09 c0       	rjmp	.+18     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
 654:	34 fe       	sbrs	r3, 4
 656:	0a c0       	rjmp	.+20     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 658:	29 2f       	mov	r18, r25
 65a:	26 60       	ori	r18, 0x06	; 6
 65c:	b2 2e       	mov	r11, r18
 65e:	06 c0       	rjmp	.+12     	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 660:	28 e0       	ldi	r18, 0x08	; 8
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	05 c0       	rjmp	.+10     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 666:	20 e1       	ldi	r18, 0x10	; 16
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
 66c:	20 e1       	ldi	r18, 0x10	; 16
 66e:	32 e0       	ldi	r19, 0x02	; 2
 670:	f8 01       	movw	r30, r16
 672:	b7 fe       	sbrs	r11, 7
 674:	07 c0       	rjmp	.+14     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
 676:	60 81       	ld	r22, Z
 678:	71 81       	ldd	r23, Z+1	; 0x01
 67a:	82 81       	ldd	r24, Z+2	; 0x02
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	0c 5f       	subi	r16, 0xFC	; 252
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	06 c0       	rjmp	.+12     	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
 684:	60 81       	ld	r22, Z
 686:	71 81       	ldd	r23, Z+1	; 0x01
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	0e 5f       	subi	r16, 0xFE	; 254
 68e:	1f 4f       	sbci	r17, 0xFF	; 255
 690:	a3 01       	movw	r20, r6
 692:	f1 d0       	rcall	.+482    	; 0x876 <__ultoa_invert>
 694:	88 2e       	mov	r8, r24
 696:	86 18       	sub	r8, r6
 698:	fb 2d       	mov	r31, r11
 69a:	ff 77       	andi	r31, 0x7F	; 127
 69c:	3f 2e       	mov	r3, r31
 69e:	36 fe       	sbrs	r3, 6
 6a0:	0d c0       	rjmp	.+26     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 6a2:	23 2d       	mov	r18, r3
 6a4:	2e 7f       	andi	r18, 0xFE	; 254
 6a6:	a2 2e       	mov	r10, r18
 6a8:	89 14       	cp	r8, r9
 6aa:	58 f4       	brcc	.+22     	; 0x6c2 <__LOCK_REGION_LENGTH__+0x2c2>
 6ac:	34 fe       	sbrs	r3, 4
 6ae:	0b c0       	rjmp	.+22     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6b0:	32 fc       	sbrc	r3, 2
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6b4:	83 2d       	mov	r24, r3
 6b6:	8e 7e       	andi	r24, 0xEE	; 238
 6b8:	a8 2e       	mov	r10, r24
 6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
 6bc:	b8 2c       	mov	r11, r8
 6be:	a3 2c       	mov	r10, r3
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6c2:	b8 2c       	mov	r11, r8
 6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
 6c6:	b9 2c       	mov	r11, r9
 6c8:	a4 fe       	sbrs	r10, 4
 6ca:	0f c0       	rjmp	.+30     	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6cc:	fe 01       	movw	r30, r28
 6ce:	e8 0d       	add	r30, r8
 6d0:	f1 1d       	adc	r31, r1
 6d2:	80 81       	ld	r24, Z
 6d4:	80 33       	cpi	r24, 0x30	; 48
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
 6d8:	9a 2d       	mov	r25, r10
 6da:	99 7e       	andi	r25, 0xE9	; 233
 6dc:	a9 2e       	mov	r10, r25
 6de:	09 c0       	rjmp	.+18     	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6e0:	a2 fe       	sbrs	r10, 2
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
 6e4:	b3 94       	inc	r11
 6e6:	b3 94       	inc	r11
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6ea:	8a 2d       	mov	r24, r10
 6ec:	86 78       	andi	r24, 0x86	; 134
 6ee:	09 f0       	breq	.+2      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
 6f0:	b3 94       	inc	r11
 6f2:	a3 fc       	sbrc	r10, 3
 6f4:	10 c0       	rjmp	.+32     	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 6f6:	a0 fe       	sbrs	r10, 0
 6f8:	06 c0       	rjmp	.+12     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 6fa:	b2 14       	cp	r11, r2
 6fc:	80 f4       	brcc	.+32     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
 6fe:	28 0c       	add	r2, r8
 700:	92 2c       	mov	r9, r2
 702:	9b 18       	sub	r9, r11
 704:	0d c0       	rjmp	.+26     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 706:	b2 14       	cp	r11, r2
 708:	58 f4       	brcc	.+22     	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 70a:	b6 01       	movw	r22, r12
 70c:	80 e2       	ldi	r24, 0x20	; 32
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	76 d0       	rcall	.+236    	; 0x7fe <fputc>
 712:	b3 94       	inc	r11
 714:	f8 cf       	rjmp	.-16     	; 0x706 <__LOCK_REGION_LENGTH__+0x306>
 716:	b2 14       	cp	r11, r2
 718:	18 f4       	brcc	.+6      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
 71a:	2b 18       	sub	r2, r11
 71c:	02 c0       	rjmp	.+4      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
 71e:	98 2c       	mov	r9, r8
 720:	21 2c       	mov	r2, r1
 722:	a4 fe       	sbrs	r10, 4
 724:	0f c0       	rjmp	.+30     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
 726:	b6 01       	movw	r22, r12
 728:	80 e3       	ldi	r24, 0x30	; 48
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	68 d0       	rcall	.+208    	; 0x7fe <fputc>
 72e:	a2 fe       	sbrs	r10, 2
 730:	16 c0       	rjmp	.+44     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 732:	a1 fc       	sbrc	r10, 1
 734:	03 c0       	rjmp	.+6      	; 0x73c <__LOCK_REGION_LENGTH__+0x33c>
 736:	88 e7       	ldi	r24, 0x78	; 120
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
 73c:	88 e5       	ldi	r24, 0x58	; 88
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	b6 01       	movw	r22, r12
 742:	0c c0       	rjmp	.+24     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 744:	8a 2d       	mov	r24, r10
 746:	86 78       	andi	r24, 0x86	; 134
 748:	51 f0       	breq	.+20     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 74a:	a1 fe       	sbrs	r10, 1
 74c:	02 c0       	rjmp	.+4      	; 0x752 <__LOCK_REGION_LENGTH__+0x352>
 74e:	8b e2       	ldi	r24, 0x2B	; 43
 750:	01 c0       	rjmp	.+2      	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	a7 fc       	sbrc	r10, 7
 756:	8d e2       	ldi	r24, 0x2D	; 45
 758:	b6 01       	movw	r22, r12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	50 d0       	rcall	.+160    	; 0x7fe <fputc>
 75e:	89 14       	cp	r8, r9
 760:	30 f4       	brcc	.+12     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 762:	b6 01       	movw	r22, r12
 764:	80 e3       	ldi	r24, 0x30	; 48
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	4a d0       	rcall	.+148    	; 0x7fe <fputc>
 76a:	9a 94       	dec	r9
 76c:	f8 cf       	rjmp	.-16     	; 0x75e <__LOCK_REGION_LENGTH__+0x35e>
 76e:	8a 94       	dec	r8
 770:	f3 01       	movw	r30, r6
 772:	e8 0d       	add	r30, r8
 774:	f1 1d       	adc	r31, r1
 776:	80 81       	ld	r24, Z
 778:	b6 01       	movw	r22, r12
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	40 d0       	rcall	.+128    	; 0x7fe <fputc>
 77e:	81 10       	cpse	r8, r1
 780:	f6 cf       	rjmp	.-20     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
 782:	22 20       	and	r2, r2
 784:	09 f4       	brne	.+2      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
 786:	4e ce       	rjmp	.-868    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 788:	b6 01       	movw	r22, r12
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	37 d0       	rcall	.+110    	; 0x7fe <fputc>
 790:	2a 94       	dec	r2
 792:	f7 cf       	rjmp	.-18     	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
 794:	f6 01       	movw	r30, r12
 796:	86 81       	ldd	r24, Z+6	; 0x06
 798:	97 81       	ldd	r25, Z+7	; 0x07
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__LOCK_REGION_LENGTH__+0x3a0>
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	9f ef       	ldi	r25, 0xFF	; 255
 7a0:	2b 96       	adiw	r28, 0x0b	; 11
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	f8 94       	cli
 7a6:	de bf       	out	0x3e, r29	; 62
 7a8:	0f be       	out	0x3f, r0	; 63
 7aa:	cd bf       	out	0x3d, r28	; 61
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	ef 90       	pop	r14
 7b8:	df 90       	pop	r13
 7ba:	cf 90       	pop	r12
 7bc:	bf 90       	pop	r11
 7be:	af 90       	pop	r10
 7c0:	9f 90       	pop	r9
 7c2:	8f 90       	pop	r8
 7c4:	7f 90       	pop	r7
 7c6:	6f 90       	pop	r6
 7c8:	5f 90       	pop	r5
 7ca:	4f 90       	pop	r4
 7cc:	3f 90       	pop	r3
 7ce:	2f 90       	pop	r2
 7d0:	08 95       	ret

000007d2 <strnlen_P>:
 7d2:	fc 01       	movw	r30, r24
 7d4:	05 90       	lpm	r0, Z+
 7d6:	61 50       	subi	r22, 0x01	; 1
 7d8:	70 40       	sbci	r23, 0x00	; 0
 7da:	01 10       	cpse	r0, r1
 7dc:	d8 f7       	brcc	.-10     	; 0x7d4 <strnlen_P+0x2>
 7de:	80 95       	com	r24
 7e0:	90 95       	com	r25
 7e2:	8e 0f       	add	r24, r30
 7e4:	9f 1f       	adc	r25, r31
 7e6:	08 95       	ret

000007e8 <strnlen>:
 7e8:	fc 01       	movw	r30, r24
 7ea:	61 50       	subi	r22, 0x01	; 1
 7ec:	70 40       	sbci	r23, 0x00	; 0
 7ee:	01 90       	ld	r0, Z+
 7f0:	01 10       	cpse	r0, r1
 7f2:	d8 f7       	brcc	.-10     	; 0x7ea <strnlen+0x2>
 7f4:	80 95       	com	r24
 7f6:	90 95       	com	r25
 7f8:	8e 0f       	add	r24, r30
 7fa:	9f 1f       	adc	r25, r31
 7fc:	08 95       	ret

000007fe <fputc>:
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	fb 01       	movw	r30, r22
 808:	23 81       	ldd	r18, Z+3	; 0x03
 80a:	21 fd       	sbrc	r18, 1
 80c:	03 c0       	rjmp	.+6      	; 0x814 <fputc+0x16>
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	9f ef       	ldi	r25, 0xFF	; 255
 812:	2c c0       	rjmp	.+88     	; 0x86c <fputc+0x6e>
 814:	22 ff       	sbrs	r18, 2
 816:	16 c0       	rjmp	.+44     	; 0x844 <fputc+0x46>
 818:	46 81       	ldd	r20, Z+6	; 0x06
 81a:	57 81       	ldd	r21, Z+7	; 0x07
 81c:	24 81       	ldd	r18, Z+4	; 0x04
 81e:	35 81       	ldd	r19, Z+5	; 0x05
 820:	42 17       	cp	r20, r18
 822:	53 07       	cpc	r21, r19
 824:	44 f4       	brge	.+16     	; 0x836 <fputc+0x38>
 826:	a0 81       	ld	r26, Z
 828:	b1 81       	ldd	r27, Z+1	; 0x01
 82a:	9d 01       	movw	r18, r26
 82c:	2f 5f       	subi	r18, 0xFF	; 255
 82e:	3f 4f       	sbci	r19, 0xFF	; 255
 830:	31 83       	std	Z+1, r19	; 0x01
 832:	20 83       	st	Z, r18
 834:	8c 93       	st	X, r24
 836:	26 81       	ldd	r18, Z+6	; 0x06
 838:	37 81       	ldd	r19, Z+7	; 0x07
 83a:	2f 5f       	subi	r18, 0xFF	; 255
 83c:	3f 4f       	sbci	r19, 0xFF	; 255
 83e:	37 83       	std	Z+7, r19	; 0x07
 840:	26 83       	std	Z+6, r18	; 0x06
 842:	14 c0       	rjmp	.+40     	; 0x86c <fputc+0x6e>
 844:	8b 01       	movw	r16, r22
 846:	ec 01       	movw	r28, r24
 848:	fb 01       	movw	r30, r22
 84a:	00 84       	ldd	r0, Z+8	; 0x08
 84c:	f1 85       	ldd	r31, Z+9	; 0x09
 84e:	e0 2d       	mov	r30, r0
 850:	09 95       	icall
 852:	89 2b       	or	r24, r25
 854:	e1 f6       	brne	.-72     	; 0x80e <fputc+0x10>
 856:	d8 01       	movw	r26, r16
 858:	16 96       	adiw	r26, 0x06	; 6
 85a:	8d 91       	ld	r24, X+
 85c:	9c 91       	ld	r25, X
 85e:	17 97       	sbiw	r26, 0x07	; 7
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	17 96       	adiw	r26, 0x07	; 7
 864:	9c 93       	st	X, r25
 866:	8e 93       	st	-X, r24
 868:	16 97       	sbiw	r26, 0x06	; 6
 86a:	ce 01       	movw	r24, r28
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	08 95       	ret

00000876 <__ultoa_invert>:
 876:	fa 01       	movw	r30, r20
 878:	aa 27       	eor	r26, r26
 87a:	28 30       	cpi	r18, 0x08	; 8
 87c:	51 f1       	breq	.+84     	; 0x8d2 <__ultoa_invert+0x5c>
 87e:	20 31       	cpi	r18, 0x10	; 16
 880:	81 f1       	breq	.+96     	; 0x8e2 <__ultoa_invert+0x6c>
 882:	e8 94       	clt
 884:	6f 93       	push	r22
 886:	6e 7f       	andi	r22, 0xFE	; 254
 888:	6e 5f       	subi	r22, 0xFE	; 254
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	af 4f       	sbci	r26, 0xFF	; 255
 892:	b1 e0       	ldi	r27, 0x01	; 1
 894:	3e d0       	rcall	.+124    	; 0x912 <__ultoa_invert+0x9c>
 896:	b4 e0       	ldi	r27, 0x04	; 4
 898:	3c d0       	rcall	.+120    	; 0x912 <__ultoa_invert+0x9c>
 89a:	67 0f       	add	r22, r23
 89c:	78 1f       	adc	r23, r24
 89e:	89 1f       	adc	r24, r25
 8a0:	9a 1f       	adc	r25, r26
 8a2:	a1 1d       	adc	r26, r1
 8a4:	68 0f       	add	r22, r24
 8a6:	79 1f       	adc	r23, r25
 8a8:	8a 1f       	adc	r24, r26
 8aa:	91 1d       	adc	r25, r1
 8ac:	a1 1d       	adc	r26, r1
 8ae:	6a 0f       	add	r22, r26
 8b0:	71 1d       	adc	r23, r1
 8b2:	81 1d       	adc	r24, r1
 8b4:	91 1d       	adc	r25, r1
 8b6:	a1 1d       	adc	r26, r1
 8b8:	20 d0       	rcall	.+64     	; 0x8fa <__ultoa_invert+0x84>
 8ba:	09 f4       	brne	.+2      	; 0x8be <__ultoa_invert+0x48>
 8bc:	68 94       	set
 8be:	3f 91       	pop	r19
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	26 9f       	mul	r18, r22
 8c4:	11 24       	eor	r1, r1
 8c6:	30 19       	sub	r19, r0
 8c8:	30 5d       	subi	r19, 0xD0	; 208
 8ca:	31 93       	st	Z+, r19
 8cc:	de f6       	brtc	.-74     	; 0x884 <__ultoa_invert+0xe>
 8ce:	cf 01       	movw	r24, r30
 8d0:	08 95       	ret
 8d2:	46 2f       	mov	r20, r22
 8d4:	47 70       	andi	r20, 0x07	; 7
 8d6:	40 5d       	subi	r20, 0xD0	; 208
 8d8:	41 93       	st	Z+, r20
 8da:	b3 e0       	ldi	r27, 0x03	; 3
 8dc:	0f d0       	rcall	.+30     	; 0x8fc <__ultoa_invert+0x86>
 8de:	c9 f7       	brne	.-14     	; 0x8d2 <__ultoa_invert+0x5c>
 8e0:	f6 cf       	rjmp	.-20     	; 0x8ce <__ultoa_invert+0x58>
 8e2:	46 2f       	mov	r20, r22
 8e4:	4f 70       	andi	r20, 0x0F	; 15
 8e6:	40 5d       	subi	r20, 0xD0	; 208
 8e8:	4a 33       	cpi	r20, 0x3A	; 58
 8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__ultoa_invert+0x7c>
 8ec:	49 5d       	subi	r20, 0xD9	; 217
 8ee:	31 fd       	sbrc	r19, 1
 8f0:	40 52       	subi	r20, 0x20	; 32
 8f2:	41 93       	st	Z+, r20
 8f4:	02 d0       	rcall	.+4      	; 0x8fa <__ultoa_invert+0x84>
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__ultoa_invert+0x6c>
 8f8:	ea cf       	rjmp	.-44     	; 0x8ce <__ultoa_invert+0x58>
 8fa:	b4 e0       	ldi	r27, 0x04	; 4
 8fc:	a6 95       	lsr	r26
 8fe:	97 95       	ror	r25
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0x86>
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	61 05       	cpc	r22, r1
 90e:	71 05       	cpc	r23, r1
 910:	08 95       	ret
 912:	9b 01       	movw	r18, r22
 914:	ac 01       	movw	r20, r24
 916:	0a 2e       	mov	r0, r26
 918:	06 94       	lsr	r0
 91a:	57 95       	ror	r21
 91c:	47 95       	ror	r20
 91e:	37 95       	ror	r19
 920:	27 95       	ror	r18
 922:	ba 95       	dec	r27
 924:	c9 f7       	brne	.-14     	; 0x918 <__ultoa_invert+0xa2>
 926:	62 0f       	add	r22, r18
 928:	73 1f       	adc	r23, r19
 92a:	84 1f       	adc	r24, r20
 92c:	95 1f       	adc	r25, r21
 92e:	a0 1d       	adc	r26, r0
 930:	08 95       	ret

00000932 <_exit>:
 932:	f8 94       	cli

00000934 <__stop_program>:
 934:	ff cf       	rjmp	.-2      	; 0x934 <__stop_program>
