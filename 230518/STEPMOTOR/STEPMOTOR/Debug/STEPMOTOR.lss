
STEPMOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000186  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009f1  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000338  00000000  00000000  000014f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011c  00000000  00000000  00001cad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	32 d0       	rcall	.+100    	; 0x118 <main>
  b4:	66 c0       	rjmp	.+204    	; 0x182 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <stepForward>:
uint8_t stempData[] = {0x01, 0x02, 0x04, 0x08};
int stepIndex = -1;
	
uint8_t stepForward(void)
{
	stepIndex++;
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(stepIndex >= 4)
  ca:	04 97       	sbiw	r24, 0x04	; 4
  cc:	24 f0       	brlt	.+8      	; 0xd6 <stepForward+0x1e>
	{
		stepIndex = 0;
  ce:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	return stempData[stepIndex];
  d6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	ee 5f       	subi	r30, 0xFE	; 254
  e0:	fe 4f       	sbci	r31, 0xFE	; 254
}
  e2:	80 81       	ld	r24, Z
  e4:	08 95       	ret

000000e6 <stepBackward>:

uint8_t stepBackward(void)
{
	stepIndex--;
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(stepIndex < 0)
  f8:	99 23       	and	r25, r25
  fa:	34 f4       	brge	.+12     	; 0x108 <stepBackward+0x22>
	{
		stepIndex = 3 ;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	return stempData[stepIndex];
 108:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 110:	ee 5f       	subi	r30, 0xFE	; 254
 112:	fe 4f       	sbci	r31, 0xFE	; 254
}
 114:	80 81       	ld	r24, Z
 116:	08 95       	ret

00000118 <main>:

int main(void)
{
	DDRE = 0x0f;
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	82 b9       	out	0x02, r24	; 2
   
    while (1) 
    {
		for(int i = 0; i<2048 ; i++)
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	09 c0       	rjmp	.+18     	; 0x134 <main+0x1c>
		{
			PORTE = stepForward();
 122:	ca df       	rcall	.-108    	; 0xb8 <stepForward>
 124:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9f e1       	ldi	r25, 0x1F	; 31
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x12>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x18>
 130:	00 00       	nop
{
	DDRE = 0x0f;
   
    while (1) 
    {
		for(int i = 0; i<2048 ; i++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c1 15       	cp	r28, r1
 136:	98 e0       	ldi	r25, 0x08	; 8
 138:	d9 07       	cpc	r29, r25
 13a:	9c f3       	brlt	.-26     	; 0x122 <main+0xa>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	98 e1       	ldi	r25, 0x18	; 24
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x2a>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x34>
 14c:	00 00       	nop
			PORTE = stepForward();
			_delay_ms(2);
		}
		_delay_ms(500);
		
		for(int i = 0; i < 2048; i++)
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PORTE = stepBackward();
 152:	09 c0       	rjmp	.+18     	; 0x166 <main+0x4e>
 154:	c8 df       	rcall	.-112    	; 0xe6 <stepBackward>
 156:	83 b9       	out	0x03, r24	; 3
 158:	8f e3       	ldi	r24, 0x3F	; 63
 15a:	9f e1       	ldi	r25, 0x1F	; 31
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x44>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x4a>
 162:	00 00       	nop
			PORTE = stepForward();
			_delay_ms(2);
		}
		_delay_ms(500);
		
		for(int i = 0; i < 2048; i++)
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	c1 15       	cp	r28, r1
 168:	98 e0       	ldi	r25, 0x08	; 8
 16a:	d9 07       	cpc	r29, r25
 16c:	9c f3       	brlt	.-26     	; 0x154 <main+0x3c>
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 e6       	ldi	r24, 0x69	; 105
 172:	98 e1       	ldi	r25, 0x18	; 24
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x5c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x66>
 17e:	00 00       	nop
 180:	cd cf       	rjmp	.-102    	; 0x11c <main+0x4>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
