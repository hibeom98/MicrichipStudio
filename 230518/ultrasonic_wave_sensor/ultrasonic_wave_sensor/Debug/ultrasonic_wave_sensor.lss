
ultrasonic_wave_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000c7c  00000d10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800134  00800134  00000d44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133a  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc2  00000000  00000000  00002232  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d7  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000037cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ec  00000000  00000000  00003fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000045d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 33       	cpi	r26, 0x34	; 52
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e3       	ldi	r26, 0x34	; 52
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 33       	cpi	r26, 0x3B	; 59
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	11 d1       	rcall	.+546    	; 0x2e6 <main>
  c4:	d9 c5       	rjmp	.+2994   	; 0xc78 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <I2C_Init>:
﻿
#include "I2C.h"

void I2C_Init()
{
	I2C_DDR |= (1<<I2C_SCL)|(1<<I2C_SDA);		// I2C핀을 출력으로 설정
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	81 bb       	out	0x11, r24	; 17
	TWBR = 72; //100kHz
  ce:	88 e4       	ldi	r24, 0x48	; 72
  d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  d4:	08 95       	ret

000000d6 <I2C_Start>:
	//TWBR = 32; //200kHz
	//TWBR = 12; //400kHz
}
void I2C_Start()
{	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		// TWCR 레지스터의 START비트를 설정	
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR &	(1<<TWINT)));	//하드웨어가 TWINT세트되는 시점을 결정하므로 약간의 시간이 걸림
  dc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  e0:	88 23       	and	r24, r24
  e2:	e4 f7       	brge	.-8      	; 0xdc <I2C_Start+0x6>
}
  e4:	08 95       	ret

000000e6 <I2C_Stop>:

void I2C_Stop()
{	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	//TWCR의 STOP 비트 설정
  e6:	84 e9       	ldi	r24, 0x94	; 148
  e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  ec:	08 95       	ret

000000ee <I2C_TxData>:
}

void I2C_TxData(uint8_t data)		// 데이터 한 바이트 보냄
{
	TWDR = data;					// 데이터를 TWDR 레지스터에 로드
  ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (1<<TWINT) |	(1<<TWEN);	// 데이터 전송을 시작하기 위해 TWCR 레지스트의 TWINT 비트 세트	
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	
	/* Wait for TWINT Flag set. 
	This indicates that the DATA has been transmitted, and
	ACK/NACK has been received.*/
	while (!(TWCR &	(1<<TWINT)));
  f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  fc:	88 23       	and	r24, r24
  fe:	e4 f7       	brge	.-8      	; 0xf8 <I2C_TxData+0xa>
}
 100:	08 95       	ret

00000102 <I2C_TxByte>:

void I2C_TxByte(uint8_t devAddrRW, uint8_t data)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	d8 2f       	mov	r29, r24
 108:	c6 2f       	mov	r28, r22
	I2C_Start();
 10a:	e5 df       	rcall	.-54     	; 0xd6 <I2C_Start>
	I2C_TxData(devAddrRW);
 10c:	8d 2f       	mov	r24, r29
 10e:	ef df       	rcall	.-34     	; 0xee <I2C_TxData>
	I2C_TxData(data);
 110:	8c 2f       	mov	r24, r28
 112:	ed df       	rcall	.-38     	; 0xee <I2C_TxData>
	I2C_Stop();
 114:	e8 df       	rcall	.-48     	; 0xe6 <I2C_Stop>
 116:	df 91       	pop	r29
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <LCD_EnablePin>:
 11c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <__data_end>
	LCD_EnablePin();	
}

void LCD_EnablePin()
{
	I2C_LCD_Data &= ~(1<<LCD_E);				// E비트를 0 으로 설정
 120:	6b 7f       	andi	r22, 0xFB	; 251
 122:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 0을 보냄
 126:	8e e4       	ldi	r24, 0x4E	; 78
 128:	ec df       	rcall	.-40     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data |= (1<<LCD_E);					// E비트를 1 으로 설정
 12a:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <__data_end>
 12e:	64 60       	ori	r22, 0x04	; 4
 130:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 1을 보냄
 134:	8e e4       	ldi	r24, 0x4E	; 78
 136:	e5 df       	rcall	.-54     	; 0x102 <I2C_TxByte>
	
	I2C_LCD_Data &= ~(1<<LCD_E);				// E비트를 1 으로 설정
 138:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <__data_end>
 13c:	6b 7f       	andi	r22, 0xFB	; 251
 13e:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 Enable 핀에 0을 보냄
 142:	8e e4       	ldi	r24, 0x4E	; 78
 144:	de df       	rcall	.-68     	; 0x102 <I2C_TxByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	98 e1       	ldi	r25, 0x18	; 24
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_EnablePin+0x2e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_EnablePin+0x34>
 150:	00 00       	nop
 152:	08 95       	ret

00000154 <LCD_Data4bit>:
#include "I2C_LCD.h"

uint8_t I2C_LCD_Data;

void LCD_Data4bit(uint8_t data)
{	
 154:	cf 93       	push	r28
 156:	c8 2f       	mov	r28, r24
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | (data & 0xf0); // 상위 4bit 출력
 158:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	9c 2f       	mov	r25, r28
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	89 2b       	or	r24, r25
 164:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
	LCD_EnablePin();
 168:	d9 df       	rcall	.-78     	; 0x11c <LCD_EnablePin>
	I2C_LCD_Data = (I2C_LCD_Data & 0x0f) | ((data & 0x0f) << 4); // 하위 4bit 출력
 16a:	20 e1       	ldi	r18, 0x10	; 16
 16c:	c2 9f       	mul	r28, r18
 16e:	c0 01       	movw	r24, r0
 170:	11 24       	eor	r1, r1
 172:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	89 2b       	or	r24, r25
 17a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
	LCD_EnablePin();	
 17e:	ce df       	rcall	.-100    	; 0x11c <LCD_EnablePin>
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCD_WriteCommand>:
	_delay_us(1600);
}

void LCD_WriteCommand(uint8_t commadData)
{
	I2C_LCD_Data &= ~(1<<LCD_RS);		// RS비트 0으로 설정
 184:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
	I2C_LCD_Data &= ~(1<<LCD_RW);	// RW 비트 0으로 설정/////
 188:	9c 7f       	andi	r25, 0xFC	; 252
 18a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__data_end>
	LCD_Data4bit(commadData);			// LCD 명령을 보냄
 18e:	e2 cf       	rjmp	.-60     	; 0x154 <LCD_Data4bit>
 190:	08 95       	ret

00000192 <LCD_WriteData>:
}

void LCD_WriteData(uint8_t charData)	
{
	I2C_LCD_Data |= (1<<LCD_RS);		// RS비트 1으로 설정
 192:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end>
 196:	91 60       	ori	r25, 0x01	; 1
	I2C_LCD_Data &= ~(1<<LCD_RW);	// RW 비트 0으로 설정////
 198:	9d 7f       	andi	r25, 0xFD	; 253
 19a:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <__data_end>
	LCD_Data4bit(charData);				// LCD 에 문자 데이터 보냄
 19e:	da cf       	rjmp	.-76     	; 0x154 <LCD_Data4bit>
 1a0:	08 95       	ret

000001a2 <LCD_BackLightOn>:
}

void LCD_BackLightOn()
{
	I2C_LCD_Data |= (1<<LCD_BACKLIGHT);
 1a2:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <__data_end>
 1a6:	68 60       	ori	r22, 0x08	; 8
 1a8:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <__data_end>
	I2C_TxByte(LCD_DEV_ADDR, I2C_LCD_Data);	// I2C를 통해 LCD의 백라이트를 켭니다
 1ac:	8e e4       	ldi	r24, 0x4E	; 78
 1ae:	a9 cf       	rjmp	.-174    	; 0x102 <I2C_TxByte>
 1b0:	08 95       	ret

000001b2 <LCD_GotoXY>:
}

void LCD_GotoXY(uint8_t row, uint8_t col)
{
	col %= 16;
 1b2:	6f 70       	andi	r22, 0x0F	; 15
	row %= 2;
 1b4:	81 70       	andi	r24, 0x01	; 1
	
	uint8_t address = (0x40 * row) + col;	 // 지정된 행과 열의 LCD 주소를 계산합니다.
 1b6:	90 e4       	ldi	r25, 0x40	; 64
 1b8:	89 9f       	mul	r24, r25
 1ba:	60 0d       	add	r22, r0
 1bc:	11 24       	eor	r1, r1
 1be:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 + address;
	LCD_WriteCommand(command);				// 커서 위치를 설정하는 LCD 명령을 작성합니다.
 1c0:	80 58       	subi	r24, 0x80	; 128
 1c2:	e0 cf       	rjmp	.-64     	; 0x184 <LCD_WriteCommand>
 1c4:	08 95       	ret

000001c6 <LCD_WriteString>:
}

void LCD_WriteString(char *string)
{
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	for (uint8_t i=0; string[i]; i++)
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCD_WriteString+0x10>
	{
		LCD_WriteData(string[i]);
 1d2:	df df       	rcall	.-66     	; 0x192 <LCD_WriteData>
	LCD_WriteCommand(command);				// 커서 위치를 설정하는 LCD 명령을 작성합니다.
}

void LCD_WriteString(char *string)
{
	for (uint8_t i=0; string[i]; i++)
 1d4:	cf 5f       	subi	r28, 0xFF	; 255
 1d6:	f8 01       	movw	r30, r16
 1d8:	ec 0f       	add	r30, r28
 1da:	f1 1d       	adc	r31, r1
 1dc:	80 81       	ld	r24, Z
 1de:	81 11       	cpse	r24, r1
 1e0:	f8 cf       	rjmp	.-16     	; 0x1d2 <LCD_WriteString+0xc>
	{
		LCD_WriteData(string[i]);
	}
}
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <LCD_WriteStringXY>:

void LCD_WriteStringXY(uint8_t row, uint8_t col, char *string)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ea 01       	movw	r28, r20
	LCD_GotoXY(row, col);		// 커서를 지정된 행과 열로 이동합니다.
 1f0:	e0 df       	rcall	.-64     	; 0x1b2 <LCD_GotoXY>
	LCD_WriteString(string);
 1f2:	ce 01       	movw	r24, r28
 1f4:	e8 df       	rcall	.-48     	; 0x1c6 <LCD_WriteString>
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_Init>:

void LCD_Init()
{
	I2C_Init();
 1fc:	65 df       	rcall	.-310    	; 0xc8 <I2C_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <LCD_Init+0x8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_Init+0x12>
 20e:	00 00       	nop
	
	_delay_ms(50);
	LCD_WriteCommand(0x03);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	b8 df       	rcall	.-144    	; 0x184 <LCD_WriteCommand>
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9c e9       	ldi	r25, 0x9C	; 156
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Init+0x1c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Init+0x22>
	_delay_ms(10);
	LCD_WriteCommand(0x03);
 21e:	00 00       	nop
 220:	83 e0       	ldi	r24, 0x03	; 3
 222:	b0 df       	rcall	.-160    	; 0x184 <LCD_WriteCommand>
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	9f e0       	ldi	r25, 0x0F	; 15
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x32>
	_delay_ms(1);
	LCD_WriteCommand(0x03);
 22e:	00 00       	nop
 230:	83 e0       	ldi	r24, 0x03	; 3
	
	LCD_WriteCommand(0x02);
 232:	a8 df       	rcall	.-176    	; 0x184 <LCD_WriteCommand>
 234:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteCommand(COMMAND_4_BIT_MODE);
 236:	a6 df       	rcall	.-180    	; 0x184 <LCD_WriteCommand>
 238:	88 e2       	ldi	r24, 0x28	; 40
	LCD_WriteCommand(COMMAND_DISPLAY_OFF);
 23a:	a4 df       	rcall	.-184    	; 0x184 <LCD_WriteCommand>
 23c:	88 e0       	ldi	r24, 0x08	; 8
	LCD_WriteCommand(COMMAND_DISPLAY_CLEAR);
 23e:	a2 df       	rcall	.-188    	; 0x184 <LCD_WriteCommand>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	a0 df       	rcall	.-192    	; 0x184 <LCD_WriteCommand>
	LCD_WriteCommand(COMMAND_ENTRY_MODE);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	9e df       	rcall	.-196    	; 0x184 <LCD_WriteCommand>
 248:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_WriteCommand(COMMAND_DISPLAY_ON);
 24a:	9c df       	rcall	.-200    	; 0x184 <LCD_WriteCommand>
 24c:	aa cf       	rjmp	.-172    	; 0x1a2 <LCD_BackLightOn>
 24e:	08 95       	ret

00000250 <Timer_Init>:

#define PRESCALER 1024 //분주비

void Timer_Init()
{
	TCCR1B |= (1<<CS12) | (1<<CS10);	//1024 분주비
 250:	8e b5       	in	r24, 0x2e	; 46
 252:	85 60       	ori	r24, 0x05	; 5
 254:	8e bd       	out	0x2e, r24	; 46
 256:	08 95       	ret

00000258 <measure_distance>:
}

uint8_t measure_distance(void)
{
	// 트리거 핀으로 펄스출력
	PORTB &= ~(1<<PORTB1);	// LOW
 258:	88 b3       	in	r24, 0x18	; 24
 25a:	8d 7f       	andi	r24, 0xFD	; 253
 25c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	25 e0       	ldi	r18, 0x05	; 5
 260:	2a 95       	dec	r18
 262:	f1 f7       	brne	.-4      	; 0x260 <measure_distance+0x8>
 264:	00 00       	nop
	_delay_us(1);
	PORTB |= (1<<PORTB1);	// HIGH
 266:	88 b3       	in	r24, 0x18	; 24
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	88 bb       	out	0x18, r24	; 24
 26c:	85 e3       	ldi	r24, 0x35	; 53
 26e:	8a 95       	dec	r24
 270:	f1 f7       	brne	.-4      	; 0x26e <measure_distance+0x16>
 272:	00 00       	nop
	_delay_us(10);
	PORTB &= ~(1<<PORTB1);	// LOW
 274:	88 b3       	in	r24, 0x18	; 24
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	88 bb       	out	0x18, r24	; 24
	
	
	// 에코핀 HIGH될때까지
	TCNT1 = 0;
 27a:	1d bc       	out	0x2d, r1	; 45
 27c:	1c bc       	out	0x2c, r1	; 44
	while (!(PINB & 0x01))
 27e:	05 c0       	rjmp	.+10     	; 0x28a <measure_distance+0x32>
	{
		if (TCNT1 > 65000)
 280:	2c b5       	in	r18, 0x2c	; 44
 282:	3d b5       	in	r19, 0x2d	; 45
 284:	29 3e       	cpi	r18, 0xE9	; 233
 286:	3d 4f       	sbci	r19, 0xFD	; 253
 288:	68 f5       	brcc	.+90     	; 0x2e4 <measure_distance+0x8c>
	PORTB &= ~(1<<PORTB1);	// LOW
	
	
	// 에코핀 HIGH될때까지
	TCNT1 = 0;
	while (!(PINB & 0x01))
 28a:	96 b3       	in	r25, 0x16	; 22
 28c:	89 2f       	mov	r24, r25
 28e:	81 70       	andi	r24, 0x01	; 1
 290:	90 ff       	sbrs	r25, 0
 292:	f6 cf       	rjmp	.-20     	; 0x280 <measure_distance+0x28>
			return 0;
		}
	}
	
	// LOW 될때까지
	TCNT1 = 0;
 294:	1d bc       	out	0x2d, r1	; 45
 296:	1c bc       	out	0x2c, r1	; 44
	while (PINB & 0x01)
 298:	08 c0       	rjmp	.+16     	; 0x2aa <measure_distance+0x52>
	{
		if (TCNT1 > 65000)
 29a:	8c b5       	in	r24, 0x2c	; 44
 29c:	9d b5       	in	r25, 0x2d	; 45
 29e:	89 3e       	cpi	r24, 0xE9	; 233
 2a0:	9d 4f       	sbci	r25, 0xFD	; 253
 2a2:	18 f0       	brcs	.+6      	; 0x2aa <measure_distance+0x52>
		{
			TCNT1 =0 ;
 2a4:	1d bc       	out	0x2d, r1	; 45
 2a6:	1c bc       	out	0x2c, r1	; 44
			break;
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <measure_distance+0x56>
		}
	}
	
	// LOW 될때까지
	TCNT1 = 0;
	while (PINB & 0x01)
 2aa:	b0 99       	sbic	0x16, 0	; 22
 2ac:	f6 cf       	rjmp	.-20     	; 0x29a <measure_distance+0x42>
			TCNT1 =0 ;
			break;
		}
	}
	//에코핀 펄스폭을 마이크로 단위로 계산
	double pulse_width = 1000000.0 * TCNT1 * PRESCALER / F_CPU; // 우리의 cpu에 맞춰서 나누어 줘야 한다.!
 2ae:	6c b5       	in	r22, 0x2c	; 44
 2b0:	7d b5       	in	r23, 0x2d	; 45
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 d1       	rcall	.+514    	; 0x4ba <__floatunsisf>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	34 e2       	ldi	r19, 0x24	; 36
 2bc:	44 e7       	ldi	r20, 0x74	; 116
 2be:	59 e4       	ldi	r21, 0x49	; 73
 2c0:	8a d1       	rcall	.+788    	; 0x5d6 <__mulsf3>
 2c2:	20 e0       	ldi	r18, 0x00	; 0
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e8       	ldi	r20, 0x80	; 128
 2c8:	54 e4       	ldi	r21, 0x44	; 68
 2ca:	85 d1       	rcall	.+778    	; 0x5d6 <__mulsf3>
 2cc:	20 e0       	ldi	r18, 0x00	; 0
 2ce:	34 e2       	ldi	r19, 0x24	; 36
 2d0:	44 e7       	ldi	r20, 0x74	; 116
 2d2:	5b e4       	ldi	r21, 0x4B	; 75
 2d4:	5e d0       	rcall	.+188    	; 0x392 <__divsf3>
	
	// 계산된 펄스폭을 cm로 게산(data_sheet 참조)
	return pulse_width/58;
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	48 e6       	ldi	r20, 0x68	; 104
 2dc:	52 e4       	ldi	r21, 0x42	; 66
 2de:	59 d0       	rcall	.+178    	; 0x392 <__divsf3>
 2e0:	c0 d0       	rcall	.+384    	; 0x462 <__fixunssfsi>
 2e2:	86 2f       	mov	r24, r22
}
 2e4:	08 95       	ret

000002e6 <main>:
int main(void)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	6e 97       	sbiw	r28, 0x1e	; 30
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t distance;
	uint8_t buff [30];
	stdout = &OUTPUT;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <__iob+0x3>
 302:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <__iob+0x2>
	
	UART_init();	
 306:	30 d0       	rcall	.+96     	; 0x368 <UART_init>
	LCD_Init();		// LCD 초기화
 308:	79 df       	rcall	.-270    	; 0x1fc <LCD_Init>
 30a:	87 b3       	in	r24, 0x17	; 23
	DDRB |= 0x02;	// 트리거핀 출력 설정
 30c:	82 60       	ori	r24, 0x02	; 2
 30e:	87 bb       	out	0x17, r24	; 23
 310:	87 b3       	in	r24, 0x17	; 23
	DDRB &= 0xfe;	// 에코핀 입력 설정
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	87 bb       	out	0x17, r24	; 23
	
	Timer_Init();
 316:	9c df       	rcall	.-200    	; 0x250 <Timer_Init>
 318:	9f df       	rcall	.-194    	; 0x258 <measure_distance>
	
    while (1) 
    {
		distance = measure_distance();	// 거리측정
 31a:	18 2f       	mov	r17, r24
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
		printf("Distance : %d cm\r\n",distance);
 320:	8e e0       	ldi	r24, 0x0E	; 14
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	b9 d1       	rcall	.+882    	; 0x69c <printf>
 32a:	1f 92       	push	r1
 32c:	1f 93       	push	r17
		
		sprintf(buff,"Distance:%04dcm\r\n",distance);
 32e:	81 e2       	ldi	r24, 0x21	; 33
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9f 93       	push	r25
 334:	8f 93       	push	r24
 336:	8e 01       	movw	r16, r28
 338:	0f 5f       	subi	r16, 0xFF	; 255
 33a:	1f 4f       	sbci	r17, 0xFF	; 255
 33c:	1f 93       	push	r17
 33e:	0f 93       	push	r16
 340:	c0 d1       	rcall	.+896    	; 0x6c2 <sprintf>
 342:	a8 01       	movw	r20, r16
		LCD_WriteStringXY(0,1,buff);
 344:	61 e0       	ldi	r22, 0x01	; 1
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	50 df       	rcall	.-352    	; 0x1ea <LCD_WriteStringXY>
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	83 ec       	ldi	r24, 0xC3	; 195
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	99 e0       	ldi	r25, 0x09	; 9
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x6a>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x74>
 35a:	00 00       	nop
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
 366:	d8 cf       	rjmp	.-80     	; 0x318 <main+0x32>

00000368 <UART_init>:
﻿# include "UART.h"

void UART_init(void)
{
	UBRR0H = 0x00;
 368:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 0xCF;					 //207;
 36c:	8f ec       	ldi	r24, 0xCF	; 207
 36e:	89 b9       	out	0x09, r24	; 9

	UCSR0A |= (1<<U2X0);			 //비동기, 8비트, 패리티없음, 1비트 정지 (stop 비트는 1비트로 보내준다.), 시리얼 통신의 상태를 확인하고 통신 과정을 제어하기 위한 레지스터 중 하나,
 370:	8b b1       	in	r24, 0x0b	; 11
 372:	82 60       	ori	r24, 0x02	; 2
 374:	8b b9       	out	0x0b, r24	; 11
									 // 2배속 모드 설정

									 //UCSR0C |= 0x06;
	UCSR0B |= (1<<RXEN0);			 //RX Complete Interrupt Enable
 376:	8a b1       	in	r24, 0x0a	; 10
 378:	80 61       	ori	r24, 0x10	; 16
 37a:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= (1<<TXEN0);			 //TX Complete Interrupt Enable
 37c:	8a b1       	in	r24, 0x0a	; 10
 37e:	88 60       	ori	r24, 0x08	; 8
 380:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0B |= (1 << RXCIE0);
 382:	8a b1       	in	r24, 0x0a	; 10
 384:	80 68       	ori	r24, 0x80	; 128
 386:	8a b9       	out	0x0a, r24	; 10
 388:	08 95       	ret

0000038a <UART_transmit>:
}

void UART_transmit(char data)
{
	while ( !(UCSR0A & (1<<UDRE0))); //WHILE문 안의 (UCSR0A &(1<<UDRE0)이 0이면 무한루프,
 38a:	5d 9b       	sbis	0x0b, 5	; 11
 38c:	fe cf       	rjmp	.-4      	; 0x38a <UART_transmit>
									 // 안비어있으면 무한루트이다가 비어있으면 나가서 UDR0=data
									 
	UDR0 = data;					 // UDR0에 데이터가 들어가면 바로 출력
 38e:	8c b9       	out	0x0c, r24	; 12
 390:	08 95       	ret

00000392 <__divsf3>:
 392:	0c d0       	rcall	.+24     	; 0x3ac <__divsf3x>
 394:	e6 c0       	rjmp	.+460    	; 0x562 <__fp_round>
 396:	de d0       	rcall	.+444    	; 0x554 <__fp_pscB>
 398:	40 f0       	brcs	.+16     	; 0x3aa <__divsf3+0x18>
 39a:	d5 d0       	rcall	.+426    	; 0x546 <__fp_pscA>
 39c:	30 f0       	brcs	.+12     	; 0x3aa <__divsf3+0x18>
 39e:	21 f4       	brne	.+8      	; 0x3a8 <__divsf3+0x16>
 3a0:	5f 3f       	cpi	r21, 0xFF	; 255
 3a2:	19 f0       	breq	.+6      	; 0x3aa <__divsf3+0x18>
 3a4:	c7 c0       	rjmp	.+398    	; 0x534 <__fp_inf>
 3a6:	51 11       	cpse	r21, r1
 3a8:	10 c1       	rjmp	.+544    	; 0x5ca <__fp_szero>
 3aa:	ca c0       	rjmp	.+404    	; 0x540 <__fp_nan>

000003ac <__divsf3x>:
 3ac:	eb d0       	rcall	.+470    	; 0x584 <__fp_split3>
 3ae:	98 f3       	brcs	.-26     	; 0x396 <__divsf3+0x4>

000003b0 <__divsf3_pse>:
 3b0:	99 23       	and	r25, r25
 3b2:	c9 f3       	breq	.-14     	; 0x3a6 <__divsf3+0x14>
 3b4:	55 23       	and	r21, r21
 3b6:	b1 f3       	breq	.-20     	; 0x3a4 <__divsf3+0x12>
 3b8:	95 1b       	sub	r25, r21
 3ba:	55 0b       	sbc	r21, r21
 3bc:	bb 27       	eor	r27, r27
 3be:	aa 27       	eor	r26, r26
 3c0:	62 17       	cp	r22, r18
 3c2:	73 07       	cpc	r23, r19
 3c4:	84 07       	cpc	r24, r20
 3c6:	38 f0       	brcs	.+14     	; 0x3d6 <__divsf3_pse+0x26>
 3c8:	9f 5f       	subi	r25, 0xFF	; 255
 3ca:	5f 4f       	sbci	r21, 0xFF	; 255
 3cc:	22 0f       	add	r18, r18
 3ce:	33 1f       	adc	r19, r19
 3d0:	44 1f       	adc	r20, r20
 3d2:	aa 1f       	adc	r26, r26
 3d4:	a9 f3       	breq	.-22     	; 0x3c0 <__divsf3_pse+0x10>
 3d6:	33 d0       	rcall	.+102    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3d8:	0e 2e       	mov	r0, r30
 3da:	3a f0       	brmi	.+14     	; 0x3ea <__divsf3_pse+0x3a>
 3dc:	e0 e8       	ldi	r30, 0x80	; 128
 3de:	30 d0       	rcall	.+96     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3e0:	91 50       	subi	r25, 0x01	; 1
 3e2:	50 40       	sbci	r21, 0x00	; 0
 3e4:	e6 95       	lsr	r30
 3e6:	00 1c       	adc	r0, r0
 3e8:	ca f7       	brpl	.-14     	; 0x3dc <__divsf3_pse+0x2c>
 3ea:	29 d0       	rcall	.+82     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3ec:	fe 2f       	mov	r31, r30
 3ee:	27 d0       	rcall	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	88 1f       	adc	r24, r24
 3f6:	bb 1f       	adc	r27, r27
 3f8:	26 17       	cp	r18, r22
 3fa:	37 07       	cpc	r19, r23
 3fc:	48 07       	cpc	r20, r24
 3fe:	ab 07       	cpc	r26, r27
 400:	b0 e8       	ldi	r27, 0x80	; 128
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	bb 0b       	sbc	r27, r27
 406:	80 2d       	mov	r24, r0
 408:	bf 01       	movw	r22, r30
 40a:	ff 27       	eor	r31, r31
 40c:	93 58       	subi	r25, 0x83	; 131
 40e:	5f 4f       	sbci	r21, 0xFF	; 255
 410:	2a f0       	brmi	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 412:	9e 3f       	cpi	r25, 0xFE	; 254
 414:	51 05       	cpc	r21, r1
 416:	68 f0       	brcs	.+26     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 418:	8d c0       	rjmp	.+282    	; 0x534 <__fp_inf>
 41a:	d7 c0       	rjmp	.+430    	; 0x5ca <__fp_szero>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	ec f3       	brlt	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 420:	98 3e       	cpi	r25, 0xE8	; 232
 422:	dc f3       	brlt	.-10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f7 95       	ror	r31
 42e:	9f 5f       	subi	r25, 0xFF	; 255
 430:	c9 f7       	brne	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	88 0f       	add	r24, r24
 434:	91 1d       	adc	r25, r1
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
 43a:	97 f9       	bld	r25, 7
 43c:	08 95       	ret
 43e:	e1 e0       	ldi	r30, 0x01	; 1
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	88 1f       	adc	r24, r24
 446:	bb 1f       	adc	r27, r27
 448:	62 17       	cp	r22, r18
 44a:	73 07       	cpc	r23, r19
 44c:	84 07       	cpc	r24, r20
 44e:	ba 07       	cpc	r27, r26
 450:	20 f0       	brcs	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 452:	62 1b       	sub	r22, r18
 454:	73 0b       	sbc	r23, r19
 456:	84 0b       	sbc	r24, r20
 458:	ba 0b       	sbc	r27, r26
 45a:	ee 1f       	adc	r30, r30
 45c:	88 f7       	brcc	.-30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 45e:	e0 95       	com	r30
 460:	08 95       	ret

00000462 <__fixunssfsi>:
 462:	98 d0       	rcall	.+304    	; 0x594 <__fp_splitA>
 464:	88 f0       	brcs	.+34     	; 0x488 <__fixunssfsi+0x26>
 466:	9f 57       	subi	r25, 0x7F	; 127
 468:	90 f0       	brcs	.+36     	; 0x48e <__fixunssfsi+0x2c>
 46a:	b9 2f       	mov	r27, r25
 46c:	99 27       	eor	r25, r25
 46e:	b7 51       	subi	r27, 0x17	; 23
 470:	a0 f0       	brcs	.+40     	; 0x49a <__fixunssfsi+0x38>
 472:	d1 f0       	breq	.+52     	; 0x4a8 <__fixunssfsi+0x46>
 474:	66 0f       	add	r22, r22
 476:	77 1f       	adc	r23, r23
 478:	88 1f       	adc	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	1a f0       	brmi	.+6      	; 0x484 <__fixunssfsi+0x22>
 47e:	ba 95       	dec	r27
 480:	c9 f7       	brne	.-14     	; 0x474 <__fixunssfsi+0x12>
 482:	12 c0       	rjmp	.+36     	; 0x4a8 <__fixunssfsi+0x46>
 484:	b1 30       	cpi	r27, 0x01	; 1
 486:	81 f0       	breq	.+32     	; 0x4a8 <__fixunssfsi+0x46>
 488:	9f d0       	rcall	.+318    	; 0x5c8 <__fp_zero>
 48a:	b1 e0       	ldi	r27, 0x01	; 1
 48c:	08 95       	ret
 48e:	9c c0       	rjmp	.+312    	; 0x5c8 <__fp_zero>
 490:	67 2f       	mov	r22, r23
 492:	78 2f       	mov	r23, r24
 494:	88 27       	eor	r24, r24
 496:	b8 5f       	subi	r27, 0xF8	; 248
 498:	39 f0       	breq	.+14     	; 0x4a8 <__fixunssfsi+0x46>
 49a:	b9 3f       	cpi	r27, 0xF9	; 249
 49c:	cc f3       	brlt	.-14     	; 0x490 <__fixunssfsi+0x2e>
 49e:	86 95       	lsr	r24
 4a0:	77 95       	ror	r23
 4a2:	67 95       	ror	r22
 4a4:	b3 95       	inc	r27
 4a6:	d9 f7       	brne	.-10     	; 0x49e <__fixunssfsi+0x3c>
 4a8:	3e f4       	brtc	.+14     	; 0x4b8 <__fixunssfsi+0x56>
 4aa:	90 95       	com	r25
 4ac:	80 95       	com	r24
 4ae:	70 95       	com	r23
 4b0:	61 95       	neg	r22
 4b2:	7f 4f       	sbci	r23, 0xFF	; 255
 4b4:	8f 4f       	sbci	r24, 0xFF	; 255
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	08 95       	ret

000004ba <__floatunsisf>:
 4ba:	e8 94       	clt
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__floatsisf+0x12>

000004be <__floatsisf>:
 4be:	97 fb       	bst	r25, 7
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__floatsisf+0x12>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	99 23       	and	r25, r25
 4d2:	a9 f0       	breq	.+42     	; 0x4fe <__floatsisf+0x40>
 4d4:	f9 2f       	mov	r31, r25
 4d6:	96 e9       	ldi	r25, 0x96	; 150
 4d8:	bb 27       	eor	r27, r27
 4da:	93 95       	inc	r25
 4dc:	f6 95       	lsr	r31
 4de:	87 95       	ror	r24
 4e0:	77 95       	ror	r23
 4e2:	67 95       	ror	r22
 4e4:	b7 95       	ror	r27
 4e6:	f1 11       	cpse	r31, r1
 4e8:	f8 cf       	rjmp	.-16     	; 0x4da <__floatsisf+0x1c>
 4ea:	fa f4       	brpl	.+62     	; 0x52a <__floatsisf+0x6c>
 4ec:	bb 0f       	add	r27, r27
 4ee:	11 f4       	brne	.+4      	; 0x4f4 <__floatsisf+0x36>
 4f0:	60 ff       	sbrs	r22, 0
 4f2:	1b c0       	rjmp	.+54     	; 0x52a <__floatsisf+0x6c>
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8f 4f       	sbci	r24, 0xFF	; 255
 4fa:	9f 4f       	sbci	r25, 0xFF	; 255
 4fc:	16 c0       	rjmp	.+44     	; 0x52a <__floatsisf+0x6c>
 4fe:	88 23       	and	r24, r24
 500:	11 f0       	breq	.+4      	; 0x506 <__floatsisf+0x48>
 502:	96 e9       	ldi	r25, 0x96	; 150
 504:	11 c0       	rjmp	.+34     	; 0x528 <__floatsisf+0x6a>
 506:	77 23       	and	r23, r23
 508:	21 f0       	breq	.+8      	; 0x512 <__floatsisf+0x54>
 50a:	9e e8       	ldi	r25, 0x8E	; 142
 50c:	87 2f       	mov	r24, r23
 50e:	76 2f       	mov	r23, r22
 510:	05 c0       	rjmp	.+10     	; 0x51c <__floatsisf+0x5e>
 512:	66 23       	and	r22, r22
 514:	71 f0       	breq	.+28     	; 0x532 <__floatsisf+0x74>
 516:	96 e8       	ldi	r25, 0x86	; 134
 518:	86 2f       	mov	r24, r22
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	2a f0       	brmi	.+10     	; 0x52a <__floatsisf+0x6c>
 520:	9a 95       	dec	r25
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	da f7       	brpl	.-10     	; 0x520 <__floatsisf+0x62>
 52a:	88 0f       	add	r24, r24
 52c:	96 95       	lsr	r25
 52e:	87 95       	ror	r24
 530:	97 f9       	bld	r25, 7
 532:	08 95       	ret

00000534 <__fp_inf>:
 534:	97 f9       	bld	r25, 7
 536:	9f 67       	ori	r25, 0x7F	; 127
 538:	80 e8       	ldi	r24, 0x80	; 128
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	08 95       	ret

00000540 <__fp_nan>:
 540:	9f ef       	ldi	r25, 0xFF	; 255
 542:	80 ec       	ldi	r24, 0xC0	; 192
 544:	08 95       	ret

00000546 <__fp_pscA>:
 546:	00 24       	eor	r0, r0
 548:	0a 94       	dec	r0
 54a:	16 16       	cp	r1, r22
 54c:	17 06       	cpc	r1, r23
 54e:	18 06       	cpc	r1, r24
 550:	09 06       	cpc	r0, r25
 552:	08 95       	ret

00000554 <__fp_pscB>:
 554:	00 24       	eor	r0, r0
 556:	0a 94       	dec	r0
 558:	12 16       	cp	r1, r18
 55a:	13 06       	cpc	r1, r19
 55c:	14 06       	cpc	r1, r20
 55e:	05 06       	cpc	r0, r21
 560:	08 95       	ret

00000562 <__fp_round>:
 562:	09 2e       	mov	r0, r25
 564:	03 94       	inc	r0
 566:	00 0c       	add	r0, r0
 568:	11 f4       	brne	.+4      	; 0x56e <__fp_round+0xc>
 56a:	88 23       	and	r24, r24
 56c:	52 f0       	brmi	.+20     	; 0x582 <__fp_round+0x20>
 56e:	bb 0f       	add	r27, r27
 570:	40 f4       	brcc	.+16     	; 0x582 <__fp_round+0x20>
 572:	bf 2b       	or	r27, r31
 574:	11 f4       	brne	.+4      	; 0x57a <__fp_round+0x18>
 576:	60 ff       	sbrs	r22, 0
 578:	04 c0       	rjmp	.+8      	; 0x582 <__fp_round+0x20>
 57a:	6f 5f       	subi	r22, 0xFF	; 255
 57c:	7f 4f       	sbci	r23, 0xFF	; 255
 57e:	8f 4f       	sbci	r24, 0xFF	; 255
 580:	9f 4f       	sbci	r25, 0xFF	; 255
 582:	08 95       	ret

00000584 <__fp_split3>:
 584:	57 fd       	sbrc	r21, 7
 586:	90 58       	subi	r25, 0x80	; 128
 588:	44 0f       	add	r20, r20
 58a:	55 1f       	adc	r21, r21
 58c:	59 f0       	breq	.+22     	; 0x5a4 <__fp_splitA+0x10>
 58e:	5f 3f       	cpi	r21, 0xFF	; 255
 590:	71 f0       	breq	.+28     	; 0x5ae <__fp_splitA+0x1a>
 592:	47 95       	ror	r20

00000594 <__fp_splitA>:
 594:	88 0f       	add	r24, r24
 596:	97 fb       	bst	r25, 7
 598:	99 1f       	adc	r25, r25
 59a:	61 f0       	breq	.+24     	; 0x5b4 <__fp_splitA+0x20>
 59c:	9f 3f       	cpi	r25, 0xFF	; 255
 59e:	79 f0       	breq	.+30     	; 0x5be <__fp_splitA+0x2a>
 5a0:	87 95       	ror	r24
 5a2:	08 95       	ret
 5a4:	12 16       	cp	r1, r18
 5a6:	13 06       	cpc	r1, r19
 5a8:	14 06       	cpc	r1, r20
 5aa:	55 1f       	adc	r21, r21
 5ac:	f2 cf       	rjmp	.-28     	; 0x592 <__fp_split3+0xe>
 5ae:	46 95       	lsr	r20
 5b0:	f1 df       	rcall	.-30     	; 0x594 <__fp_splitA>
 5b2:	08 c0       	rjmp	.+16     	; 0x5c4 <__fp_splitA+0x30>
 5b4:	16 16       	cp	r1, r22
 5b6:	17 06       	cpc	r1, r23
 5b8:	18 06       	cpc	r1, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	f1 cf       	rjmp	.-30     	; 0x5a0 <__fp_splitA+0xc>
 5be:	86 95       	lsr	r24
 5c0:	71 05       	cpc	r23, r1
 5c2:	61 05       	cpc	r22, r1
 5c4:	08 94       	sec
 5c6:	08 95       	ret

000005c8 <__fp_zero>:
 5c8:	e8 94       	clt

000005ca <__fp_szero>:
 5ca:	bb 27       	eor	r27, r27
 5cc:	66 27       	eor	r22, r22
 5ce:	77 27       	eor	r23, r23
 5d0:	cb 01       	movw	r24, r22
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret

000005d6 <__mulsf3>:
 5d6:	0b d0       	rcall	.+22     	; 0x5ee <__mulsf3x>
 5d8:	c4 cf       	rjmp	.-120    	; 0x562 <__fp_round>
 5da:	b5 df       	rcall	.-150    	; 0x546 <__fp_pscA>
 5dc:	28 f0       	brcs	.+10     	; 0x5e8 <__mulsf3+0x12>
 5de:	ba df       	rcall	.-140    	; 0x554 <__fp_pscB>
 5e0:	18 f0       	brcs	.+6      	; 0x5e8 <__mulsf3+0x12>
 5e2:	95 23       	and	r25, r21
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__mulsf3+0x12>
 5e6:	a6 cf       	rjmp	.-180    	; 0x534 <__fp_inf>
 5e8:	ab cf       	rjmp	.-170    	; 0x540 <__fp_nan>
 5ea:	11 24       	eor	r1, r1
 5ec:	ee cf       	rjmp	.-36     	; 0x5ca <__fp_szero>

000005ee <__mulsf3x>:
 5ee:	ca df       	rcall	.-108    	; 0x584 <__fp_split3>
 5f0:	a0 f3       	brcs	.-24     	; 0x5da <__mulsf3+0x4>

000005f2 <__mulsf3_pse>:
 5f2:	95 9f       	mul	r25, r21
 5f4:	d1 f3       	breq	.-12     	; 0x5ea <__mulsf3+0x14>
 5f6:	95 0f       	add	r25, r21
 5f8:	50 e0       	ldi	r21, 0x00	; 0
 5fa:	55 1f       	adc	r21, r21
 5fc:	62 9f       	mul	r22, r18
 5fe:	f0 01       	movw	r30, r0
 600:	72 9f       	mul	r23, r18
 602:	bb 27       	eor	r27, r27
 604:	f0 0d       	add	r31, r0
 606:	b1 1d       	adc	r27, r1
 608:	63 9f       	mul	r22, r19
 60a:	aa 27       	eor	r26, r26
 60c:	f0 0d       	add	r31, r0
 60e:	b1 1d       	adc	r27, r1
 610:	aa 1f       	adc	r26, r26
 612:	64 9f       	mul	r22, r20
 614:	66 27       	eor	r22, r22
 616:	b0 0d       	add	r27, r0
 618:	a1 1d       	adc	r26, r1
 61a:	66 1f       	adc	r22, r22
 61c:	82 9f       	mul	r24, r18
 61e:	22 27       	eor	r18, r18
 620:	b0 0d       	add	r27, r0
 622:	a1 1d       	adc	r26, r1
 624:	62 1f       	adc	r22, r18
 626:	73 9f       	mul	r23, r19
 628:	b0 0d       	add	r27, r0
 62a:	a1 1d       	adc	r26, r1
 62c:	62 1f       	adc	r22, r18
 62e:	83 9f       	mul	r24, r19
 630:	a0 0d       	add	r26, r0
 632:	61 1d       	adc	r22, r1
 634:	22 1f       	adc	r18, r18
 636:	74 9f       	mul	r23, r20
 638:	33 27       	eor	r19, r19
 63a:	a0 0d       	add	r26, r0
 63c:	61 1d       	adc	r22, r1
 63e:	23 1f       	adc	r18, r19
 640:	84 9f       	mul	r24, r20
 642:	60 0d       	add	r22, r0
 644:	21 1d       	adc	r18, r1
 646:	82 2f       	mov	r24, r18
 648:	76 2f       	mov	r23, r22
 64a:	6a 2f       	mov	r22, r26
 64c:	11 24       	eor	r1, r1
 64e:	9f 57       	subi	r25, 0x7F	; 127
 650:	50 40       	sbci	r21, 0x00	; 0
 652:	8a f0       	brmi	.+34     	; 0x676 <__mulsf3_pse+0x84>
 654:	e1 f0       	breq	.+56     	; 0x68e <__mulsf3_pse+0x9c>
 656:	88 23       	and	r24, r24
 658:	4a f0       	brmi	.+18     	; 0x66c <__mulsf3_pse+0x7a>
 65a:	ee 0f       	add	r30, r30
 65c:	ff 1f       	adc	r31, r31
 65e:	bb 1f       	adc	r27, r27
 660:	66 1f       	adc	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	91 50       	subi	r25, 0x01	; 1
 668:	50 40       	sbci	r21, 0x00	; 0
 66a:	a9 f7       	brne	.-22     	; 0x656 <__mulsf3_pse+0x64>
 66c:	9e 3f       	cpi	r25, 0xFE	; 254
 66e:	51 05       	cpc	r21, r1
 670:	70 f0       	brcs	.+28     	; 0x68e <__mulsf3_pse+0x9c>
 672:	60 cf       	rjmp	.-320    	; 0x534 <__fp_inf>
 674:	aa cf       	rjmp	.-172    	; 0x5ca <__fp_szero>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	ec f3       	brlt	.-6      	; 0x674 <__mulsf3_pse+0x82>
 67a:	98 3e       	cpi	r25, 0xE8	; 232
 67c:	dc f3       	brlt	.-10     	; 0x674 <__mulsf3_pse+0x82>
 67e:	86 95       	lsr	r24
 680:	77 95       	ror	r23
 682:	67 95       	ror	r22
 684:	b7 95       	ror	r27
 686:	f7 95       	ror	r31
 688:	e7 95       	ror	r30
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	c1 f7       	brne	.-16     	; 0x67e <__mulsf3_pse+0x8c>
 68e:	fe 2b       	or	r31, r30
 690:	88 0f       	add	r24, r24
 692:	91 1d       	adc	r25, r1
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret

0000069c <printf>:
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	cd b7       	in	r28, 0x3d	; 61
 6a2:	de b7       	in	r29, 0x3e	; 62
 6a4:	ae 01       	movw	r20, r28
 6a6:	4b 5f       	subi	r20, 0xFB	; 251
 6a8:	5f 4f       	sbci	r21, 0xFF	; 255
 6aa:	fa 01       	movw	r30, r20
 6ac:	61 91       	ld	r22, Z+
 6ae:	71 91       	ld	r23, Z+
 6b0:	af 01       	movw	r20, r30
 6b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <__iob+0x2>
 6b6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <__iob+0x3>
 6ba:	31 d0       	rcall	.+98     	; 0x71e <vfprintf>
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <sprintf>:
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
 6ce:	2e 97       	sbiw	r28, 0x0e	; 14
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	f8 94       	cli
 6d4:	de bf       	out	0x3e, r29	; 62
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	cd bf       	out	0x3d, r28	; 61
 6da:	0d 89       	ldd	r16, Y+21	; 0x15
 6dc:	1e 89       	ldd	r17, Y+22	; 0x16
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	8c 83       	std	Y+4, r24	; 0x04
 6e2:	1a 83       	std	Y+2, r17	; 0x02
 6e4:	09 83       	std	Y+1, r16	; 0x01
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	9f e7       	ldi	r25, 0x7F	; 127
 6ea:	9e 83       	std	Y+6, r25	; 0x06
 6ec:	8d 83       	std	Y+5, r24	; 0x05
 6ee:	ae 01       	movw	r20, r28
 6f0:	47 5e       	subi	r20, 0xE7	; 231
 6f2:	5f 4f       	sbci	r21, 0xFF	; 255
 6f4:	6f 89       	ldd	r22, Y+23	; 0x17
 6f6:	78 8d       	ldd	r23, Y+24	; 0x18
 6f8:	ce 01       	movw	r24, r28
 6fa:	01 96       	adiw	r24, 0x01	; 1
 6fc:	10 d0       	rcall	.+32     	; 0x71e <vfprintf>
 6fe:	ef 81       	ldd	r30, Y+7	; 0x07
 700:	f8 85       	ldd	r31, Y+8	; 0x08
 702:	e0 0f       	add	r30, r16
 704:	f1 1f       	adc	r31, r17
 706:	10 82       	st	Z, r1
 708:	2e 96       	adiw	r28, 0x0e	; 14
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	08 95       	ret

0000071e <vfprintf>:
 71e:	2f 92       	push	r2
 720:	3f 92       	push	r3
 722:	4f 92       	push	r4
 724:	5f 92       	push	r5
 726:	6f 92       	push	r6
 728:	7f 92       	push	r7
 72a:	8f 92       	push	r8
 72c:	9f 92       	push	r9
 72e:	af 92       	push	r10
 730:	bf 92       	push	r11
 732:	cf 92       	push	r12
 734:	df 92       	push	r13
 736:	ef 92       	push	r14
 738:	ff 92       	push	r15
 73a:	0f 93       	push	r16
 73c:	1f 93       	push	r17
 73e:	cf 93       	push	r28
 740:	df 93       	push	r29
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
 746:	2b 97       	sbiw	r28, 0x0b	; 11
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
 752:	6c 01       	movw	r12, r24
 754:	7b 01       	movw	r14, r22
 756:	8a 01       	movw	r16, r20
 758:	fc 01       	movw	r30, r24
 75a:	17 82       	std	Z+7, r1	; 0x07
 75c:	16 82       	std	Z+6, r1	; 0x06
 75e:	83 81       	ldd	r24, Z+3	; 0x03
 760:	81 ff       	sbrs	r24, 1
 762:	bf c1       	rjmp	.+894    	; 0xae2 <vfprintf+0x3c4>
 764:	ce 01       	movw	r24, r28
 766:	01 96       	adiw	r24, 0x01	; 1
 768:	3c 01       	movw	r6, r24
 76a:	f6 01       	movw	r30, r12
 76c:	93 81       	ldd	r25, Z+3	; 0x03
 76e:	f7 01       	movw	r30, r14
 770:	93 fd       	sbrc	r25, 3
 772:	85 91       	lpm	r24, Z+
 774:	93 ff       	sbrs	r25, 3
 776:	81 91       	ld	r24, Z+
 778:	7f 01       	movw	r14, r30
 77a:	88 23       	and	r24, r24
 77c:	09 f4       	brne	.+2      	; 0x780 <vfprintf+0x62>
 77e:	ad c1       	rjmp	.+858    	; 0xada <vfprintf+0x3bc>
 780:	85 32       	cpi	r24, 0x25	; 37
 782:	39 f4       	brne	.+14     	; 0x792 <vfprintf+0x74>
 784:	93 fd       	sbrc	r25, 3
 786:	85 91       	lpm	r24, Z+
 788:	93 ff       	sbrs	r25, 3
 78a:	81 91       	ld	r24, Z+
 78c:	7f 01       	movw	r14, r30
 78e:	85 32       	cpi	r24, 0x25	; 37
 790:	21 f4       	brne	.+8      	; 0x79a <vfprintf+0x7c>
 792:	b6 01       	movw	r22, r12
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	d6 d1       	rcall	.+940    	; 0xb44 <fputc>
 798:	e8 cf       	rjmp	.-48     	; 0x76a <vfprintf+0x4c>
 79a:	91 2c       	mov	r9, r1
 79c:	21 2c       	mov	r2, r1
 79e:	31 2c       	mov	r3, r1
 7a0:	ff e1       	ldi	r31, 0x1F	; 31
 7a2:	f3 15       	cp	r31, r3
 7a4:	d8 f0       	brcs	.+54     	; 0x7dc <vfprintf+0xbe>
 7a6:	8b 32       	cpi	r24, 0x2B	; 43
 7a8:	79 f0       	breq	.+30     	; 0x7c8 <vfprintf+0xaa>
 7aa:	38 f4       	brcc	.+14     	; 0x7ba <vfprintf+0x9c>
 7ac:	80 32       	cpi	r24, 0x20	; 32
 7ae:	79 f0       	breq	.+30     	; 0x7ce <vfprintf+0xb0>
 7b0:	83 32       	cpi	r24, 0x23	; 35
 7b2:	a1 f4       	brne	.+40     	; 0x7dc <vfprintf+0xbe>
 7b4:	23 2d       	mov	r18, r3
 7b6:	20 61       	ori	r18, 0x10	; 16
 7b8:	1d c0       	rjmp	.+58     	; 0x7f4 <vfprintf+0xd6>
 7ba:	8d 32       	cpi	r24, 0x2D	; 45
 7bc:	61 f0       	breq	.+24     	; 0x7d6 <vfprintf+0xb8>
 7be:	80 33       	cpi	r24, 0x30	; 48
 7c0:	69 f4       	brne	.+26     	; 0x7dc <vfprintf+0xbe>
 7c2:	23 2d       	mov	r18, r3
 7c4:	21 60       	ori	r18, 0x01	; 1
 7c6:	16 c0       	rjmp	.+44     	; 0x7f4 <vfprintf+0xd6>
 7c8:	83 2d       	mov	r24, r3
 7ca:	82 60       	ori	r24, 0x02	; 2
 7cc:	38 2e       	mov	r3, r24
 7ce:	e3 2d       	mov	r30, r3
 7d0:	e4 60       	ori	r30, 0x04	; 4
 7d2:	3e 2e       	mov	r3, r30
 7d4:	2a c0       	rjmp	.+84     	; 0x82a <vfprintf+0x10c>
 7d6:	f3 2d       	mov	r31, r3
 7d8:	f8 60       	ori	r31, 0x08	; 8
 7da:	1d c0       	rjmp	.+58     	; 0x816 <vfprintf+0xf8>
 7dc:	37 fc       	sbrc	r3, 7
 7de:	2d c0       	rjmp	.+90     	; 0x83a <vfprintf+0x11c>
 7e0:	20 ed       	ldi	r18, 0xD0	; 208
 7e2:	28 0f       	add	r18, r24
 7e4:	2a 30       	cpi	r18, 0x0A	; 10
 7e6:	40 f0       	brcs	.+16     	; 0x7f8 <vfprintf+0xda>
 7e8:	8e 32       	cpi	r24, 0x2E	; 46
 7ea:	b9 f4       	brne	.+46     	; 0x81a <vfprintf+0xfc>
 7ec:	36 fc       	sbrc	r3, 6
 7ee:	75 c1       	rjmp	.+746    	; 0xada <vfprintf+0x3bc>
 7f0:	23 2d       	mov	r18, r3
 7f2:	20 64       	ori	r18, 0x40	; 64
 7f4:	32 2e       	mov	r3, r18
 7f6:	19 c0       	rjmp	.+50     	; 0x82a <vfprintf+0x10c>
 7f8:	36 fe       	sbrs	r3, 6
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0xea>
 7fc:	8a e0       	ldi	r24, 0x0A	; 10
 7fe:	98 9e       	mul	r9, r24
 800:	20 0d       	add	r18, r0
 802:	11 24       	eor	r1, r1
 804:	92 2e       	mov	r9, r18
 806:	11 c0       	rjmp	.+34     	; 0x82a <vfprintf+0x10c>
 808:	ea e0       	ldi	r30, 0x0A	; 10
 80a:	2e 9e       	mul	r2, r30
 80c:	20 0d       	add	r18, r0
 80e:	11 24       	eor	r1, r1
 810:	22 2e       	mov	r2, r18
 812:	f3 2d       	mov	r31, r3
 814:	f0 62       	ori	r31, 0x20	; 32
 816:	3f 2e       	mov	r3, r31
 818:	08 c0       	rjmp	.+16     	; 0x82a <vfprintf+0x10c>
 81a:	8c 36       	cpi	r24, 0x6C	; 108
 81c:	21 f4       	brne	.+8      	; 0x826 <vfprintf+0x108>
 81e:	83 2d       	mov	r24, r3
 820:	80 68       	ori	r24, 0x80	; 128
 822:	38 2e       	mov	r3, r24
 824:	02 c0       	rjmp	.+4      	; 0x82a <vfprintf+0x10c>
 826:	88 36       	cpi	r24, 0x68	; 104
 828:	41 f4       	brne	.+16     	; 0x83a <vfprintf+0x11c>
 82a:	f7 01       	movw	r30, r14
 82c:	93 fd       	sbrc	r25, 3
 82e:	85 91       	lpm	r24, Z+
 830:	93 ff       	sbrs	r25, 3
 832:	81 91       	ld	r24, Z+
 834:	7f 01       	movw	r14, r30
 836:	81 11       	cpse	r24, r1
 838:	b3 cf       	rjmp	.-154    	; 0x7a0 <vfprintf+0x82>
 83a:	98 2f       	mov	r25, r24
 83c:	9f 7d       	andi	r25, 0xDF	; 223
 83e:	95 54       	subi	r25, 0x45	; 69
 840:	93 30       	cpi	r25, 0x03	; 3
 842:	28 f4       	brcc	.+10     	; 0x84e <vfprintf+0x130>
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	9f e3       	ldi	r25, 0x3F	; 63
 84a:	99 83       	std	Y+1, r25	; 0x01
 84c:	0d c0       	rjmp	.+26     	; 0x868 <vfprintf+0x14a>
 84e:	83 36       	cpi	r24, 0x63	; 99
 850:	31 f0       	breq	.+12     	; 0x85e <vfprintf+0x140>
 852:	83 37       	cpi	r24, 0x73	; 115
 854:	71 f0       	breq	.+28     	; 0x872 <vfprintf+0x154>
 856:	83 35       	cpi	r24, 0x53	; 83
 858:	09 f0       	breq	.+2      	; 0x85c <vfprintf+0x13e>
 85a:	55 c0       	rjmp	.+170    	; 0x906 <vfprintf+0x1e8>
 85c:	20 c0       	rjmp	.+64     	; 0x89e <vfprintf+0x180>
 85e:	f8 01       	movw	r30, r16
 860:	80 81       	ld	r24, Z
 862:	89 83       	std	Y+1, r24	; 0x01
 864:	0e 5f       	subi	r16, 0xFE	; 254
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	88 24       	eor	r8, r8
 86a:	83 94       	inc	r8
 86c:	91 2c       	mov	r9, r1
 86e:	53 01       	movw	r10, r6
 870:	12 c0       	rjmp	.+36     	; 0x896 <vfprintf+0x178>
 872:	28 01       	movw	r4, r16
 874:	f2 e0       	ldi	r31, 0x02	; 2
 876:	4f 0e       	add	r4, r31
 878:	51 1c       	adc	r5, r1
 87a:	f8 01       	movw	r30, r16
 87c:	a0 80       	ld	r10, Z
 87e:	b1 80       	ldd	r11, Z+1	; 0x01
 880:	36 fe       	sbrs	r3, 6
 882:	03 c0       	rjmp	.+6      	; 0x88a <vfprintf+0x16c>
 884:	69 2d       	mov	r22, r9
 886:	70 e0       	ldi	r23, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <vfprintf+0x170>
 88a:	6f ef       	ldi	r22, 0xFF	; 255
 88c:	7f ef       	ldi	r23, 0xFF	; 255
 88e:	c5 01       	movw	r24, r10
 890:	4e d1       	rcall	.+668    	; 0xb2e <strnlen>
 892:	4c 01       	movw	r8, r24
 894:	82 01       	movw	r16, r4
 896:	f3 2d       	mov	r31, r3
 898:	ff 77       	andi	r31, 0x7F	; 127
 89a:	3f 2e       	mov	r3, r31
 89c:	15 c0       	rjmp	.+42     	; 0x8c8 <vfprintf+0x1aa>
 89e:	28 01       	movw	r4, r16
 8a0:	22 e0       	ldi	r18, 0x02	; 2
 8a2:	42 0e       	add	r4, r18
 8a4:	51 1c       	adc	r5, r1
 8a6:	f8 01       	movw	r30, r16
 8a8:	a0 80       	ld	r10, Z
 8aa:	b1 80       	ldd	r11, Z+1	; 0x01
 8ac:	36 fe       	sbrs	r3, 6
 8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <vfprintf+0x198>
 8b0:	69 2d       	mov	r22, r9
 8b2:	70 e0       	ldi	r23, 0x00	; 0
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <vfprintf+0x19c>
 8b6:	6f ef       	ldi	r22, 0xFF	; 255
 8b8:	7f ef       	ldi	r23, 0xFF	; 255
 8ba:	c5 01       	movw	r24, r10
 8bc:	2d d1       	rcall	.+602    	; 0xb18 <strnlen_P>
 8be:	4c 01       	movw	r8, r24
 8c0:	f3 2d       	mov	r31, r3
 8c2:	f0 68       	ori	r31, 0x80	; 128
 8c4:	3f 2e       	mov	r3, r31
 8c6:	82 01       	movw	r16, r4
 8c8:	33 fc       	sbrc	r3, 3
 8ca:	19 c0       	rjmp	.+50     	; 0x8fe <vfprintf+0x1e0>
 8cc:	82 2d       	mov	r24, r2
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	88 16       	cp	r8, r24
 8d2:	99 06       	cpc	r9, r25
 8d4:	a0 f4       	brcc	.+40     	; 0x8fe <vfprintf+0x1e0>
 8d6:	b6 01       	movw	r22, r12
 8d8:	80 e2       	ldi	r24, 0x20	; 32
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	33 d1       	rcall	.+614    	; 0xb44 <fputc>
 8de:	2a 94       	dec	r2
 8e0:	f5 cf       	rjmp	.-22     	; 0x8cc <vfprintf+0x1ae>
 8e2:	f5 01       	movw	r30, r10
 8e4:	37 fc       	sbrc	r3, 7
 8e6:	85 91       	lpm	r24, Z+
 8e8:	37 fe       	sbrs	r3, 7
 8ea:	81 91       	ld	r24, Z+
 8ec:	5f 01       	movw	r10, r30
 8ee:	b6 01       	movw	r22, r12
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	28 d1       	rcall	.+592    	; 0xb44 <fputc>
 8f4:	21 10       	cpse	r2, r1
 8f6:	2a 94       	dec	r2
 8f8:	21 e0       	ldi	r18, 0x01	; 1
 8fa:	82 1a       	sub	r8, r18
 8fc:	91 08       	sbc	r9, r1
 8fe:	81 14       	cp	r8, r1
 900:	91 04       	cpc	r9, r1
 902:	79 f7       	brne	.-34     	; 0x8e2 <vfprintf+0x1c4>
 904:	e1 c0       	rjmp	.+450    	; 0xac8 <vfprintf+0x3aa>
 906:	84 36       	cpi	r24, 0x64	; 100
 908:	11 f0       	breq	.+4      	; 0x90e <vfprintf+0x1f0>
 90a:	89 36       	cpi	r24, 0x69	; 105
 90c:	39 f5       	brne	.+78     	; 0x95c <vfprintf+0x23e>
 90e:	f8 01       	movw	r30, r16
 910:	37 fe       	sbrs	r3, 7
 912:	07 c0       	rjmp	.+14     	; 0x922 <vfprintf+0x204>
 914:	60 81       	ld	r22, Z
 916:	71 81       	ldd	r23, Z+1	; 0x01
 918:	82 81       	ldd	r24, Z+2	; 0x02
 91a:	93 81       	ldd	r25, Z+3	; 0x03
 91c:	0c 5f       	subi	r16, 0xFC	; 252
 91e:	1f 4f       	sbci	r17, 0xFF	; 255
 920:	08 c0       	rjmp	.+16     	; 0x932 <vfprintf+0x214>
 922:	60 81       	ld	r22, Z
 924:	71 81       	ldd	r23, Z+1	; 0x01
 926:	07 2e       	mov	r0, r23
 928:	00 0c       	add	r0, r0
 92a:	88 0b       	sbc	r24, r24
 92c:	99 0b       	sbc	r25, r25
 92e:	0e 5f       	subi	r16, 0xFE	; 254
 930:	1f 4f       	sbci	r17, 0xFF	; 255
 932:	f3 2d       	mov	r31, r3
 934:	ff 76       	andi	r31, 0x6F	; 111
 936:	3f 2e       	mov	r3, r31
 938:	97 ff       	sbrs	r25, 7
 93a:	09 c0       	rjmp	.+18     	; 0x94e <vfprintf+0x230>
 93c:	90 95       	com	r25
 93e:	80 95       	com	r24
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	8f 4f       	sbci	r24, 0xFF	; 255
 948:	9f 4f       	sbci	r25, 0xFF	; 255
 94a:	f0 68       	ori	r31, 0x80	; 128
 94c:	3f 2e       	mov	r3, r31
 94e:	2a e0       	ldi	r18, 0x0A	; 10
 950:	30 e0       	ldi	r19, 0x00	; 0
 952:	a3 01       	movw	r20, r6
 954:	33 d1       	rcall	.+614    	; 0xbbc <__ultoa_invert>
 956:	88 2e       	mov	r8, r24
 958:	86 18       	sub	r8, r6
 95a:	44 c0       	rjmp	.+136    	; 0x9e4 <vfprintf+0x2c6>
 95c:	85 37       	cpi	r24, 0x75	; 117
 95e:	31 f4       	brne	.+12     	; 0x96c <vfprintf+0x24e>
 960:	23 2d       	mov	r18, r3
 962:	2f 7e       	andi	r18, 0xEF	; 239
 964:	b2 2e       	mov	r11, r18
 966:	2a e0       	ldi	r18, 0x0A	; 10
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	25 c0       	rjmp	.+74     	; 0x9b6 <vfprintf+0x298>
 96c:	93 2d       	mov	r25, r3
 96e:	99 7f       	andi	r25, 0xF9	; 249
 970:	b9 2e       	mov	r11, r25
 972:	8f 36       	cpi	r24, 0x6F	; 111
 974:	c1 f0       	breq	.+48     	; 0x9a6 <vfprintf+0x288>
 976:	18 f4       	brcc	.+6      	; 0x97e <vfprintf+0x260>
 978:	88 35       	cpi	r24, 0x58	; 88
 97a:	79 f0       	breq	.+30     	; 0x99a <vfprintf+0x27c>
 97c:	ae c0       	rjmp	.+348    	; 0xada <vfprintf+0x3bc>
 97e:	80 37       	cpi	r24, 0x70	; 112
 980:	19 f0       	breq	.+6      	; 0x988 <vfprintf+0x26a>
 982:	88 37       	cpi	r24, 0x78	; 120
 984:	21 f0       	breq	.+8      	; 0x98e <vfprintf+0x270>
 986:	a9 c0       	rjmp	.+338    	; 0xada <vfprintf+0x3bc>
 988:	e9 2f       	mov	r30, r25
 98a:	e0 61       	ori	r30, 0x10	; 16
 98c:	be 2e       	mov	r11, r30
 98e:	b4 fe       	sbrs	r11, 4
 990:	0d c0       	rjmp	.+26     	; 0x9ac <vfprintf+0x28e>
 992:	fb 2d       	mov	r31, r11
 994:	f4 60       	ori	r31, 0x04	; 4
 996:	bf 2e       	mov	r11, r31
 998:	09 c0       	rjmp	.+18     	; 0x9ac <vfprintf+0x28e>
 99a:	34 fe       	sbrs	r3, 4
 99c:	0a c0       	rjmp	.+20     	; 0x9b2 <vfprintf+0x294>
 99e:	29 2f       	mov	r18, r25
 9a0:	26 60       	ori	r18, 0x06	; 6
 9a2:	b2 2e       	mov	r11, r18
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <vfprintf+0x294>
 9a6:	28 e0       	ldi	r18, 0x08	; 8
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	05 c0       	rjmp	.+10     	; 0x9b6 <vfprintf+0x298>
 9ac:	20 e1       	ldi	r18, 0x10	; 16
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <vfprintf+0x298>
 9b2:	20 e1       	ldi	r18, 0x10	; 16
 9b4:	32 e0       	ldi	r19, 0x02	; 2
 9b6:	f8 01       	movw	r30, r16
 9b8:	b7 fe       	sbrs	r11, 7
 9ba:	07 c0       	rjmp	.+14     	; 0x9ca <vfprintf+0x2ac>
 9bc:	60 81       	ld	r22, Z
 9be:	71 81       	ldd	r23, Z+1	; 0x01
 9c0:	82 81       	ldd	r24, Z+2	; 0x02
 9c2:	93 81       	ldd	r25, Z+3	; 0x03
 9c4:	0c 5f       	subi	r16, 0xFC	; 252
 9c6:	1f 4f       	sbci	r17, 0xFF	; 255
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <vfprintf+0x2b8>
 9ca:	60 81       	ld	r22, Z
 9cc:	71 81       	ldd	r23, Z+1	; 0x01
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	0e 5f       	subi	r16, 0xFE	; 254
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	a3 01       	movw	r20, r6
 9d8:	f1 d0       	rcall	.+482    	; 0xbbc <__ultoa_invert>
 9da:	88 2e       	mov	r8, r24
 9dc:	86 18       	sub	r8, r6
 9de:	fb 2d       	mov	r31, r11
 9e0:	ff 77       	andi	r31, 0x7F	; 127
 9e2:	3f 2e       	mov	r3, r31
 9e4:	36 fe       	sbrs	r3, 6
 9e6:	0d c0       	rjmp	.+26     	; 0xa02 <vfprintf+0x2e4>
 9e8:	23 2d       	mov	r18, r3
 9ea:	2e 7f       	andi	r18, 0xFE	; 254
 9ec:	a2 2e       	mov	r10, r18
 9ee:	89 14       	cp	r8, r9
 9f0:	58 f4       	brcc	.+22     	; 0xa08 <vfprintf+0x2ea>
 9f2:	34 fe       	sbrs	r3, 4
 9f4:	0b c0       	rjmp	.+22     	; 0xa0c <vfprintf+0x2ee>
 9f6:	32 fc       	sbrc	r3, 2
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <vfprintf+0x2ee>
 9fa:	83 2d       	mov	r24, r3
 9fc:	8e 7e       	andi	r24, 0xEE	; 238
 9fe:	a8 2e       	mov	r10, r24
 a00:	05 c0       	rjmp	.+10     	; 0xa0c <vfprintf+0x2ee>
 a02:	b8 2c       	mov	r11, r8
 a04:	a3 2c       	mov	r10, r3
 a06:	03 c0       	rjmp	.+6      	; 0xa0e <vfprintf+0x2f0>
 a08:	b8 2c       	mov	r11, r8
 a0a:	01 c0       	rjmp	.+2      	; 0xa0e <vfprintf+0x2f0>
 a0c:	b9 2c       	mov	r11, r9
 a0e:	a4 fe       	sbrs	r10, 4
 a10:	0f c0       	rjmp	.+30     	; 0xa30 <vfprintf+0x312>
 a12:	fe 01       	movw	r30, r28
 a14:	e8 0d       	add	r30, r8
 a16:	f1 1d       	adc	r31, r1
 a18:	80 81       	ld	r24, Z
 a1a:	80 33       	cpi	r24, 0x30	; 48
 a1c:	21 f4       	brne	.+8      	; 0xa26 <vfprintf+0x308>
 a1e:	9a 2d       	mov	r25, r10
 a20:	99 7e       	andi	r25, 0xE9	; 233
 a22:	a9 2e       	mov	r10, r25
 a24:	09 c0       	rjmp	.+18     	; 0xa38 <vfprintf+0x31a>
 a26:	a2 fe       	sbrs	r10, 2
 a28:	06 c0       	rjmp	.+12     	; 0xa36 <vfprintf+0x318>
 a2a:	b3 94       	inc	r11
 a2c:	b3 94       	inc	r11
 a2e:	04 c0       	rjmp	.+8      	; 0xa38 <vfprintf+0x31a>
 a30:	8a 2d       	mov	r24, r10
 a32:	86 78       	andi	r24, 0x86	; 134
 a34:	09 f0       	breq	.+2      	; 0xa38 <vfprintf+0x31a>
 a36:	b3 94       	inc	r11
 a38:	a3 fc       	sbrc	r10, 3
 a3a:	10 c0       	rjmp	.+32     	; 0xa5c <vfprintf+0x33e>
 a3c:	a0 fe       	sbrs	r10, 0
 a3e:	06 c0       	rjmp	.+12     	; 0xa4c <vfprintf+0x32e>
 a40:	b2 14       	cp	r11, r2
 a42:	80 f4       	brcc	.+32     	; 0xa64 <vfprintf+0x346>
 a44:	28 0c       	add	r2, r8
 a46:	92 2c       	mov	r9, r2
 a48:	9b 18       	sub	r9, r11
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <vfprintf+0x348>
 a4c:	b2 14       	cp	r11, r2
 a4e:	58 f4       	brcc	.+22     	; 0xa66 <vfprintf+0x348>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e2       	ldi	r24, 0x20	; 32
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	76 d0       	rcall	.+236    	; 0xb44 <fputc>
 a58:	b3 94       	inc	r11
 a5a:	f8 cf       	rjmp	.-16     	; 0xa4c <vfprintf+0x32e>
 a5c:	b2 14       	cp	r11, r2
 a5e:	18 f4       	brcc	.+6      	; 0xa66 <vfprintf+0x348>
 a60:	2b 18       	sub	r2, r11
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x34a>
 a64:	98 2c       	mov	r9, r8
 a66:	21 2c       	mov	r2, r1
 a68:	a4 fe       	sbrs	r10, 4
 a6a:	0f c0       	rjmp	.+30     	; 0xa8a <vfprintf+0x36c>
 a6c:	b6 01       	movw	r22, r12
 a6e:	80 e3       	ldi	r24, 0x30	; 48
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	68 d0       	rcall	.+208    	; 0xb44 <fputc>
 a74:	a2 fe       	sbrs	r10, 2
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <vfprintf+0x386>
 a78:	a1 fc       	sbrc	r10, 1
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <vfprintf+0x364>
 a7c:	88 e7       	ldi	r24, 0x78	; 120
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <vfprintf+0x368>
 a82:	88 e5       	ldi	r24, 0x58	; 88
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	b6 01       	movw	r22, r12
 a88:	0c c0       	rjmp	.+24     	; 0xaa2 <vfprintf+0x384>
 a8a:	8a 2d       	mov	r24, r10
 a8c:	86 78       	andi	r24, 0x86	; 134
 a8e:	51 f0       	breq	.+20     	; 0xaa4 <vfprintf+0x386>
 a90:	a1 fe       	sbrs	r10, 1
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <vfprintf+0x37a>
 a94:	8b e2       	ldi	r24, 0x2B	; 43
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <vfprintf+0x37c>
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	a7 fc       	sbrc	r10, 7
 a9c:	8d e2       	ldi	r24, 0x2D	; 45
 a9e:	b6 01       	movw	r22, r12
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	50 d0       	rcall	.+160    	; 0xb44 <fputc>
 aa4:	89 14       	cp	r8, r9
 aa6:	30 f4       	brcc	.+12     	; 0xab4 <vfprintf+0x396>
 aa8:	b6 01       	movw	r22, r12
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	4a d0       	rcall	.+148    	; 0xb44 <fputc>
 ab0:	9a 94       	dec	r9
 ab2:	f8 cf       	rjmp	.-16     	; 0xaa4 <vfprintf+0x386>
 ab4:	8a 94       	dec	r8
 ab6:	f3 01       	movw	r30, r6
 ab8:	e8 0d       	add	r30, r8
 aba:	f1 1d       	adc	r31, r1
 abc:	80 81       	ld	r24, Z
 abe:	b6 01       	movw	r22, r12
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	40 d0       	rcall	.+128    	; 0xb44 <fputc>
 ac4:	81 10       	cpse	r8, r1
 ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <vfprintf+0x396>
 ac8:	22 20       	and	r2, r2
 aca:	09 f4       	brne	.+2      	; 0xace <vfprintf+0x3b0>
 acc:	4e ce       	rjmp	.-868    	; 0x76a <vfprintf+0x4c>
 ace:	b6 01       	movw	r22, r12
 ad0:	80 e2       	ldi	r24, 0x20	; 32
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	37 d0       	rcall	.+110    	; 0xb44 <fputc>
 ad6:	2a 94       	dec	r2
 ad8:	f7 cf       	rjmp	.-18     	; 0xac8 <vfprintf+0x3aa>
 ada:	f6 01       	movw	r30, r12
 adc:	86 81       	ldd	r24, Z+6	; 0x06
 ade:	97 81       	ldd	r25, Z+7	; 0x07
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0x3c8>
 ae2:	8f ef       	ldi	r24, 0xFF	; 255
 ae4:	9f ef       	ldi	r25, 0xFF	; 255
 ae6:	2b 96       	adiw	r28, 0x0b	; 11
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	ff 90       	pop	r15
 afc:	ef 90       	pop	r14
 afe:	df 90       	pop	r13
 b00:	cf 90       	pop	r12
 b02:	bf 90       	pop	r11
 b04:	af 90       	pop	r10
 b06:	9f 90       	pop	r9
 b08:	8f 90       	pop	r8
 b0a:	7f 90       	pop	r7
 b0c:	6f 90       	pop	r6
 b0e:	5f 90       	pop	r5
 b10:	4f 90       	pop	r4
 b12:	3f 90       	pop	r3
 b14:	2f 90       	pop	r2
 b16:	08 95       	ret

00000b18 <strnlen_P>:
 b18:	fc 01       	movw	r30, r24
 b1a:	05 90       	lpm	r0, Z+
 b1c:	61 50       	subi	r22, 0x01	; 1
 b1e:	70 40       	sbci	r23, 0x00	; 0
 b20:	01 10       	cpse	r0, r1
 b22:	d8 f7       	brcc	.-10     	; 0xb1a <strnlen_P+0x2>
 b24:	80 95       	com	r24
 b26:	90 95       	com	r25
 b28:	8e 0f       	add	r24, r30
 b2a:	9f 1f       	adc	r25, r31
 b2c:	08 95       	ret

00000b2e <strnlen>:
 b2e:	fc 01       	movw	r30, r24
 b30:	61 50       	subi	r22, 0x01	; 1
 b32:	70 40       	sbci	r23, 0x00	; 0
 b34:	01 90       	ld	r0, Z+
 b36:	01 10       	cpse	r0, r1
 b38:	d8 f7       	brcc	.-10     	; 0xb30 <strnlen+0x2>
 b3a:	80 95       	com	r24
 b3c:	90 95       	com	r25
 b3e:	8e 0f       	add	r24, r30
 b40:	9f 1f       	adc	r25, r31
 b42:	08 95       	ret

00000b44 <fputc>:
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	fb 01       	movw	r30, r22
 b4e:	23 81       	ldd	r18, Z+3	; 0x03
 b50:	21 fd       	sbrc	r18, 1
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <fputc+0x16>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	9f ef       	ldi	r25, 0xFF	; 255
 b58:	2c c0       	rjmp	.+88     	; 0xbb2 <fputc+0x6e>
 b5a:	22 ff       	sbrs	r18, 2
 b5c:	16 c0       	rjmp	.+44     	; 0xb8a <fputc+0x46>
 b5e:	46 81       	ldd	r20, Z+6	; 0x06
 b60:	57 81       	ldd	r21, Z+7	; 0x07
 b62:	24 81       	ldd	r18, Z+4	; 0x04
 b64:	35 81       	ldd	r19, Z+5	; 0x05
 b66:	42 17       	cp	r20, r18
 b68:	53 07       	cpc	r21, r19
 b6a:	44 f4       	brge	.+16     	; 0xb7c <fputc+0x38>
 b6c:	a0 81       	ld	r26, Z
 b6e:	b1 81       	ldd	r27, Z+1	; 0x01
 b70:	9d 01       	movw	r18, r26
 b72:	2f 5f       	subi	r18, 0xFF	; 255
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	31 83       	std	Z+1, r19	; 0x01
 b78:	20 83       	st	Z, r18
 b7a:	8c 93       	st	X, r24
 b7c:	26 81       	ldd	r18, Z+6	; 0x06
 b7e:	37 81       	ldd	r19, Z+7	; 0x07
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	37 83       	std	Z+7, r19	; 0x07
 b86:	26 83       	std	Z+6, r18	; 0x06
 b88:	14 c0       	rjmp	.+40     	; 0xbb2 <fputc+0x6e>
 b8a:	8b 01       	movw	r16, r22
 b8c:	ec 01       	movw	r28, r24
 b8e:	fb 01       	movw	r30, r22
 b90:	00 84       	ldd	r0, Z+8	; 0x08
 b92:	f1 85       	ldd	r31, Z+9	; 0x09
 b94:	e0 2d       	mov	r30, r0
 b96:	09 95       	icall
 b98:	89 2b       	or	r24, r25
 b9a:	e1 f6       	brne	.-72     	; 0xb54 <fputc+0x10>
 b9c:	d8 01       	movw	r26, r16
 b9e:	16 96       	adiw	r26, 0x06	; 6
 ba0:	8d 91       	ld	r24, X+
 ba2:	9c 91       	ld	r25, X
 ba4:	17 97       	sbiw	r26, 0x07	; 7
 ba6:	01 96       	adiw	r24, 0x01	; 1
 ba8:	17 96       	adiw	r26, 0x07	; 7
 baa:	9c 93       	st	X, r25
 bac:	8e 93       	st	-X, r24
 bae:	16 97       	sbiw	r26, 0x06	; 6
 bb0:	ce 01       	movw	r24, r28
 bb2:	df 91       	pop	r29
 bb4:	cf 91       	pop	r28
 bb6:	1f 91       	pop	r17
 bb8:	0f 91       	pop	r16
 bba:	08 95       	ret

00000bbc <__ultoa_invert>:
 bbc:	fa 01       	movw	r30, r20
 bbe:	aa 27       	eor	r26, r26
 bc0:	28 30       	cpi	r18, 0x08	; 8
 bc2:	51 f1       	breq	.+84     	; 0xc18 <__ultoa_invert+0x5c>
 bc4:	20 31       	cpi	r18, 0x10	; 16
 bc6:	81 f1       	breq	.+96     	; 0xc28 <__ultoa_invert+0x6c>
 bc8:	e8 94       	clt
 bca:	6f 93       	push	r22
 bcc:	6e 7f       	andi	r22, 0xFE	; 254
 bce:	6e 5f       	subi	r22, 0xFE	; 254
 bd0:	7f 4f       	sbci	r23, 0xFF	; 255
 bd2:	8f 4f       	sbci	r24, 0xFF	; 255
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	af 4f       	sbci	r26, 0xFF	; 255
 bd8:	b1 e0       	ldi	r27, 0x01	; 1
 bda:	3e d0       	rcall	.+124    	; 0xc58 <__ultoa_invert+0x9c>
 bdc:	b4 e0       	ldi	r27, 0x04	; 4
 bde:	3c d0       	rcall	.+120    	; 0xc58 <__ultoa_invert+0x9c>
 be0:	67 0f       	add	r22, r23
 be2:	78 1f       	adc	r23, r24
 be4:	89 1f       	adc	r24, r25
 be6:	9a 1f       	adc	r25, r26
 be8:	a1 1d       	adc	r26, r1
 bea:	68 0f       	add	r22, r24
 bec:	79 1f       	adc	r23, r25
 bee:	8a 1f       	adc	r24, r26
 bf0:	91 1d       	adc	r25, r1
 bf2:	a1 1d       	adc	r26, r1
 bf4:	6a 0f       	add	r22, r26
 bf6:	71 1d       	adc	r23, r1
 bf8:	81 1d       	adc	r24, r1
 bfa:	91 1d       	adc	r25, r1
 bfc:	a1 1d       	adc	r26, r1
 bfe:	20 d0       	rcall	.+64     	; 0xc40 <__ultoa_invert+0x84>
 c00:	09 f4       	brne	.+2      	; 0xc04 <__ultoa_invert+0x48>
 c02:	68 94       	set
 c04:	3f 91       	pop	r19
 c06:	2a e0       	ldi	r18, 0x0A	; 10
 c08:	26 9f       	mul	r18, r22
 c0a:	11 24       	eor	r1, r1
 c0c:	30 19       	sub	r19, r0
 c0e:	30 5d       	subi	r19, 0xD0	; 208
 c10:	31 93       	st	Z+, r19
 c12:	de f6       	brtc	.-74     	; 0xbca <__ultoa_invert+0xe>
 c14:	cf 01       	movw	r24, r30
 c16:	08 95       	ret
 c18:	46 2f       	mov	r20, r22
 c1a:	47 70       	andi	r20, 0x07	; 7
 c1c:	40 5d       	subi	r20, 0xD0	; 208
 c1e:	41 93       	st	Z+, r20
 c20:	b3 e0       	ldi	r27, 0x03	; 3
 c22:	0f d0       	rcall	.+30     	; 0xc42 <__ultoa_invert+0x86>
 c24:	c9 f7       	brne	.-14     	; 0xc18 <__ultoa_invert+0x5c>
 c26:	f6 cf       	rjmp	.-20     	; 0xc14 <__ultoa_invert+0x58>
 c28:	46 2f       	mov	r20, r22
 c2a:	4f 70       	andi	r20, 0x0F	; 15
 c2c:	40 5d       	subi	r20, 0xD0	; 208
 c2e:	4a 33       	cpi	r20, 0x3A	; 58
 c30:	18 f0       	brcs	.+6      	; 0xc38 <__ultoa_invert+0x7c>
 c32:	49 5d       	subi	r20, 0xD9	; 217
 c34:	31 fd       	sbrc	r19, 1
 c36:	40 52       	subi	r20, 0x20	; 32
 c38:	41 93       	st	Z+, r20
 c3a:	02 d0       	rcall	.+4      	; 0xc40 <__ultoa_invert+0x84>
 c3c:	a9 f7       	brne	.-22     	; 0xc28 <__ultoa_invert+0x6c>
 c3e:	ea cf       	rjmp	.-44     	; 0xc14 <__ultoa_invert+0x58>
 c40:	b4 e0       	ldi	r27, 0x04	; 4
 c42:	a6 95       	lsr	r26
 c44:	97 95       	ror	r25
 c46:	87 95       	ror	r24
 c48:	77 95       	ror	r23
 c4a:	67 95       	ror	r22
 c4c:	ba 95       	dec	r27
 c4e:	c9 f7       	brne	.-14     	; 0xc42 <__ultoa_invert+0x86>
 c50:	00 97       	sbiw	r24, 0x00	; 0
 c52:	61 05       	cpc	r22, r1
 c54:	71 05       	cpc	r23, r1
 c56:	08 95       	ret
 c58:	9b 01       	movw	r18, r22
 c5a:	ac 01       	movw	r20, r24
 c5c:	0a 2e       	mov	r0, r26
 c5e:	06 94       	lsr	r0
 c60:	57 95       	ror	r21
 c62:	47 95       	ror	r20
 c64:	37 95       	ror	r19
 c66:	27 95       	ror	r18
 c68:	ba 95       	dec	r27
 c6a:	c9 f7       	brne	.-14     	; 0xc5e <__ultoa_invert+0xa2>
 c6c:	62 0f       	add	r22, r18
 c6e:	73 1f       	adc	r23, r19
 c70:	84 1f       	adc	r24, r20
 c72:	95 1f       	adc	r25, r21
 c74:	a0 1d       	adc	r26, r0
 c76:	08 95       	ret

00000c78 <_exit>:
 c78:	f8 94       	cli

00000c7a <__stop_program>:
 c7a:	ff cf       	rjmp	.-2      	; 0xc7a <__stop_program>
