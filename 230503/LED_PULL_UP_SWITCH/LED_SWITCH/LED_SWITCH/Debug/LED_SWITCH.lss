
LED_SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ad  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000220  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040e  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000190e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	61 c0       	rjmp	.+194    	; 0x178 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:


int main(void)
{
	// 출력용 포트를 출력 모드로 설정
	*(outputport. ddrresister) |= (1 << outputport.pinNum);
  b8:	a7 e0       	ldi	r26, 0x07	; 7
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	12 96       	adiw	r26, 0x02	; 2
  be:	ed 91       	ld	r30, X+
  c0:	fc 91       	ld	r31, X
  c2:	13 97       	sbiw	r26, 0x03	; 3
  c4:	40 81       	ld	r20, Z
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	9c 01       	movw	r18, r24
  cc:	16 96       	adiw	r26, 0x06	; 6
  ce:	0c 90       	ld	r0, X
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <main+0x1e>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <main+0x1a>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
	
	// 입력용 포트를 입력 모드로 설정
	*(inputport.ddrresister)&= ~( 1 << inputport.pinNum);
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	a2 81       	ldd	r26, Z+2	; 0x02
  e4:	b3 81       	ldd	r27, Z+3	; 0x03
  e6:	2c 91       	ld	r18, X
  e8:	ac 01       	movw	r20, r24
  ea:	06 80       	ldd	r0, Z+6	; 0x06
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x3a>
  ee:	44 0f       	add	r20, r20
  f0:	55 1f       	adc	r21, r21
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x36>
  f6:	40 95       	com	r20
  f8:	24 23       	and	r18, r20
  fa:	2c 93       	st	X, r18
	
	//입력용 포트에 풀업저항 사용 설정
	*(inputport.portresister) |= ( 1<< inputport.pinNum);
  fc:	a0 81       	ld	r26, Z
  fe:	b1 81       	ldd	r27, Z+1	; 0x01
 100:	2c 91       	ld	r18, X
 102:	06 80       	ldd	r0, Z+6	; 0x06
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x52>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <main+0x4e>
 10e:	82 2b       	or	r24, r18
 110:	8c 93       	st	X, r24
	
	
	
	while(1)
	{
		if(!(*(inputport.pinresister)&(1 << inputport.pinNum)))
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	a4 81       	ldd	r26, Z+4	; 0x04
 118:	b5 81       	ldd	r27, Z+5	; 0x05
 11a:	8c 91       	ld	r24, X
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	06 80       	ldd	r0, Z+6	; 0x06
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x6e>
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x6a>
 12a:	80 fd       	sbrc	r24, 0
 12c:	12 c0       	rjmp	.+36     	; 0x152 <main+0x9a>
		{
			*(outputport.portresister) |= ( 1 << outputport.pinNum);
 12e:	a7 e0       	ldi	r26, 0x07	; 7
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	ed 91       	ld	r30, X+
 134:	fc 91       	ld	r31, X
 136:	11 97       	sbiw	r26, 0x01	; 1
 138:	20 81       	ld	r18, Z
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	16 96       	adiw	r26, 0x06	; 6
 140:	0c 90       	ld	r0, X
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0x90>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <main+0x8c>
 14c:	82 2b       	or	r24, r18
 14e:	80 83       	st	Z, r24
 150:	e0 cf       	rjmp	.-64     	; 0x112 <main+0x5a>
		}
		else
		{
			*(outputport.portresister) &= ~( 1 << outputport.pinNum);
 152:	a7 e0       	ldi	r26, 0x07	; 7
 154:	b1 e0       	ldi	r27, 0x01	; 1
 156:	ed 91       	ld	r30, X+
 158:	fc 91       	ld	r31, X
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	20 81       	ld	r18, Z
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	16 96       	adiw	r26, 0x06	; 6
 164:	0c 90       	ld	r0, X
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xb4>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0xb0>
 170:	80 95       	com	r24
 172:	82 23       	and	r24, r18
 174:	80 83       	st	Z, r24
 176:	cd cf       	rjmp	.-102    	; 0x112 <main+0x5a>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
